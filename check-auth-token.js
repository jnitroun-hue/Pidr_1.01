// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12)

console.log('üîç –ü–†–û–í–ï–†–ö–ê JWT –¢–û–ö–ï–ù–ê');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie
const cookies = document.cookie.split(';').reduce((acc, cookie) => {
  const [key, value] = cookie.trim().split('=');
  acc[key] = value;
  return acc;
}, {});

console.log('üç™ –í—Å–µ cookies:', cookies);

if (cookies.auth_token) {
  console.log('‚úÖ auth_token –Ω–∞–π–¥–µ–Ω!');
  console.log('üîë –¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤):', cookies.auth_token.substring(0, 50) + '...');
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
  fetch('/api/auth', {
    method: 'GET',
    credentials: 'include'
  })
  .then(response => {
    console.log('üì° API –æ—Ç–≤–µ—Ç:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ API:', error);
  });
  
} else {
  console.log('‚ùå auth_token –ù–ï –Ω–∞–π–¥–µ–Ω –≤ cookies');
}

// 3. –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT (—Ç–æ–ª—å–∫–æ payload, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏)
if (cookies.auth_token) {
  try {
    const payload = JSON.parse(atob(cookies.auth_token.split('.')[1]));
    console.log('üîì JWT payload:', payload);
    console.log('‚è∞ Expires:', new Date(payload.exp * 1000));
  } catch (e) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT:', e);
  }
}
