;; NFT Collection Contract для P.I.D.R Card Game
;; Коллекция из 52 карт с системой комиссий

#include "imports/stdlib.fc";

;; Storage схема
;; owner_address - адрес владельца коллекции
;; next_item_index - следующий индекс для минта
;; content - метаданные коллекции (IPFS/HTTP)
;; nft_item_code - код для NFT Item контракта
;; royalty_params - параметры роялти

(slice, int, cell, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(), ;; owner_address
    ds~load_uint(64),   ;; next_item_index
    ds~load_ref(),      ;; content
    ds~load_ref(),      ;; nft_item_code
    ds~load_ref()       ;; royalty_params
  );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell()
  );
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell()
    .store_uint(item_index, 64)
    .store_slice(my_address())
    .end_cell();
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(nft_item_code)
    .store_dict(data)
    .store_uint(0, 1)
    .end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell()
    .store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(nft_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  
  if (flags & 1) { ;; ignore bounced messages
    return ();
  }
  
  slice sender_address = cs~load_msg_addr();
  
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  var (owner_address, next_item_index, content, nft_item_code, royalty_params) = load_data();
  
  ;; Минт новой NFT карты
  if (op == 1) { ;; deploy new nft
    ;; Проверяем минимальную комиссию (0.5 TON)
    throw_unless(402, msg_value >= 500000000); ;; 0.5 TON минимум
    
    int item_index = in_msg_body~load_uint(64);
    throw_unless(403, item_index <= next_item_index);
    
    var is_last = item_index == next_item_index;
    if (is_last) {
      deploy_nft_item(item_index, nft_item_code, msg_value - 100000000, in_msg_body~load_ref());
      next_item_index += 1;
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
    }
    return ();
  }
  
  ;; Получить данные коллекции
  if (op == 2) { ;; get collection data
    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(sender_address)
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0x0, 32)
      .store_uint(query_id, 64)
      .store_uint(next_item_index, 64)
      .store_ref(content)
      .store_slice(owner_address);
    send_raw_message(msg.end_cell(), 64);
    return ();
  }
  
  ;; Получить адрес NFT по индексу
  if (op == 3) { ;; get nft address by index
    int item_index = in_msg_body~load_uint(64);
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    
    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(sender_address)
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0x0, 32)
      .store_uint(query_id, 64)
      .store_slice(nft_address);
    send_raw_message(msg.end_cell(), 64);
    return ();
  }
  
  throw(0xffff);
}

;; GET методы

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _) = load_data();
  return (next_item_index, content, owner_address);
}

slice get_nft_address_by_index(int index) method_id {
  var (_, _, _, nft_item_code, _) = load_data();
  cell state_init = calculate_nft_item_state_init(index, nft_item_code);
  return calculate_nft_item_address(workchain(), state_init);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, content, _, _) = load_data();
  return (begin_cell()
    .store_ref(content)
    .store_ref(individual_nft_content)
    .end_cell());
}

