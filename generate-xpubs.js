// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HD Wallet Master XPUBs
// –ó–∞–ø—É—Å–∫: node generate-xpubs.js

const bip39 = require('bip39');
const bip32 = require('bip32');
const bitcoin = require('bitcoinjs-lib');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
const mnemonic = bip39.generateMnemonic(); // –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—é: 'your twelve word mnemonic phrase here...'

console.log('üîê –ì–ï–ù–ï–†–ê–¶–ò–Ø HD WALLET MASTER XPUB –ö–õ–Æ–ß–ï–ô');
console.log('=' .repeat(60));
console.log('');

console.log('üîë –ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ (–°–û–•–†–ê–ù–ò–¢–ï –í –ë–ï–ó–û–ü–ê–°–ù–û–ú –ú–ï–°–¢–ï!):');
console.log(mnemonic);
console.log('');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º seed –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏
const seed = bip39.mnemonicToSeedSync(mnemonic);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–Ω–µ—Ç
const coinConfigs = [
  {
    name: 'Bitcoin (BTC)',
    symbol: 'BTC',
    path: "m/44'/0'/0'",
    network: bitcoin.networks.bitcoin
  },
  {
    name: 'Ethereum (ETH)', 
    symbol: 'ETH',
    path: "m/44'/60'/0'"
  },
  {
    name: 'Toncoin (TON)',
    symbol: 'TON', 
    path: "m/44'/607'/0'"
  },
  {
    name: 'Solana (SOL)',
    symbol: 'SOL',
    path: "m/44'/501'/0'"
  },
  {
    name: 'TRON/USDT TRC20',
    symbol: 'TRC20',
    path: "m/44'/195'/0'"
  }
];

console.log('üìä MASTER XPUB –ö–õ–Æ–ß–ò:');
console.log('');

const xpubs = {};

coinConfigs.forEach(config => {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä –∫–ª—é—á
    const masterKey = bip32.fromSeed(seed, config.network);
    
    // –î–µ—Ä–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á –ø–æ –ø—É—Ç–∏
    const accountKey = masterKey.derivePath(config.path);
    
    // –ü–æ–ª—É—á–∞–µ–º XPUB
    const xpub = accountKey.neutered().toBase58();
    
    xpubs[config.symbol] = xpub;
    
    console.log(`${config.name}:`);
    console.log(`${config.symbol}_MASTER_XPUB=${xpub}`);
    console.log('');
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${config.name}: ${error.message}`);
    console.log('');
  }
});

console.log('üîß –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø .ENV:');
console.log('=' .repeat(60));
Object.entries(xpubs).forEach(([symbol, xpub]) => {
  console.log(`${symbol}_MASTER_XPUB=${xpub}`);
});

console.log('');
console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û:');
console.log('1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ');
console.log('2. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏');
console.log('3. XPUB –∫–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
console.log('4. –î–æ–±–∞–≤—å—Ç–µ XPUB –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel');
