// üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö API
// –ó–∞–ø—É—Å–∫: node test-crypto-apis.js

// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
function loadEnv() {
  try {
    const fs = require('fs');
    const path = require('path');
    const envPath = path.join(process.cwd(), '.env');
    
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, 'utf8');
      envContent.split('\n').forEach(line => {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').trim();
          if (value && !key.startsWith('#')) {
            process.env[key.trim()] = value;
          }
        }
      });
      console.log('‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env:', error.message);
  }
}

loadEnv();

async function testCryptoAPIs() {
  console.log('üöÄ P.I.D.R. Game - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö API\n');
  console.log('='.repeat(60));
  
  let successCount = 0;
  let totalTests = 0;

  // ================== TON API ==================
  console.log('\nüíé TON Network API:');
  totalTests++;
  try {
    if (!process.env.TON_API_KEY) {
      console.log('‚ùå TON_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    } else {
      const tonResponse = await fetch('https://toncenter.com/api/v2/getMasterchainInfo', {
        headers: { 
          'X-API-Key': process.env.TON_API_KEY,
          'Content-Type': 'application/json'
        }
      });
      
      if (tonResponse.ok) {
        const data = await tonResponse.json();
        console.log('‚úÖ TON API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   üîó –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: ${data.result?.last?.seqno || 'N/A'}`);
        successCount++;
      } else {
        console.log(`‚ùå TON API –æ—à–∏–±–∫–∞: ${tonResponse.status} ${tonResponse.statusText}`);
      }
    }
  } catch (error) {
    console.log(`‚ùå TON API –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
  }

  // ================== Ethereum API ==================
  console.log('\nüî∑ Ethereum API (Etherscan):');
  totalTests++;
  try {
    if (!process.env.ETHERSCAN_API_KEY) {
      console.log('‚ùå ETHERSCAN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    } else {
      const ethResponse = await fetch(`https://api.etherscan.io/api?module=stats&action=ethsupply&apikey=${process.env.ETHERSCAN_API_KEY}`);
      
      if (ethResponse.ok) {
        const data = await ethResponse.json();
        if (data.status === '1') {
          console.log('‚úÖ Ethereum API —Ä–∞–±–æ—Ç–∞–µ—Ç');
          console.log(`   üí∞ –û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ETH: ${(parseInt(data.result) / 1e18).toFixed(0)} ETH`);
          successCount++;
        } else {
          console.log(`‚ùå Ethereum API –æ—à–∏–±–∫–∞: ${data.message}`);
        }
      } else {
        console.log(`‚ùå Ethereum API –æ—à–∏–±–∫–∞: ${ethResponse.status}`);
      }
    }
  } catch (error) {
    console.log(`‚ùå Ethereum API –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
  }

  // ================== TRON API ==================
  console.log('\nüî¥ TRON API (TronGrid):');
  totalTests++;
  try {
    if (!process.env.TRON_GRID_API) {
      console.log('‚ùå TRON_GRID_API –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    } else {
      const tronResponse = await fetch('https://api.trongrid.io/wallet/getnowblock', {
        method: 'POST',
        headers: { 
          'TRON-PRO-API-KEY': process.env.TRON_GRID_API,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });
      
      if (tronResponse.ok) {
        const data = await tronResponse.json();
        console.log('‚úÖ TRON API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   üîó –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: ${data.block_header?.raw_data?.number || 'N/A'}`);
        successCount++;
      } else {
        console.log(`‚ùå TRON API –æ—à–∏–±–∫–∞: ${tronResponse.status}`);
      }
    }
  } catch (error) {
    console.log(`‚ùå TRON API –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
  }

  // ================== Bitcoin API ==================
  console.log('\nüí∞ Bitcoin API (Blockchain.info):');
  totalTests++;
  try {
    const btcApiKey = process.env.BLOCKCHAIN_INFO_API;
    const btcUrl = btcApiKey 
      ? `https://blockchain.info/latestblock?api_code=${btcApiKey}`
      : 'https://blockchain.info/latestblock';
    
    const btcResponse = await fetch(btcUrl);
    
    if (btcResponse.ok) {
      const data = await btcResponse.json();
      console.log('‚úÖ Bitcoin API —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üîó –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: ${data.height}`);
      console.log(`   ‚è∞ –í—Ä–µ–º—è –±–ª–æ–∫–∞: ${new Date(data.time * 1000).toLocaleString()}`);
      successCount++;
    } else {
      console.log(`‚ùå Bitcoin API –æ—à–∏–±–∫–∞: ${btcResponse.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Bitcoin API –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
  }

  // ================== Solana API ==================
  console.log('\n‚òÄÔ∏è Solana API:');
  totalTests++;
  try {
    const solanaUrl = process.env.SOLANA_RPC_URL || 'https://api.mainnet-beta.solana.com';
    
    const solResponse = await fetch(solanaUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        jsonrpc: '2.0',
        id: 1,
        method: 'getSlot'
      })
    });
    
    if (solResponse.ok) {
      const data = await solResponse.json();
      if (data.result) {
        console.log('‚úÖ Solana API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   üîó –¢–µ–∫—É—â–∏–π —Å–ª–æ—Ç: ${data.result}`);
        successCount++;
      } else {
        console.log(`‚ùå Solana API –æ—à–∏–±–∫–∞: ${data.error?.message || 'Unknown error'}`);
      }
    } else {
      console.log(`‚ùå Solana API –æ—à–∏–±–∫–∞: ${solResponse.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Solana API –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
  }

  // ================== CoinGecko API (–∫—É—Ä—Å—ã) ==================
  console.log('\nüìä CoinGecko API (–∫—É—Ä—Å—ã –≤–∞–ª—é—Ç):');
  totalTests++;
  try {
    const geckoResponse = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,tether,solana&vs_currencies=usd');
    
    if (geckoResponse.ok) {
      const data = await geckoResponse.json();
      console.log('‚úÖ CoinGecko API —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üí∞ BTC: $${data.bitcoin?.usd || 'N/A'}`);
      console.log(`   üí∞ ETH: $${data.ethereum?.usd || 'N/A'}`);
      console.log(`   üí∞ TON: $${data['the-open-network']?.usd || 'N/A'}`);
      console.log(`   üí∞ USDT: $${data.tether?.usd || 'N/A'}`);
      console.log(`   üí∞ SOL: $${data.solana?.usd || 'N/A'}`);
      successCount++;
    } else {
      console.log(`‚ùå CoinGecko API –æ—à–∏–±–∫–∞: ${geckoResponse.status}`);
    }
  } catch (error) {
    console.log(`‚ùå CoinGecko API –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
  }

  // ================== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ==================
  console.log('\n' + '='.repeat(60));
  console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö API: ${successCount}/${totalTests}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalTests - successCount}/${totalTests}`);
  
  if (successCount === totalTests) {
    console.log('\nüéâ –í–°–ï API –†–ê–ë–û–¢–ê–Æ–¢! –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã! üöÄ');
  } else if (successCount >= totalTests * 0.5) {
    console.log('\n‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏.');
  } else {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.');
  }

  console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Å—Ç–µ—Ä –∫–æ—à–µ–ª—å–∫–∏');
  console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–µ–π');
  console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ testnet —Å–µ—Ç—è—Ö');
  
  console.log('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
  console.log('‚Ä¢ TON Center: https://t.me/toncenter');
  console.log('‚Ä¢ Etherscan: https://etherscan.io/myapikey');
  console.log('‚Ä¢ TronGrid: https://www.trongrid.io/');
  console.log('‚Ä¢ Blockchain.info: https://www.blockchain.com/api');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
function checkEnvFile() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n');
  
  const requiredKeys = [
    'TON_API_KEY',
    'ETHERSCAN_API_KEY', 
    'TRON_GRID_API',
    'BLOCKCHAIN_INFO_API',
    'SOLANA_RPC_URL'
  ];

  const optionalKeys = [
    'MASTER_TON_WALLET',
    'MASTER_BTC_WALLET',
    'MASTER_ETH_WALLET',
    'MASTER_TRON_WALLET',
    'MASTER_SOLANA_WALLET'
  ];

  console.log('üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ API –∫–ª—é—á–∏:');
  requiredKeys.forEach(key => {
    const value = process.env[key];
    if (value) {
      console.log(`‚úÖ ${key}: ${value.substring(0, 10)}...`);
    } else {
      console.log(`‚ùå ${key}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });

  console.log('\nüí∞ –ú–∞—Å—Ç–µ—Ä –∫–æ—à–µ–ª—å–∫–∏:');
  optionalKeys.forEach(key => {
    const value = process.env[key];
    if (value) {
      console.log(`‚úÖ ${key}: ${value.substring(0, 10)}...`);
    } else {
      console.log(`‚ö†Ô∏è  ${key}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('üéÆ P.I.D.R. Game - Crypto API Tester');
  console.log('====================================\n');
  
  checkEnvFile();
  console.log('\n' + '='.repeat(60));
  
  await testCryptoAPIs();
}

main().catch(console.error);
