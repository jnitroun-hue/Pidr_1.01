import React from 'react'
import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import { createPlayers, generateAvatar } from '../lib/game/avatars'
import { calculateRatingRewards, calculatePlayerPositions } from '../lib/rating/ratingSystem'

export interface Card {
  id: string
  type: 'normal' | 'special' | 'pidr'
  title: string
  description: string
  image?: string
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  effect?: string
  rank?: number // –†–∞–Ω–≥ –∫–∞—Ä—Ç—ã (2-14)
  suit?: string // –ú–∞—Å—Ç—å –∫–∞—Ä—Ç—ã
  open?: boolean // –û—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–∞
}

export interface Player {
  id: string
  name: string
  avatar?: string
  score: number
  cards: Card[] // –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã)
  penki: Card[] // –ü–µ–Ω—å–∫–∏ (2 –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã –≤ 3-–π —Å—Ç–∞–¥–∏–∏)
  playerStage: 1 | 2 | 3 // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è –∏–≥—Ä–æ–∫–∞
  isCurrentPlayer: boolean
  isUser?: boolean // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  isBot?: boolean // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –±–æ—Ç–æ–º
  difficulty?: 'easy' | 'medium' | 'hard' // –°–ª–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞
  isWinner?: boolean // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º (–¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π)
}

export interface GameStats {
  gamesPlayed: number
  gamesWon: number
  totalScore: number
  bestScore: number
  cardsCollected: number
  achievements: string[]
}

export interface GameSettings {
  soundEnabled: boolean
  animationsEnabled: boolean
  hapticEnabled: boolean
  autoPlay: boolean
  difficulty: 'easy' | 'medium' | 'hard'
}

interface GameState {
  // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isGameActive: boolean
  gameMode: 'single' | 'multiplayer'
  players: Player[]
  currentPlayerId: string | null
  deck: Card[]
  playedCards: Card[]
  lastPlayedCard: Card | null
  
  // –ù–û–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê: –°—Ç–æ–ø–∫–∞ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –∫–∞—Ä—Ç
  penaltyDeck: Card[]
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞–¥–∏–π –∏–≥—Ä—ã P.I.D.R
  gameStage: 1 | 2 | 3 | 4 // 4 = –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  availableTargets: number[] // –ò–Ω–¥–µ–∫—Å—ã –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É
  mustDrawFromDeck: boolean // –î–æ–ª–∂–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
  canPlaceOnSelf: boolean // –ú–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É —Å–µ–±–µ
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  turnPhase: 'analyzing_hand' | 'showing_deck_hint' | 'deck_card_revealed' | 'waiting_deck_action' | 'showing_card_actions' | 'waiting_target_selection' | 'turn_ended'
  revealedDeckCard: Card | null // –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã (—Å–ª–µ–≤–∞ –æ—Ç –∫–æ–ª–æ–¥—ã)
  canPlaceOnSelfByRules: boolean // –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  skipHandAnalysis: boolean // –ü—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–∏ –ø–æ—Å–ª–µ —É–∫–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ–±—è
  
  // –î–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
  lastDrawnCard: Card | null // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã
  lastPlayerToDrawCard: string | null // ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤–∑—è–ª –∫–∞—Ä—Ç—É
  trumpSuit: 'clubs' | 'diamonds' | 'hearts' | 'spades' | null // –ö–æ–∑—ã—Ä—å –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
  drawnHistory: Card[] // –ò—Å—Ç–æ—Ä–∏—è –¥–æ–±—Ä–∞–Ω–Ω—ã—Ö/–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–∑—ã—Ä—è)
  
  // –°–∏—Å—Ç–µ–º–∞ "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" –∏ —à—Ç—Ä–∞—Ñ–æ–≤
  oneCardDeclarations: {[playerId: string]: boolean} // –ö—Ç–æ –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
  oneCardTimers: {[playerId: string]: number} // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (timestamp)
  playersWithOneCard: string[] // –ò–≥—Ä–æ–∫–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö 1 –∫–∞—Ä—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤)
  pendingPenalty: {targetPlayerId: string, contributorsNeeded: string[]} | null // –û–∂–∏–¥–∞—é—â–∏–π —à—Ç—Ä–∞—Ñ
  
  // UI –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —à—Ç—Ä–∞—Ñ–∞
  showPenaltyCardSelection: boolean // –ü–æ–∫–∞–∑–∞—Ç—å UI –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —à—Ç—Ä–∞—Ñ–∞
  penaltyCardSelectionPlayerId: string | null // ID –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É
  
  // –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  eliminationOrder: string[] // –ü–æ—Ä—è–¥–æ–∫ –≤—ã–±—ã–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ (–ø–µ—Ä–≤—ã–π = –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ)
  isRankedGame: boolean // –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –∏–≥—Ä–∞ –∏–ª–∏ –Ω–µ—Ç
  showVictoryModal: boolean // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–±–µ–¥—ã
  victoryData: {
    position: number;
    isWinner: boolean;
    playerName: string;
    totalPlayers?: number;
    gameMode: 'single' | 'multiplayer';
    isRanked?: boolean;
    ratingChange?: number;
    rewardsEarned?: number;
    rewards?: {
      experience: number;
      coins: number;
      ratingChange: number;
    };
  } | null
  
  // üéâ –ú–û–î–ê–õ–ö–ò –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô –ò –ü–†–û–ò–ì–†–ê–í–®–ï–ì–û
  showWinnerModal: boolean
  winnerModalData: { playerName: string; place: number; avatar?: string } | null
  showLoserModal: boolean
  loserModalData: { playerName: string; avatar?: string } | null
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ 2-–π —Å—Ç–∞–¥–∏–∏ (–¥—É—Ä–∞–∫)
  tableStack: Card[] // –°—Ç–æ–ø–∫–∞ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ (–Ω–∏–∂–Ω—è—è = –ø–µ—Ä–≤–∞—è, –≤–µ—Ä—Ö–Ω—è—è = –ø–æ—Å–ª–µ–¥–Ω—è—è)
  selectedHandCard: Card | null // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ä—É–∫–µ (–¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
  stage2TurnPhase: 'selecting_card' | 'playing_card' | 'waiting_beat' | 'round_complete' // –§–∞–∑—ã —Ö–æ–¥–∞ 2-–π —Å—Ç–∞–¥–∏–∏
  
  // –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  multiplayerData: {
    roomId: string
    roomCode: string
    isHost: boolean
    connectedPlayers: string[]
  } | null
  roundInProgress: boolean // –ò–¥–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –±–∏—Ç—å—è
  currentRoundInitiator: string | null // –ö—Ç–æ –Ω–∞—á–∞–ª —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
  roundFinisher: string | null // –ò–≥—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—Ä—É–≥ (–ø–æ–∑–∏—Ü–∏—è -1 –æ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞)
  finisherPassed: boolean // –§–∏–Ω–∏—à–µ—Ä —É–∂–µ —Å—Ö–æ–¥–∏–ª –∏ –Ω–µ –ø–æ–±–∏–ª (–Ω–∞—á–∞–ª—Å—è –æ–≤–µ—Ä—Ç–∞–π–º)
  lastCardTaker: string | null // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –∫–∞—Ä—Ç—É —Å–æ —Å—Ç–æ–ª–∞
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  stats: GameStats
  settings: GameSettings
  
  // –ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
  gameCoins: number
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  selectedCard: Card | null
  showCardDetails: boolean
  isLoading: boolean
  notification: {
    message: string
    type: 'success' | 'error' | 'warning' | 'info'
    visible: boolean
  } | null
  
  // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã
  startGame: (mode: 'single' | 'multiplayer', playersCount?: number, multiplayerConfig?: any, userInfo?: { avatar?: string; username?: string }) => Promise<void>
  endGame: () => void
  playCard: (cardId: string) => void
  drawCard: () => void
  nextTurn: () => void
  resetGame: () => void
  updatePlayerRewards: (experience: number, coins: number, ratingChange?: number) => Promise<void>
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è P.I.D.R –∏–≥—Ä—ã
  getCardRank: (imageName: string) => number
  findAvailableTargets: (currentPlayerId: string) => number[]
  canMakeMove: (currentPlayerId: string) => boolean
  makeMove: (targetPlayerId: string) => void
  drawCardFromDeck: () => boolean // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤–∑—è—Ç–∞
  placeCardOnSelf: () => void
  checkStage1End: () => void
  processPlayerTurn: (playerId: string) => void
  determineTrumpSuit: () => 'clubs' | 'diamonds' | 'hearts' | 'spades' | null
  getCardSuit: (imageName: string) => 'clubs' | 'diamonds' | 'hearts' | 'spades' | 'unknown'
  
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ö–æ–¥–∞
  revealDeckCard: () => boolean
  canPlaceCardOnSelf: (deckCard: Card, playerTopCard: Card) => boolean  
  placeCardOnSelfByRules: () => void
  takeCardNotByRules: () => void // –ü–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç (–µ—Å–ª–∏ –Ω–µ—Ç —Ö–æ–¥–æ–≤)
  resetTurnState: () => void
  onDeckClick: () => void
  findAvailableTargetsForDeckCard: (deckCard: Card) => number[]
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è 2-–π —Å—Ç–∞–¥–∏–∏ (P.I.D.R. –ø—Ä–∞–≤–∏–ª–∞)
  selectHandCard: (card: Card) => void
  playSelectedCard: () => void
  canBeatCard: (attackCard: Card, defendCard: Card, trumpSuit: string) => boolean
  takeTableCards: () => void
  initializeStage2: () => void
  calculateRoundFinisher: (initiatorId: string) => string | null
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è 3-–π —Å—Ç–∞–¥–∏–∏
  checkStage3Transition: (playerId: string) => void
  activatePenki: (playerId: string) => void
  checkVictoryCondition: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" –∏ —à—Ç—Ä–∞—Ñ–æ–≤
  checkOneCardStatus: () => void // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º—É –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–ª—è—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
  declareOneCard: (playerId: string) => void // –ò–≥—Ä–æ–∫ –æ–±—ä—è–≤–ª—è–µ—Ç "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
  askHowManyCards: (askerPlayerId: string, targetPlayerId: string) => void // –°–ø—Ä–æ—Å–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç
  startPenaltyProcess: (forgetfulPlayerId: string) => void // –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —à—Ç—Ä–∞—Ñ–∞
  contributePenaltyCard: (contributorId: string, cardId: string) => void // –û—Ç–¥–∞—Ç—å –∫–∞—Ä—Ç—É –∑–∞ —à—Ç—Ä–∞—Ñ
  cancelPenalty: () => void // –û—Ç–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ
  findWorstCardInHand: (cards: Card[], trumpSuit: string | null) => Card | null // –ù–∞–π—Ç–∏ –ø–ª–æ—Ö—É—é –∫–∞—Ä—Ç—É
  
  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –®–¢–†–ê–§–ù–û–ô –°–¢–û–ü–ö–ò
  addCardToPenaltyDeck: (card: Card) => void // –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –≤ —à—Ç—Ä–∞—Ñ–Ω—É—é —Å—Ç–æ–ø–∫—É
  distributePenaltyCards: (targetPlayerId: string) => void // –†–∞–∑–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±–æ—Ç–æ–≤
  calculateAdaptiveDelay: () => number // –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FPS
  scheduleBotAskHowManyCards: (targetPlayerId: string) => void // –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞ "—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?"
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏
  selectCard: (card: Card | null) => void
  addCardToDeck: (card: Card) => void
  removeCardFromDeck: (cardId: string) => void
  
  // –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –º–µ—Ç–æ–¥—ã
  syncGameState: (gameState: any) => void
  sendPlayerMove: (moveData: any) => void
  applyRemoteMove: (moveData: any) => void
  
  // –ò–≥—Ä–æ–∫–∏
  addPlayer: (name: string) => void
  removePlayer: (playerId: string) => void
  updatePlayerScore: (playerId: string, score: number) => void
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  updateSettings: (settings: Partial<GameSettings>) => void
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  updateStats: (stats: Partial<GameStats>) => void
  addAchievement: (achievementId: string) => void
  
  // –ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
  addCoins: (amount: number) => void
  spendCoins: (amount: number) => boolean
  
  // UI
  showNotification: (message: string, type: 'success' | 'error' | 'warning' | 'info', duration?: number) => void
  hideNotification: () => void
  setLoading: (loading: boolean) => void
}

// –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã P.I.D.R.
const DEFAULT_CARDS: Card[] = [
  {
    id: '1',
    type: 'normal',
    title: '–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞',
    description: '–ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ –æ—Å–æ–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤',
    rarity: 'common'
  },
  {
    id: '2',
    type: 'special',
    title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞',
    description: '–ö–∞—Ä—Ç–∞ —Å –æ—Å–æ–±—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º',
    rarity: 'rare',
    effect: 'draw_extra'
  },
  {
    id: '3',
    type: 'pidr',
    title: 'P.I.D.R.',
    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ P.I.D.R.!',
    rarity: 'legendary',
    effect: 'pidr_power'
  }
]

// –°–æ–∑–¥–∞–Ω–∏–µ Zustand —Å—Ç–æ—Ä–∞ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
export const useGameStore = create<GameState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isGameActive: false,
      gameMode: 'single',
      players: [],
      currentPlayerId: null,
      deck: [...DEFAULT_CARDS],
      playedCards: [],
      lastPlayedCard: null,
      
      // –ù–û–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê: –°—Ç–æ–ø–∫–∞ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –∫–∞—Ä—Ç
      penaltyDeck: [],
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞–¥–∏–π –∏–≥—Ä—ã P.I.D.R
      gameStage: 1,
      availableTargets: [],
      mustDrawFromDeck: false,
      canPlaceOnSelf: false,
      
      // –î–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
      lastDrawnCard: null,
      lastPlayerToDrawCard: null,
      trumpSuit: null,
      drawnHistory: [],
      
      // –°–∏—Å—Ç–µ–º–∞ "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" –∏ —à—Ç—Ä–∞—Ñ–æ–≤
      oneCardDeclarations: {},
      oneCardTimers: {},
      playersWithOneCard: [],
      pendingPenalty: null,
      
      // UI –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —à—Ç—Ä–∞—Ñ–∞
      showPenaltyCardSelection: false,
      penaltyCardSelectionPlayerId: null,
      
      // –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      eliminationOrder: [],
      isRankedGame: false,
      showVictoryModal: false,
      victoryData: null,
      
      // üéâ –ú–û–î–ê–õ–ö–ò –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô –ò –ü–†–û–ò–ì–†–ê–í–®–ï–ì–û
      showWinnerModal: false,
      winnerModalData: null,
      showLoserModal: false,
      loserModalData: null,
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ 2-–π —Å—Ç–∞–¥–∏–∏ (–¥—É—Ä–∞–∫)
      tableStack: [],
      selectedHandCard: null,
      stage2TurnPhase: 'selecting_card',
      roundInProgress: false,
      currentRoundInitiator: null,
      roundFinisher: null,
      finisherPassed: false,
      lastCardTaker: null,
      
      // –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      multiplayerData: null,
      
      // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
      turnPhase: 'analyzing_hand',
      revealedDeckCard: null,
      canPlaceOnSelfByRules: false,
      skipHandAnalysis: false,
      
      stats: {
        gamesPlayed: 0,
        gamesWon: 0,
        totalScore: 0,
        bestScore: 0,
        cardsCollected: 0,
        achievements: []
      },
      
      settings: {
        soundEnabled: true,
        animationsEnabled: true,
        hapticEnabled: true,
        autoPlay: false,
        difficulty: 'medium'
      },
      
      // –ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ (0 –º–æ–Ω–µ—Ç - –±—É–¥—É—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –∏–≥—Ä–µ)
      gameCoins: 0,
      
      selectedCard: null,
      showCardDetails: false,
      isLoading: false,
      notification: null,
      
      // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      startGame: async (mode, playersCount = 2, multiplayerConfig = null, userInfo = undefined) => {
        try {
        const standardDeck = [
          // –î–≤–æ–π–∫–∏ (2)
          '2_of_clubs.png','2_of_diamonds.png','2_of_hearts.png','2_of_spades.png',
          // –¢—Ä–æ–π–∫–∏ (3) 
          '3_of_clubs.png','3_of_diamonds.png','3_of_hearts.png','3_of_spades.png',
          // –ß–µ—Ç–≤–µ—Ä–∫–∏ (4)
          '4_of_clubs.png','4_of_diamonds.png','4_of_hearts.png','4_of_spades.png',
          // –ü—è—Ç–µ—Ä–∫–∏ (5)
          '5_of_clubs.png','5_of_diamonds.png','5_of_hearts.png','5_of_spades.png',
          // –®–µ—Å—Ç–µ—Ä–∫–∏ (6)
          '6_of_clubs.png','6_of_diamonds.png','6_of_hearts.png','6_of_spades.png',
          // –°–µ–º–µ—Ä–∫–∏ (7)
          '7_of_clubs.png','7_of_diamonds.png','7_of_hearts.png','7_of_spades.png',
          // –í–æ—Å—å–º–µ—Ä–∫–∏ (8)
          '8_of_clubs.png','8_of_diamonds.png','8_of_hearts.png','8_of_spades.png',
          // –î–µ–≤—è—Ç–∫–∏ (9)
          '9_of_clubs.png','9_of_diamonds.png','9_of_hearts.png','9_of_spades.png',
          // –î–µ—Å—è—Ç–∫–∏ (10)
          '10_of_clubs.png','10_of_diamonds.png','10_of_hearts.png','10_of_spades.png',
          // –í–∞–ª–µ—Ç—ã (11)
          'jack_of_clubs.png','jack_of_diamonds.png','jack_of_hearts.png','jack_of_spades.png',
          // –î–∞–º—ã (12)
          'queen_of_clubs.png','queen_of_diamonds.png','queen_of_hearts.png','queen_of_spades.png',
          // –ö–æ—Ä–æ–ª–∏ (13)
          'king_of_clubs.png','king_of_diamonds.png','king_of_hearts.png','king_of_spades.png',
          // –¢—É–∑—ã (14)
          'ace_of_clubs.png','ace_of_diamonds.png','ace_of_hearts.png','ace_of_spades.png'
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å —Ä–æ–≤–Ω–æ 52 –∫–∞—Ä—Ç—ã
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        const shuffledImages = [...standardDeck].sort(() => Math.random() - 0.5);
        
        const players: Player[] = []
        const cardsPerPlayer = 3;
        
        // –ó–ê–ì–†–£–ñ–ê–ï–ú –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ë–î
        let userAvatar = '';
        let userName = '–ò–≥—Ä–æ–∫';
        
        try {
          const response = await fetch('/api/auth', { credentials: 'include' });
          if (response.ok) {
            const result = await response.json();
            if (result.success && result.user) {
              userAvatar = result.user.avatar_url || result.user.avatar || '';
              userName = result.user.username || '–ò–≥—Ä–æ–∫';
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–∞:', error);
        }
        
        const playerInfos = createPlayers(playersCount, 0, userAvatar, userName);
        
        for (let i = 0; i < playersCount; i++) {
          const playerInfo = playerInfos[i];
          
          if (!playerInfo) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${i + 1}`);
          }
          
          const playerOpenCards: Card[] = []; // –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã (–¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏)
          const playerPenki: Card[] = []; // –ü–µ–Ω—å–∫–∏ (2 –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è 3-–π —Å—Ç–∞–¥–∏–∏!)
          
          // –†–∞–∑–¥–∞–µ–º 3 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
          for (let j = 0; j < cardsPerPlayer; j++) {
            const cardIndex = i * cardsPerPlayer + j;
            const imageName = shuffledImages[cardIndex];
            
            const card: Card = {
              id: `card_${i}_${j}`,
              type: 'normal',
              title: `–ö–∞—Ä—Ç–∞ ${j + 1}`,
              description: '',
              image: imageName,
              rarity: 'common',
              rank: get().getCardRank(imageName),
              open: false, // –ü–æ–∫–∞ –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã
            };
            
            if (j < 2) {
              // –ü–µ—Ä–≤—ã–µ 2 –∫–∞—Ä—Ç—ã = –ü–ï–ù–¨–ö–ò (–∑–∞–∫—Ä—ã—Ç—ã–µ, –¥–ª—è 3-–π —Å—Ç–∞–¥–∏–∏!)
              playerPenki.push(card);
            } else {
              // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ = –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏
              card.open = true;
              playerOpenCards.push(card);
            }
          }
          
          const newPlayer: Player = {
            id: `player_${i + 1}`,
            name: playerInfo.name,
            avatar: playerInfo.avatar,
            score: 0,
            cards: playerOpenCards, // 1 –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏
            penki: playerPenki, // 2 –ø–µ–Ω—å–∫–∏ (–¥–ª—è 3-–π —Å—Ç–∞–¥–∏–∏!)
            playerStage: 1 as 1, // –í—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å 1-–π —Å—Ç–∞–¥–∏–∏
            isCurrentPlayer: i === 0,
            isUser: !playerInfo.isBot,
            isBot: playerInfo.isBot,
            difficulty: playerInfo.difficulty
          };
          
          console.log(`üé¥ [startGame] –°–æ–∑–¥–∞–Ω ${newPlayer.isBot ? '–±–æ—Ç' : '–∏–≥—Ä–æ–∫'} ${newPlayer.name}: ${newPlayer.cards.length} –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ, ${newPlayer.penki.length} –ø–µ–Ω—å–∫–æ–≤`);
          
          players.push(newPlayer);
        }
        
        // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ
        const remainingCards: Card[] = shuffledImages.slice(playersCount * cardsPerPlayer).map((imageName, index) => ({
          id: `deck_card_${index}`,
          type: 'normal',
          title: `–ö–∞—Ä—Ç–∞ –∫–æ–ª–æ–¥—ã`,
          description: '',
          image: imageName,
          rarity: 'common',
          rank: get().getCardRank(imageName),
          open: false,
        }));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ —Å—Ç–∞—Ä—à–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–µ
        let firstPlayerIndex = 0;
        let maxRank = 0;
        players.forEach((player, index) => {
          const topCard = player.cards[player.cards.length - 1];
          if (topCard && topCard.rank && topCard.rank > maxRank) {
            maxRank = topCard.rank;
            firstPlayerIndex = index;
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        players.forEach((player, index) => {
          player.isCurrentPlayer = index === firstPlayerIndex;
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        get().resetTurnState();
        
        set({
          isGameActive: true,
          gameMode: mode,
          players,
          currentPlayerId: players[firstPlayerIndex].id,
          deck: remainingCards,
          playedCards: [],
          lastPlayedCard: null,
          gameStage: 1,
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
          lastDrawnCard: null,
          lastPlayerToDrawCard: null,
          trumpSuit: null,
          drawnHistory: [],
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –¥–∞–Ω–Ω—ã–µ
          multiplayerData: mode === 'multiplayer' && multiplayerConfig ? {
            roomId: multiplayerConfig.roomId,
            roomCode: multiplayerConfig.roomCode,
            isHost: multiplayerConfig.isHost,
            connectedPlayers: multiplayerConfig.players?.map((p: any) => p.id) || []
          } : null
        });
        
        get().showNotification(`–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –•–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º: ${players[firstPlayerIndex].name}`, 'success');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        setTimeout(() => {
          get().processPlayerTurn(players[firstPlayerIndex].id);
        }, 500);
        
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã:', error);
          console.error('Stack trace:', (error as Error).stack);
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          set({
            isGameActive: false,
            isLoading: false
          });
          
          // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
          throw error;
        }
      },
      
      endGame: () => {
        // –£–°–¢–ê–†–ï–õ–û: –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ checkVictoryCondition
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        console.log('üéÆ [endGame] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã');
        
        set({
          isGameActive: false
        });
        
        get().showNotification('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'info', 3000);
      },
      
      playCard: (cardId) => {
        const { players, currentPlayerId, playedCards } = get()
        const currentPlayer = players.find(p => p.id === currentPlayerId)
        
        if (!currentPlayer) return
        
        const cardIndex = currentPlayer.cards.findIndex(c => c.id === cardId)
        if (cardIndex === -1) return
        
        const playedCard = currentPlayer.cards[cardIndex]
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
        currentPlayer.cards.splice(cardIndex, 1)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ
        const newPlayedCards = [...playedCards, playedCard]
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞
        let scoreBonus = 10
        if (playedCard.rarity === 'rare') scoreBonus = 20
        if (playedCard.rarity === 'epic') scoreBonus = 50
        if (playedCard.rarity === 'legendary') scoreBonus = 100
        
        currentPlayer.score += scoreBonus
        
        set({
          players: [...players],
          playedCards: newPlayedCards,
          lastPlayedCard: playedCard
        })
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç—ã
        if (playedCard.effect === 'pidr_power') {
          get().showNotification('P.I.D.R. –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!', 'success')
          currentPlayer.score += 50 // –ë–æ–Ω—É—Å –∑–∞ P.I.D.R.
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É (–£–°–ö–û–†–ï–ù–û –í 1.5 –†–ê–ó–ê)
        setTimeout(() => get().nextTurn(), 670)
      },
      
      drawCard: () => {
        const { players, currentPlayerId, deck } = get()
        const currentPlayer = players.find(p => p.id === currentPlayerId)
        
        if (!currentPlayer || deck.length === 0) return // –ù–µ–ª—å–∑—è –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ –ø—É—Å—Ç–æ–π –∫–æ–ª–æ–¥—ã
        
        const drawnCard = deck[0]
        currentPlayer.cards.push(drawnCard)
        
        const newDeck = deck.slice(1);
        set({
          players: [...players],
          deck: newDeck
        })
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –æ–ø—É—Å—Ç–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –≤ 1-–π —Å—Ç–∞–¥–∏–∏)
        const { gameStage } = get();
        if (gameStage === 1 && newDeck.length === 0) {
          console.log(`üÉè [drawCard] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
          setTimeout(() => {
            get().checkStage1End();
          }, 1500);
        }
        
        get().showNotification('–ö–∞—Ä—Ç–∞ –≤–∑—è—Ç–∞!', 'info')
      },
      
      nextTurn: () => {
        try {
          const { players, currentPlayerId, gameStage } = get()
          
          if (!players || players.length === 0) {
            console.error(`üîÑ [nextTurn] ‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞`);
            return;
          }
          
          if (!currentPlayerId) {
            console.error(`üîÑ [nextTurn] ‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞`);
            return;
          }
          
          const currentPlayer = players.find(p => p.id === currentPlayerId);
          const currentPlayerName = currentPlayer?.name || currentPlayerId;
          // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π –ª–æ–≥ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏)
          // console.log(`üîÑ [nextTurn] –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞ –æ—Ç ${currentPlayerName}`);
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ê–ö–¢–ò–í–ù–û–ì–û –∏–≥—Ä–æ–∫–∞ (—Å –∫–∞—Ä—Ç–∞–º–∏ –∏–ª–∏ –ø–µ–Ω—å–∫–∞–º–∏) –ü–û –ß–ê–°–û–í–û–ô –°–¢–†–ï–õ–ö–ï
          const activePlayers = players.filter(p => 
            (p.cards.length > 0 || p.penki.length > 0) && !p.isWinner
          ); // –¢–û–õ–¨–ö–û –ò–ì–†–û–ö–ò –° –ö–ê–†–¢–ê–ú–ò/–ü–ï–ù–¨–ö–ê–ú–ò –ò –ù–ï –ü–û–ë–ï–î–ò–¢–ï–õ–ò
          
          if (activePlayers.length <= 1) {
            console.log(`üîÑ [nextTurn] ‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${activePlayers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É`);
            get().checkVictoryCondition();
            return;
          }
          
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
          let currentIndex = activePlayers.findIndex(p => p.id === currentPlayerId);
          
          if (currentIndex === -1) {
            // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            console.log(`üèÜ [nextTurn] ${currentPlayerName} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–≥—Ä–æ–∫—É`);
            currentIndex = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
          }
          
          const nextIndex = (currentIndex + 1) % activePlayers.length
          const nextPlayerId = activePlayers[nextIndex].id
          const nextPlayer = activePlayers[nextIndex]
          
          if (!nextPlayer) {
            console.error(`üîÑ [nextTurn] ‚ùå –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
          }
          
          // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π –ª–æ–≥ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏)
          // console.log(`üîÑ [nextTurn] –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ ${nextPlayer.name} (–∏–Ω–¥–µ–∫—Å ${nextIndex}/${activePlayers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö) - –ü–û –ß–ê–°–û–í–û–ô`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
          players.forEach(p => p.isCurrentPlayer = p.id === nextPlayerId)
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏
        if (gameStage === 1) {
          get().resetTurnState();
        }
        
        set({
          players: [...players],
          currentPlayerId: nextPlayerId
        })
        
        get().showNotification(`–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ ${nextPlayer.name}`, 'info')
        
        // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π –ª–æ–≥ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏)
        // console.log(`üîÑ [nextTurn] –ó–∞–ø—É—Å–∫–∞–µ–º processPlayerTurn –¥–ª—è ${nextPlayer.name}`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–µ–Ω—å–∫–æ–≤ –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Ö–æ–¥–∞
        if (gameStage === 2) {
          players.forEach(player => {
            get().checkStage3Transition(player.id);
          });
        }
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
        get().checkVictoryCondition();
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ —Ö–æ–¥–∞
        get().checkOneCardStatus();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ö–æ–¥–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏ (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê, –∑–∞—Ç–µ–º –≤ 1.5)
        if (gameStage === 1) {
          setTimeout(() => get().processPlayerTurn(nextPlayerId), 330)
        } else if (gameStage === 2 || gameStage === 3) {
          // –î–ª—è 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã (–ø—Ä–∞–≤–∏–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
          set({ stage2TurnPhase: 'selecting_card' });
          setTimeout(() => get().processPlayerTurn(nextPlayerId), 330)
        }
        
        // –£–î–ê–õ–ï–ù–û: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –ø–æ maxRounds
        // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∫–∞—Ä—Ç (checkVictoryCondition)
        } catch (error) {
          console.error(`üîÑ [nextTurn] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ö–æ–¥–∞:`, error);
          get().showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ö–æ–¥–∞', 'error', 3000);
        }
      },
      
      resetGame: () => {
        set({
          isGameActive: false,
          players: [],
          currentPlayerId: null,
          deck: [...DEFAULT_CARDS],
          playedCards: [],
          lastPlayedCard: null,
          selectedCard: null,
          penaltyDeck: []
        })
      },
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∏–≥—Ä–æ–∫–∞
      updatePlayerRewards: async (experience: number, coins: number, ratingChange?: number) => {
        try {
          const response = await fetch('/api/user/rewards', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ 
              experience, 
              coins, 
              ratingChange: ratingChange || 0 
            })
          });
          
          if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', response.status);
          } else {
            const result = await response.json();
            console.log('‚úÖ –ù–∞–≥—Ä–∞–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', result.rewards);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ API –Ω–∞–≥—Ä–∞–¥:', error);
        }
      },
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏
      selectCard: (card) => set({ selectedCard: card }),
      
      addCardToDeck: (card) => {
        const { deck } = get()
        set({ deck: [...deck, card] })
      },
      
      removeCardFromDeck: (cardId) => {
        const { deck } = get()
        set({ deck: deck.filter(c => c.id !== cardId) })
      },
      
      // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –®–¢–†–ê–§–ù–û–ô –°–¢–û–ü–ö–ò
      addCardToPenaltyDeck: (card) => {
        const { penaltyDeck } = get();
        console.log(`‚ö†Ô∏è [addCardToPenaltyDeck] –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É ${card.image} –≤ —à—Ç—Ä–∞—Ñ–Ω—É—é —Å—Ç–æ–ø–∫—É`);
        set({ penaltyDeck: [...penaltyDeck, card] });
      },
      
      distributePenaltyCards: (targetPlayerId) => {
        const { penaltyDeck, players, gameStage } = get();
        if (penaltyDeck.length === 0) {
          console.log(`‚ö†Ô∏è [distributePenaltyCards] –®—Ç—Ä–∞—Ñ–Ω–∞—è —Å—Ç–æ–ø–∫–∞ –ø—É—Å—Ç–∞!`);
          return;
        }
        
        const targetPlayer = players.find(p => p.id === targetPlayerId);
        if (!targetPlayer) {
          console.log(`‚ùå [distributePenaltyCards] –ò–≥—Ä–æ–∫ ${targetPlayerId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
          return;
        }
        
        console.log(`‚ö†Ô∏è [distributePenaltyCards] –†–∞–∑–¥–∞–µ–º ${penaltyDeck.length} —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`);
        console.log(`üìä [distributePenaltyCards] –î–æ —à—Ç—Ä–∞—Ñ–∞: ${targetPlayer.name} –∏–º–µ–µ—Ç ${targetPlayer.cards.length} –∫–∞—Ä—Ç`);
        
        const newPlayers = players.map(player => {
          if (player.id === targetPlayerId) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —à—Ç—Ä–∞—Ñ–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫—É
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –í–°–ï –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã (open: true) –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã!
            // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –≤ UI
            const penaltyCardsForPlayer = penaltyDeck.map(card => ({ 
              ...card, 
              open: true // ‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏!
            }));
            const newCards = [...player.cards, ...penaltyCardsForPlayer];
            console.log(`üìä [distributePenaltyCards] –ü–æ—Å–ª–µ —à—Ç—Ä–∞—Ñ–∞: ${player.name} –±—É–¥–µ—Ç –∏–º–µ—Ç—å ${newCards.length} –∫–∞—Ä—Ç`);
            console.log(`üÉè [distributePenaltyCards] –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:`, penaltyCardsForPlayer.map(c => c.image));
            return { ...player, cards: newCards };
          }
          return player;
        });
        
        // –û—á–∏—â–∞–µ–º —à—Ç—Ä–∞—Ñ–Ω—É—é —Å—Ç–æ–ø–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        set({ 
          penaltyDeck: [],
          players: newPlayers,
          pendingPenalty: null // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º pendingPenalty —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É
        });
        
        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏—Å—å
        setTimeout(() => {
          const updatedPlayer = get().players.find(p => p.id === targetPlayerId);
          if (updatedPlayer) {
            console.log(`‚úÖ [distributePenaltyCards] –ü–†–û–í–ï–†–ö–ê: ${updatedPlayer.name} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç ${updatedPlayer.cards.length} –∫–∞—Ä—Ç`);
            console.log(`‚úÖ [distributePenaltyCards] –ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ:`, updatedPlayer.cards.map(c => c.image));
          }
        }, 100);
        
        get().showNotification(
          `‚ö†Ô∏è ${targetPlayer.name} –ø–æ–ª—É—á–∏–ª ${penaltyDeck.length} —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –∫–∞—Ä—Ç!`, 
          'warning', 
          3000
        );
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏ —à—Ç—Ä–∞—Ñ–∞!
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç
        const currentPlayerId = get().currentPlayerId;
        if (currentPlayerId && gameStage === 2) {
          console.log(`‚ö†Ô∏è [distributePenaltyCards] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ ${currentPlayerId}`);
          setTimeout(() => {
            get().processPlayerTurn(currentPlayerId);
          }, 1000);
        }
        
        // ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏ —à—Ç—Ä–∞—Ñ–∞
        setTimeout(() => {
          get().checkOneCardStatus();
        }, 1500);
      },
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏
      addPlayer: (name) => {
        const { players } = get()
        const newPlayer: Player = {
          id: `player_${Date.now()}`,
          name,
          score: 0,
          cards: [],
          penki: [],
          playerStage: 1,
          isCurrentPlayer: false
        }
        set({ players: [...players, newPlayer] })
      },
      
      removePlayer: (playerId) => {
        const { players } = get()
        set({ players: players.filter(p => p.id !== playerId) })
      },
      
      updatePlayerScore: (playerId, score) => {
        const { players } = get()
        const player = players.find(p => p.id === playerId)
        if (player) {
          player.score = score
          set({ players: [...players] })
        }
      },
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
      updateSettings: (newSettings) => {
        const { settings } = get()
        set({ settings: { ...settings, ...newSettings } })
      },
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      updateStats: (newStats) => {
        const { stats } = get()
        set({ stats: { ...stats, ...newStats } })
      },
      
      addAchievement: (achievementId) => {
        const { stats } = get()
        if (!stats.achievements.includes(achievementId)) {
          set({
            stats: {
              ...stats,
              achievements: [...stats.achievements, achievementId]
            }
          })
          get().showNotification('–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!', 'success')
        }
      },
      
      // –ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
      addCoins: (amount) => {
        const { gameCoins } = get()
        const newAmount = gameCoins + amount
        set({ gameCoins: newAmount })
        get().showNotification(`+${amount} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: ${newAmount}`, 'success', 2000)
      },
      
      spendCoins: (amount) => {
        const { gameCoins } = get()
        if (gameCoins >= amount) {
          const newAmount = gameCoins - amount
          set({ gameCoins: newAmount })
          get().showNotification(`-${amount} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: ${newAmount}`, 'info', 2000)
          return true
        } else {
          get().showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: ${amount}, —É –≤–∞—Å: ${gameCoins}`, 'error', 3000)
          return false
        }
      },
      
      // UI
      showNotification: (message, type, duration = 3000) => {
        set({
          notification: {
            message,
            type,
            visible: true
          }
        })
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫—É–Ω–¥—ã)
        setTimeout(() => get().hideNotification(), duration)
      },
      
      hideNotification: () => {
        set({ notification: null })
      },
      
      setLoading: (loading) => set({ isLoading: loading }),
      
      // ===== –ú–ï–¢–û–î–´ –î–õ–Ø P.I.D.R –ò–ì–†–´ =====
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –∫–∞—Ä—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      getCardRank: (imageName: string) => {
        const name = imageName.replace('.png', '').replace('/img/cards/', '');
        let rank = 0;
        if (name.startsWith('ace')) rank = 14;
        else if (name.startsWith('king')) rank = 13;
        else if (name.startsWith('queen')) rank = 12;
        else if (name.startsWith('jack')) rank = 11;
        else {
          const match = name.match(/(\d+)_of/);
          rank = match ? parseInt(match[1], 10) : 0;
        }
        return rank;
      },
      
      // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞
      findAvailableTargets: (currentPlayerId: string) => {
        const { players, gameStage } = get();
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer || currentPlayer.cards.length === 0) return [];
        
        // –ë–µ—Ä–µ–º –≤–µ—Ä—Ö–Ω—é—é –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
        const topCard = currentPlayer.cards[currentPlayer.cards.length - 1];
        if (!topCard || !topCard.open) return [];
        
        const currentRank = get().getCardRank(topCard.image || '');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª P.I.D.R. 1-–π —Å—Ç–∞–¥–∏–∏
        // –ü–†–ê–í–ò–õ–û: –°–¢–ê–†–®–ê–Ø –∫–∞—Ä—Ç–∞ –±—å–µ—Ç –ú–õ–ê–î–®–£–Æ (–∏—â–µ–º –∫–∞—Ä—Ç—É –Ω–∞ 1 —Ä–∞–Ω–≥ –ù–ò–ñ–ï)
        // –¢—É–∑(14) ‚Üí –ö–æ—Ä–æ–ª—å(13), –ö–æ—Ä–æ–ª—å(13) ‚Üí –î–∞–º–∞(12), –î–∞–º–∞(12) ‚Üí –í–∞–ª–µ—Ç(11), ..., 3 ‚Üí 2
        // –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –î–≤–æ–π–∫–∞ (2) –∫–ª–∞–¥–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –¢—É–∑ (14)!
        
        const targets: number[] = [];
        players.forEach((player, index) => {
          if (player.id === currentPlayerId) return;
          
          const playerTopCard = player.cards[player.cards.length - 1];
          if (playerTopCard && playerTopCard.open) {
            const playerRank = get().getCardRank(playerTopCard.image || '');
            
            // –î–í–û–ô–ö–ê (2) –∫–ª–∞–¥–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –¢–£–ó (14)!
            if (currentRank === 2 && playerRank === 14) {
              targets.push(index);
            }
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ –±—å–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ 1 —Ä–∞–Ω–≥ –Ω–∏–∂–µ
            else if (currentRank !== 2 && playerRank === currentRank - 1) {
              targets.push(index);
            }
          }
        });
        
        return targets;
      },
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
      canMakeMove: (currentPlayerId: string) => {
        const targets = get().findAvailableTargets(currentPlayerId);
        return targets.length > 0;
      },
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      makeMove: (targetPlayerId: string) => {
        const { players, currentPlayerId, revealedDeckCard, turnPhase, deck } = get();
        if (!currentPlayerId) return;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ö–æ–¥–∞
        if (targetPlayerId === 'initiate_move') {
          // –ò–≥—Ä–æ–∫ –∫–ª–∏–∫–Ω—É–ª –ø–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
          const targets = get().findAvailableTargets(currentPlayerId);
          set({ 
            turnPhase: 'waiting_target_selection',
            availableTargets: targets
          });
          if (!players.find(p => p.id === currentPlayerId)?.isBot) {
            get().showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ö–æ–¥–∞', 'info');
          }
          return;
        }
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        const targetPlayer = players.find(p => p.id === targetPlayerId);
        
        if (!currentPlayer || !targetPlayer) return;
        
        let cardToMove: Card | undefined;
        let newDeck = deck;
        let shouldCheckStage1End = false;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º
        if (revealedDeckCard && (turnPhase === 'waiting_target_selection' || turnPhase === 'waiting_deck_action')) {
          // –•–æ–¥–∏–º –∫–∞—Ä—Ç–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã
          cardToMove = revealedDeckCard;
          
          // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
          newDeck = deck.slice(1);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
          if (newDeck.length === 0) {
            console.log(`üÉè [makeMove] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
            shouldCheckStage1End = true;
          }
        } else {
          // –•–æ–¥–∏–º –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–æ–π –∏–∑ —Ä—É–∫–∏
          if (currentPlayer.cards.length === 0) return;
          
          // –ë–µ—Ä—ë–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É (–ø–æ—Å–ª–µ–¥–Ω—é—é –≤ –º–∞—Å—Å–∏–≤–µ)
          cardToMove = currentPlayer.cards[currentPlayer.cards.length - 1];
        }
        
        if (!cardToMove) return;
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É —Ü–µ–ª–∏ –î–û —Ö–æ–¥–∞
        const targetTopCard = targetPlayer.cards[targetPlayer.cards.length - 1];
        
        // –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú —á—Ç–æ –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ 1-–π —Å—Ç–∞–¥–∏–∏!
        cardToMove.open = true;
        
        // –°–û–ó–î–ê–Å–ú –ù–û–í–´–ô –ú–ê–°–°–ò–í –ò–ì–†–û–ö–û–í —Å IMMUTABLE –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
        const newPlayers = players.map(p => {
          if (p.id === currentPlayerId && !revealedDeckCard) {
            // –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É —É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ —Ö–æ–¥–∏–º –∏–∑ —Ä—É–∫–∏)
            return {
              ...p,
              cards: p.cards.slice(0, -1) // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É
            };
          } else if (p.id === targetPlayerId) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Ü–µ–ª–µ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
            return {
              ...p,
              cards: [...p.cards, cardToMove!] // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É!
            };
          }
          return p;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º state –û–î–ò–ù —Ä–∞–∑ —Å–æ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏!
        set({ 
          players: newPlayers,
          deck: newDeck,
          revealedDeckCard: revealedDeckCard ? null : revealedDeckCard,
          lastDrawnCard: revealedDeckCard ? cardToMove : null,
          lastPlayerToDrawCard: revealedDeckCard ? currentPlayerId : null,
          turnPhase: revealedDeckCard ? 'turn_ended' : turnPhase,
          skipHandAnalysis: false // –ü–æ—Å–ª–µ —Ö–æ–¥–∞ –Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –í–°–ï–ì–î–ê –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è state
        if (shouldCheckStage1End) {
          setTimeout(() => {
            get().checkStage1End();
          }, 1000);
        }
        
        // –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –õ–û–ì –•–û–î–ê
        if (targetTopCard && targetTopCard.image) {
          console.log(`üé¥ ${currentPlayer.name} –ø–æ–ª–æ–∂–∏–ª ${cardToMove.image} –Ω–∞ ${targetTopCard.image} (${targetPlayer.name})`);
        } else {
          console.log(`üé¥ ${currentPlayer.name} –ø–æ–ª–æ–∂–∏–ª ${cardToMove.image} –Ω–∞ ${targetPlayer.name}`);
        }
        
        get().showNotification(`–ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–ª–æ–∂–µ–Ω–∞ –Ω–∞ ${targetPlayer.name}!`, 'success');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫ –ü–†–û–î–û–õ–ñ–ê–ï–¢ —Ö–æ–¥–∏—Ç—å (–∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏)
        // –•–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ —Ö–æ–¥–∏—Ç—å
        get().resetTurnState();
        
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ —Ö–æ–¥–∞
         get().checkVictoryCondition();
         
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –ø–æ—Å–ª–µ —Ö–æ–¥–∞
         get().checkOneCardStatus();
         
         setTimeout(() => {
           get().processPlayerTurn(currentPlayerId);
         }, 500);
      },
      
      // –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
      drawCardFromDeck: () => {
        const { deck, players, currentPlayerId, gameStage } = get();
        if (deck.length === 0 || !currentPlayerId) return false; // –ù–µ–ª—å–∑—è –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ –ø—É—Å—Ç–æ–π –∫–æ–ª–æ–¥—ã
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer) return false;
        
        const drawnCard = deck[0];
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–≥ –∫ –∫–∞—Ä—Ç–µ
        drawnCard.rank = get().getCardRank(drawnCard.image || '');
        drawnCard.open = true;
        
        // –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç (–≤ —Å—Ç–æ–ø–∫—É)
        currentPlayer.cards.push(drawnCard);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const newDeck = deck.slice(1);
        set({ 
          deck: newDeck,
          players: [...players],
          lastDrawnCard: drawnCard,
          lastPlayerToDrawCard: currentPlayerId
        });
        // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        // set({ drawnHistory: [...get().drawnHistory, drawnCard] }); // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ revealDeckCard
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –µ—Å–ª–∏ –º—ã –≤ 1-–π —Å—Ç–∞–¥–∏–∏ –∏ –∫–æ–ª–æ–¥–∞ –æ–ø—É—Å—Ç–µ–ª–∞ (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê)
        if (gameStage === 1 && newDeck.length === 0) {
          console.log(`üÉè [drawCardFromDeck] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
          setTimeout(() => {
            get().checkStage1End();
          }, 750);
        }
        
        get().showNotification(`${currentPlayer.name} –≤–∑—è–ª –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã (–æ—Å—Ç–∞–ª–æ—Å—å: ${newDeck.length})`, 'info');
        return true;
      },
      
      // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ–±—è
      placeCardOnSelf: () => {
        const { players, currentPlayerId } = get();
        if (!currentPlayerId) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer || currentPlayer.cards.length === 0) return;
        
        // –ö–∞—Ä—Ç–∞ —É–∂–µ –ª–µ–∂–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥
        set({ 
          canPlaceOnSelf: false,
          mustDrawFromDeck: false,
          availableTargets: [] // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        });
        
        get().showNotification(`${currentPlayer.name} –æ—Å—Ç–∞–≤–∏–ª –∫–∞—Ä—Ç—É —É —Å–µ–±—è –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥`, 'warning');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π —Ö–æ–¥–∞
        get().checkStage1End();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê, –∑–∞—Ç–µ–º –≤ 1.5)
        setTimeout(() => get().nextTurn(), 330);
      },
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è 1-–π —Å—Ç–∞–¥–∏–∏
      checkStage1End: () => {
        const { deck, gameStage, lastPlayerToDrawCard, players } = get();
        if (gameStage !== 1 || deck.length > 0) return;
        
        console.log(`üéØ [checkStage1End] ‚úÖ 1-—è —Å—Ç–∞–¥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥ –≤–æ 2-—é —Å—Ç–∞–¥–∏—é...`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const trumpSuit = get().determineTrumpSuit();

        console.log(`üéØ [checkStage1End] –ö–æ–∑—ã—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${trumpSuit || '–ù–ï–¢'}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∑—è–≤—à–∏–π –∫–∞—Ä—Ç—É)
        const startingPlayerId = lastPlayerToDrawCard || players[0].id;

        console.log(`üéØ [checkStage1End] –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫: ${players.find(p => p.id === startingPlayerId)?.name}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ—Ö –≤–æ 2-—é —Å—Ç–∞–¥–∏—é
        players.forEach(p => {
          p.isCurrentPlayer = p.id === startingPlayerId;
          p.playerStage = 2; // –í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –≤–æ 2-—é —Å—Ç–∞–¥–∏—é
          
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ–Ω—å–∫–∏ –û–°–¢–ê–Æ–¢–°–Ø –≤ penki[] –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤–æ 2-—é —Å—Ç–∞–¥–∏—é!
          // –û–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ (–ø–µ—Ä–µ—Ö–æ–¥ –≤ 3-—é —Å—Ç–∞–¥–∏—é)
          console.log(`üÉè [checkStage1End] ${p.name}: ${p.cards.length} –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ, ${p.penki.length} –ø–µ–Ω—å–∫–æ–≤`);
          
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï –∫–∞—Ä—Ç—ã –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ - –û–¢–ö–†–´–¢–´–ï (open: true)!
          // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ä—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤) –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –≤ UI
          p.cards = p.cards.map(card => ({
            ...card,
            open: true // ‚úÖ –í–°–ï –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã (–¥–ª—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã)
          }));
          console.log(`‚úÖ [checkStage1End] ${p.name}: ${p.cards.length} –∫–∞—Ä—Ç (open=true), ${p.penki.length} –ø–µ–Ω—å–∫–æ–≤`)
        });
        
        set({ 
          gameStage: 2,
          availableTargets: [],
          canPlaceOnSelf: false,
          mustDrawFromDeck: false,
          trumpSuit: trumpSuit,
          currentPlayerId: startingPlayerId,
          players: [...players],
          // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º —à—Ç—Ä–∞—Ñ –∏ —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤–æ 2-—é —Å—Ç–∞–¥–∏—é
          pendingPenalty: null,
          showPenaltyCardSelection: false,
          penaltyCardSelectionPlayerId: null,
          oneCardDeclarations: {},
          oneCardTimers: {},
          playersWithOneCard: []
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        get().showNotification('üéâ –ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success', 3000);
        
        setTimeout(() => {
          const startingPlayer = players.find(p => p.id === startingPlayerId);
          get().showNotification(`üöÄ –í—Ç–æ—Ä–∞—è —Å—Ç–∞–¥–∏—è! –•–æ–¥–∏—Ç: ${startingPlayer?.name || '–ò–≥—Ä–æ–∫'}`, 'info', 3000);
          
          const trumpName = trumpSuit === 'clubs' ? '–¢—Ä–µ—Ñ—ã' : 
                          trumpSuit === 'diamonds' ? '–ë—É–±–Ω—ã' :
                          trumpSuit === 'hearts' ? '–ß–µ—Ä–≤—ã' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          
          setTimeout(() => {
            get().showNotification(`üÉè –ö–æ–∑—ã—Ä—å: ${trumpName} (–ü–∏–∫–∏ –Ω–µ –∫–æ–∑—ã—Ä—å!)`, 'warning', 3000);
          }, 1000);
        }, 500);
        
        // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú 2-–Æ –°–¢–ê–î–ò–Æ –ò –ó–ê–ü–£–°–ö–ê–ï–ú –•–û–î
        setTimeout(() => {
          get().initializeStage2();
          
          // ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–æ 2-—é —Å—Ç–∞–¥–∏—é
          setTimeout(() => {
            get().checkOneCardStatus();
            console.log('‚úÖ [checkStage1End] –ü—Ä–æ–≤–µ—Ä–∫–∞ "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–æ 2-—é —Å—Ç–∞–¥–∏—é');
          }, 200);
          
          // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ state –∏ –ó–ê–¢–ï–ú –∑–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
          setTimeout(() => {
            console.log(`üéÆ [checkStage1End] –ó–∞–ø—É—Å–∫–∞–µ–º processPlayerTurn –¥–ª—è ${players.find(p => p.id === startingPlayerId)?.name}`);
            get().processPlayerTurn(startingPlayerId);
          }, 300);
        }, 800);
      },
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ (–ù–û–í–ê–Ø –ª–æ–≥–∏–∫–∞)
      processPlayerTurn: (playerId: string) => {
        const { gameStage, players, skipHandAnalysis, deck } = get();
        const currentPlayer = players.find(p => p.id === playerId);
        if (!currentPlayer) return;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 2-—é –∏ 3-—é —Å—Ç–∞–¥–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ (–ø—Ä–∞–≤–∏–ª–∞ –¥—É—Ä–∞–∫–∞)
        if (gameStage === 2 || gameStage === 3) {
          // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π –ª–æ–≥ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏)
          // console.log(`üéÆ [processPlayerTurn] –°—Ç–∞–¥–∏—è ${gameStage}: ${currentPlayer.name} (${currentPlayer.cards.length} –∫–∞—Ä—Ç, ${currentPlayer.penki.length} –ø–µ–Ω—å–∫–æ–≤)`);
          set({ 
            currentPlayerId: currentPlayer.id,
            stage2TurnPhase: 'selecting_card'
          });
          
          if (!currentPlayer.isBot) {
            get().showNotification(`${currentPlayer.name}: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Ö–æ–¥–∞`, 'info', 5000);
          }
          // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: AI –¥–ª—è –±–æ—Ç–æ–≤ –≤ —Å—Ç–∞–¥–∏–∏ 2 —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (ViktorAI –∏ –¥—Ä.)
          return;
        }
        
        if (gameStage !== 1) return;
        
        const openCards = currentPlayer.cards.filter(c => c.open);
        
        // –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
        if (!skipHandAnalysis && currentPlayer.cards.length > 0) {
          if (get().canMakeMove(playerId)) {
            const targets = get().findAvailableTargets(playerId);

            set({ 
              availableTargets: targets,
              turnPhase: 'analyzing_hand'
            });
            
            if (currentPlayer.isBot) {
              if (targets.length > 0) {
                const targetIndex = targets[0];
                const targetPlayer = players[targetIndex];
                setTimeout(() => {
                  try {
                    get().makeMove(targetPlayer?.id || '');
                  } catch (error) {
                    console.error(`üö® –û—à–∏–±–∫–∞ —Ö–æ–¥–∞ –±–æ—Ç–∞:`, error);
                  }
                }, 800);
              } else {
                setTimeout(() => get().nextTurn(), 1000);
              }
            } else if (!currentPlayer.isBot) {
              get().showNotification(`${currentPlayer.name}: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Ö–æ–¥–∞`, 'info');
            }
            return;
          } else {
            set({ 
              availableTargets: [],
              canPlaceOnSelf: false,
              turnPhase: 'showing_deck_hint'
            });
            
            if (currentPlayer.isBot) {
              setTimeout(() => {
                get().onDeckClick();
              }, 500);
            } else if (!currentPlayer.isBot) {
              get().showNotification(`${currentPlayer.name}: –Ω–µ—Ç —Ö–æ–¥–æ–≤ –∏–∑ —Ä—É–∫–∏, –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–¥—É`, 'warning');
            }
            return;
          }
        } else if (skipHandAnalysis) {
          set({ skipHandAnalysis: false });
        }
        
        // –≠–¢–ê–ü 2: –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–æ–¥–æ–π
        if (deck.length === 0) {
          get().checkStage1End();
          return;
        }
        
        set({ turnPhase: 'showing_deck_hint' });
        
        if (currentPlayer.isBot) {
          setTimeout(() => {
            get().onDeckClick();
          }, 500);
        } else if (!currentPlayer.isBot) {
          get().showNotification(`${currentPlayer.name}: –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–¥—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É`, 'info');
        }
      },
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–ª–æ–¥–µ
      onDeckClick: () => {
        const { turnPhase, currentPlayerId, players, revealedDeckCard } = get();
        if (turnPhase !== 'showing_deck_hint' || !currentPlayerId) return;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã (–í–û–ó–í–†–ê–©–ê–ï–ú –°–¢–ê–†–£–Æ –õ–û–ì–ò–ö–£)
        if (!get().revealDeckCard()) {
          // revealDeckCard —É–∂–µ –≤—ã–∑–≤–∞–ª checkStage1End –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          return;
        }
        
        // –°—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É (–∫–∞–∫ –∏ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
        const { revealedDeckCard: newRevealedCard } = get();
        if (!newRevealedCard) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –∫–∞—Ä—Ç–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã
        const deckTargets = get().findAvailableTargetsForDeckCard(newRevealedCard);
        const canMoveToOpponents = deckTargets.length > 0;
        
        let canPlaceOnSelfByRules = false;
        if (currentPlayer.cards.length > 0) {
          const topCard = currentPlayer.cards[currentPlayer.cards.length - 1];
          canPlaceOnSelfByRules = get().canPlaceCardOnSelf(newRevealedCard, topCard);
        }
        
        // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∫–ª–∞–¥–µ–º –Ω–∞ —Å–µ–±—è –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –ò –ù–ï–¢ —Ö–æ–¥–æ–≤ –Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
        if (!canMoveToOpponents && canPlaceOnSelfByRules) {
          set({
            turnPhase: 'waiting_deck_action',
            canPlaceOnSelfByRules: true,
            availableTargets: []
          });
          setTimeout(() => {
            get().placeCardOnSelfByRules();
          }, currentPlayer.isBot ? 1200 : 800);
          return;
        }
        
        // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –±–µ—Ä–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –ù–ï–¢ –•–û–î–û–í –í–û–û–ë–©–ï
        if (!canMoveToOpponents && !canPlaceOnSelfByRules) {
          set({
            turnPhase: 'waiting_deck_action',
            canPlaceOnSelfByRules: false,
            availableTargets: []
          });
          setTimeout(() => {
            get().takeCardNotByRules();
          }, currentPlayer.isBot ? 1200 : 800);
          return;
        }
        
        set({
          turnPhase: 'waiting_deck_action',
          canPlaceOnSelfByRules: canPlaceOnSelfByRules,
          availableTargets: canMoveToOpponents ? deckTargets : []
        });
        
        // –î–ª—è –±–æ—Ç–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ–¥—ã)
        if (currentPlayer.isBot && canMoveToOpponents) {
          setTimeout(() => {
            const targetIndex = deckTargets[0];
            const targetPlayer = players[targetIndex];
            get().makeMove(targetPlayer?.id || '');
          }, 1500);
        } else if (!currentPlayer.isBot && canMoveToOpponents) {
          // –î–ª—è –∏–≥—Ä–æ–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –ö–õ–ò–ö–ù–£–¢–¨ –ø–æ –∫–∞—Ä—Ç–µ
          get().showNotification('‚úì –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–µ —á—Ç–æ–±—ã —Å—Ö–æ–¥–∏—Ç—å', 'info');
        }
      },
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–∑—ã—Ä—è –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
      // –ü–†–ê–í–ò–õ–û: –ö–æ–∑—ã—Ä—å = –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –ù–ï –ø–∏–∫–∏
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –ø–∏–∫–∞, –∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–ø–∏–∫–æ–≤—É—é –∏–∑ –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç
      determineTrumpSuit: () => {
        const { lastDrawnCard, drawnHistory } = get();
        
        console.log(`üÉè [determineTrumpSuit] –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∑—è—Ç–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏`);
        console.log(`üÉè [determineTrumpSuit] –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞: ${lastDrawnCard?.image || '–Ω–µ—Ç'}`);
        console.log(`üÉè [determineTrumpSuit] –ò—Å—Ç–æ—Ä–∏—è –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç: ${drawnHistory.length} –∫–∞—Ä—Ç`);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∑—è—Ç—É—é –∫–∞—Ä—Ç—É
        if (lastDrawnCard && lastDrawnCard.image) {
          const suit = get().getCardSuit(lastDrawnCard.image);
          console.log(`üÉè [determineTrumpSuit] –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞: ${lastDrawnCard.image} ‚Üí –º–∞—Å—Ç—å: ${suit}`);
          
          // –ö–æ–∑—ã—Ä–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è –º–∞—Å—Ç—å –ö–†–û–ú–ï –ø–∏–∫
          if (suit !== 'spades' && suit !== 'unknown') {
            console.log(`‚úÖ [determineTrumpSuit] –ù–ê–ô–î–ï–ù –ö–û–ó–´–†–¨: ${suit} (–∫–∞—Ä—Ç–∞: ${lastDrawnCard.image})`);
            return suit as 'clubs' | 'diamonds' | 'hearts' | 'spades';
          }
        }
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –ø–∏–∫–∞ –∏–ª–∏ –Ω–µ—Ç lastDrawnCard, –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
        console.log(`üÉè [determineTrumpSuit] –ò—â–µ–º –Ω–µ–ø–∏–∫–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç (${drawnHistory.length} –∫–∞—Ä—Ç)`);
        drawnHistory.forEach((card, index) => {
          if (card && card.image) {
            const cardSuit = get().getCardSuit(card.image);
            console.log(`üÉè [determineTrumpSuit] –ò—Å—Ç–æ—Ä–∏—è ${index}: ${card.image} ‚Üí –º–∞—Å—Ç—å: ${cardSuit}`);
          }
        });
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–∏–∫–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        for (let i = drawnHistory.length - 1; i >= 0; i--) {
          const card = drawnHistory[i];
          if (card && card.image) {
            const cardSuit = get().getCardSuit(card.image);
            console.log(`üÉè [determineTrumpSuit] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é ${i}: ${card.image} ‚Üí –º–∞—Å—Ç—å: ${cardSuit}`);
            if (cardSuit !== 'spades' && cardSuit !== 'unknown') {
              console.log(`‚úÖ [determineTrumpSuit] –ù–ê–ô–î–ï–ù –ö–û–ó–´–†–¨ –ò–ó –ò–°–¢–û–†–ò–ò: ${cardSuit} (–∫–∞—Ä—Ç–∞: ${card.image})`);
              return cardSuit as 'clubs' | 'diamonds' | 'hearts' | 'spades';
            }
          }
        }
        
        console.log(`‚ùå [determineTrumpSuit] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í—Å–µ –∫–∞—Ä—Ç—ã –±—ã–ª–∏ –ø–∏–∫–∞–º–∏! –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å!`);
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–∏–∫–∏ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        return null;
      },
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã
      getCardSuit: (imageName: string) => {
        const name = imageName.replace('.png', '').replace('/img/cards/', '');
        if (name.includes('clubs')) return 'clubs';
        if (name.includes('diamonds')) return 'diamonds';
        if (name.includes('hearts')) return 'hearts';
                 if (name.includes('spades')) return 'spades';
         return 'unknown';
       },
       
       // ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–õ–ì–û–†–ò–¢–ú–ê –•–û–î–ê =====
       
       // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
       revealDeckCard: () => {
         const { deck } = get();
         if (deck.length === 0) return false;
         
         const topCard = { ...deck[0] };
         topCard.rank = get().getCardRank(topCard.image || '');
         topCard.open = true; // –ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–ª—è —Ö–æ–¥–∞
         
         // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–∑—ã—Ä—è
         const { drawnHistory } = get();
         set({ 
           revealedDeckCard: topCard,
           turnPhase: 'deck_card_revealed',
           drawnHistory: [...drawnHistory, topCard] // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
         });
         
        return true;
       },
       

       
             // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
      canPlaceCardOnSelf: (deckCard: Card, playerTopCard: Card) => {
        if (!deckCard.image || !playerTopCard.image) return false;
        
        const deckRank = get().getCardRank(deckCard.image);
        const playerRank = get().getCardRank(playerTopCard.image);
        
        // –î–í–û–ô–ö–ê (2) –∫–ª–∞–¥–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –¢–£–ó (14)!
        if (deckRank === 2) {
          return playerRank === 14;
        }
        
        // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ö–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã –º–æ–∂–µ—Ç –ª–µ—á—å –Ω–∞ –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞ 1 —Ä–∞–Ω–≥ –ë–û–õ–¨–®–ï
        // –ü—Ä–∏–º–µ—Ä: 5‚ô† (deckRank=5) –º–æ–∂–µ—Ç –ª–µ—á—å –Ω–∞ 4‚ô£ (playerRank=4)
        return deckRank === (playerRank + 1);
      },
       
       // –ü–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
       placeCardOnSelfByRules: () => {
         const { players, currentPlayerId, revealedDeckCard, deck, gameStage } = get();
         if (!currentPlayerId || !revealedDeckCard) return;
         
         const currentPlayer = players.find(p => p.id === currentPlayerId);
         if (!currentPlayer) return;
         
         // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ –≤–µ—Ä—Ö —Å—Ç–æ–ø–∫–∏ –∏–≥—Ä–æ–∫–∞ (–û–¢–ö–†–´–¢–û–ô!)
         revealedDeckCard.open = true; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞
         
         // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
         currentPlayer.cards.push(revealedDeckCard);
         
                 // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const newDeck = deck.slice(1);
        set({
          players: [...players],
          deck: newDeck,
          lastDrawnCard: revealedDeckCard,
          lastPlayerToDrawCard: currentPlayerId,
          revealedDeckCard: null,
          skipHandAnalysis: true, // ‚≠ê –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏!
          turnPhase: 'analyzing_hand' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É (–Ω–æ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º)
        });
        // set({ drawnHistory: [...get().drawnHistory, revealedDeckCard] }); // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ revealDeckCard
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ–±—è
        if (newDeck.length === 0) {
          console.log(`üÉè [placeCardOnSelfByRules] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ–±—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
          setTimeout(() => {
            get().checkStage1End();
          }, 1500);
        }
         
         get().showNotification(`${currentPlayer.name} –ø–æ–ª–æ–∂–∏–ª –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º - —Ö–æ–¥–∏—Ç —Å–Ω–æ–≤–∞!`, 'success');
         
         // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç - –∏–¥–µ–º –∫ –∫–æ–ª–æ–¥–µ)
         setTimeout(() => {
           get().processPlayerTurn(currentPlayerId);
         }, 1000);
       },
       
             // –ü–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞)
      takeCardNotByRules: () => {
        const { players, currentPlayerId, revealedDeckCard, deck, gameStage } = get();
        if (!currentPlayerId || !revealedDeckCard) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer) return;
        
        // –ö–∞—Ä—Ç–∞ –ª–æ–∂–∏—Ç—Å—è –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ (—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–æ–π)
        revealedDeckCard.open = true; // –ö–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π
        
        // –ö–∞—Ä—Ç–∞ –ª–æ–∂–∏—Ç—Å—è –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ (—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–æ–π)
        currentPlayer.cards.push(revealedDeckCard);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const newDeck = deck.slice(1);
        set({
          players: [...players],
          deck: newDeck,
          lastDrawnCard: revealedDeckCard,
          lastPlayerToDrawCard: currentPlayerId,
          turnPhase: 'turn_ended'
        });
        // set({ drawnHistory: [...get().drawnHistory, revealedDeckCard] }); // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ revealDeckCard
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –ø–æ–≤–µ—Ä—Ö
        if (newDeck.length === 0) {
          console.log(`üÉè [takeCardNotByRules] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –ø–æ–≤–µ—Ä—Ö - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
          setTimeout(() => {
            get().checkStage1End();
          }, 2000);
        }
        
        get().showNotification(`${currentPlayer.name} –ø–æ–ª–æ–∂–∏–ª –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥`, 'info');
        get().resetTurnState();
        
        console.log(`üîÑ [takeCardNotByRules] –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä—É–∫—É, —Ö–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫—É - —Ö–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É!
        setTimeout(() => {
          get().nextTurn();
        }, 1500);
      },
       
                // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞
         resetTurnState: () => {
           set({
             turnPhase: 'analyzing_hand',
             revealedDeckCard: null,
             availableTargets: [],
             canPlaceOnSelf: false,
             canPlaceOnSelfByRules: false,
             skipHandAnalysis: false
           });
         },
         
         // –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–π –¥–ª—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
        findAvailableTargetsForDeckCard: (deckCard: Card) => {
          const { players, currentPlayerId } = get();
          if (!deckCard.image || !currentPlayerId) return [];
          
          const deckRank = get().getCardRank(deckCard.image);
          const targets: number[] = [];
          
          players.forEach((player, index) => {
            if (player.id === currentPlayerId) return; // –ù–µ –º–æ–∂–µ–º –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
            const playerTopCard = player.cards[player.cards.length - 1];
            if (playerTopCard && playerTopCard.open && playerTopCard.image) {
              const playerRank = get().getCardRank(playerTopCard.image);
              
              // –î–í–û–ô–ö–ê (2) –∫–ª–∞–¥–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –¢–£–ó (14)!
              if (deckRank === 2 && playerRank === 14) {
                targets.push(index);
              }
              // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ –±—å–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ 1 —Ä–∞–Ω–≥ –Ω–∏–∂–µ
              else if (deckRank !== 2 && playerRank === deckRank - 1) {
                targets.push(index);
              }
            }
          });
          
          return targets;
        },
         
         // ===== –ú–ï–¢–û–î–´ –î–õ–Ø 2-–ô –°–¢–ê–î–ò–ò =====
         
         // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2-–π —Å—Ç–∞–¥–∏–∏
         initializeStage2: () => {
           set({
             stage2TurnPhase: 'selecting_card',
             roundInProgress: false,
             currentRoundInitiator: null,
             roundFinisher: null,
             tableStack: [],
             selectedHandCard: null
           });
         },

         // –í—ã—á–∏—Å–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—Ä—É–≥ –±–∏—Ç—å—è (–ø–æ–∑–∏—Ü–∏—è -1 –æ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞)
         calculateRoundFinisher: (initiatorId: string): string | null => {
           const { players } = get();
           const initiatorIndex = players.findIndex(p => p.id === initiatorId);
           if (initiatorIndex === -1) return null;

           // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π —Å–∏–¥–∏—Ç –ü–ï–†–ï–î –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º (–ø–æ–∑–∏—Ü–∏—è -1)
           const finisherIndex = initiatorIndex === 0 ? players.length - 1 : initiatorIndex - 1;
           const finisher = players[finisherIndex];
           
           console.log(`üéØ [calculateRoundFinisher] –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${players[initiatorIndex].name} (–∏–Ω–¥–µ–∫—Å ${initiatorIndex})`);
           console.log(`üéØ [calculateRoundFinisher] –î–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å: ${finisher.name} (–∏–Ω–¥–µ–∫—Å ${finisherIndex})`);
           
           return finisher.id;
         },
         
                 // –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫)
        selectHandCard: (card: Card) => {
          const { selectedHandCard, currentPlayerId, players, gameStage } = get();
          
          // –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –∏–≥—Ä–æ–∫—É
          const currentPlayer = players.find(p => p.id === currentPlayerId);
          if (!currentPlayer) {
            console.warn(`üö´ [selectHandCard] –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
          }
          
          const cardBelongsToCurrentPlayer = currentPlayer.cards.some(c => c.id === card.id);
          if (!cardBelongsToCurrentPlayer) {
            console.warn(`üö´ [selectHandCard] –ö–∞—Ä—Ç–∞ ${card.id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –∏–≥—Ä–æ–∫—É ${currentPlayer.name}`);
            return;
          }
          
          // –†–∞–∑—Ä–µ—à–∞–µ–º –±–æ—Ç–∞–º –∏–≥—Ä–∞—Ç—å –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ —á–µ—Ä–µ–∑ AI –ª–æ–≥–∏–∫—É
          if (gameStage === 2 && currentPlayer.isBot) {
            console.log(`ü§ñ [selectHandCard] –ë–æ—Ç ${currentPlayer.name} –∏–≥—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏: ${card.image}`);
          }
          
          console.log(`‚úÖ [selectHandCard] –ò–≥—Ä–æ–∫ ${currentPlayer.name} –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É ${card.image}`);
          
          if (selectedHandCard?.id === card.id) {
            // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ - –∏–≥—Ä–∞–µ–º –∫–∞—Ä—Ç—É
            get().playSelectedCard();
          } else {
            // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É
            set({ selectedHandCard: card });
          }
        },
         
         // –†–æ–∑—ã–≥—Ä—ã—à –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã (–ü–†–ê–í–ò–õ–ê P.I.D.R.)
        playSelectedCard: () => {
          const { selectedHandCard, currentPlayerId, players, tableStack, roundInProgress, stage2TurnPhase, trumpSuit, roundFinisher, finisherPassed } = get();
          if (!selectedHandCard || !currentPlayerId) return;
          
          const currentPlayer = players.find(p => p.id === currentPlayerId);
          if (!currentPlayer) return;
          
          console.log(`üÉè [playSelectedCard P.I.D.R.] –ò–≥—Ä–æ–∫ ${currentPlayer.name} –∏–≥—Ä–∞–µ—Ç –∫–∞—Ä—Ç–æ–π: ${selectedHandCard?.image}`);
          console.log(`üìä [playSelectedCard P.I.D.R.] –£ ${currentPlayer.name}: ${currentPlayer.cards.length} –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ, ${currentPlayer.penki.length} –ø–µ–Ω—å–∫–æ–≤`);
          console.log(`üÉè [playSelectedCard P.I.D.R.] - tableStack.length: ${tableStack.length}`);
          console.log(`üÉè [playSelectedCard P.I.D.R.] - roundInProgress: ${roundInProgress}`);
           
           // –ü–†–ê–í–ò–õ–ê P.I.D.R.: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –ø–æ–±–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ)
           if (tableStack.length > 0) {
             const topCard = tableStack[tableStack.length - 1];
             console.log(`üÉè [playSelectedCard P.I.D.R.] –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–±–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É: ${topCard?.image}`);
             
             const canBeat = get().canBeatCard(topCard, selectedHandCard, trumpSuit || '');
             if (!canBeat) {
               get().showNotification('–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ!', 'error', 3000);
               console.log(`üÉè [playSelectedCard P.I.D.R.] ‚ùå –ù–ï –ú–û–ñ–ï–¢ –ü–û–ë–ò–¢–¨!`);
               return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥
             }
             console.log(`üÉè [playSelectedCard P.I.D.R.] ‚úÖ –ü–û–ë–ò–õ –í–ï–†–•–ù–Æ–Æ –ö–ê–†–¢–£!`);
           } else {
             console.log(`üÉè [playSelectedCard P.I.D.R.] üÜï –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ —Å—Ç–æ–ª (–Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞)`);
           }
           
           // –£–ë–†–ê–ù–ê –°–¢–ê–†–ê–Ø –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –õ–ò–ú–ò–¢–ê –ö–ê–†–¢
           // –¢–µ–ø–µ—Ä—å –∫—Ä—É–≥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ñ–∏–Ω–∏—à–µ—Ä (-1 –æ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞) –ø–æ–±—å–µ—Ç –∫–∞—Ä—Ç—É
           
          // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
          const cardIndex = currentPlayer.cards.findIndex(c => c.id === selectedHandCard.id);
          if (cardIndex === -1) return;
          
          currentPlayer.cards.splice(cardIndex, 1);
          
          // üîç –î–õ–Ø –û–¢–õ–ê–î–ö–ò: –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å 0 –∫–∞—Ä—Ç
          if (currentPlayer.cards.length === 0) {
            console.log(`üî• [playSelectedCard] –£ ${currentPlayer.name} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–∞—Ä—Ç—ã! –ü–µ–Ω—å–∫–∏: ${currentPlayer.penki.length}, playerStage: ${currentPlayer.playerStage}`);
          }
          
          // üèÜ –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–ë–ï–î–£ –¢–û–õ–¨–ö–û –í–û 2-–ô –°–¢–ê–î–ò–ò –ö–û–ì–î–ê –ò –ö–ê–†–¢–´ –ò –ü–ï–ù–¨–ö–ò –ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨!
           const { gameStage } = get();
           const cardsLeft = currentPlayer.cards.length;
           const penkiLeft = currentPlayer.penki.length;
           const totalCardsLeft = cardsLeft + penkiLeft;
           
           console.log(`üèÜ [playSelectedCard] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –¥–ª—è ${currentPlayer.name}: –∫–∞—Ä—Ç=${cardsLeft}, –ø–µ–Ω—å–∫–æ–≤=${penkiLeft}, –≤—Å–µ–≥–æ=${totalCardsLeft}, —Å—Ç–∞–¥–∏—è=${gameStage}`);
           
           if (gameStage >= 2 && totalCardsLeft === 0 && cardsLeft === 0 && penkiLeft === 0) {
             console.log(`üéâ [playSelectedCard] üèÜ –ò–ì–†–û–ö ${currentPlayer.name} –ò–ó–ë–ê–í–ò–õ–°–Ø –û–¢ –í–°–ï–• –ö–ê–†–¢ –ò –ü–ï–ù–¨–ö–û–í –í–û 2-–ô –°–¢–ê–î–ò–ò!`);
             
             // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ù–ï–ú–ï–î–õ–ï–ù–ù–û
             const updatedPlayers = players.map(p => 
               p.id === currentPlayer.id ? { ...p, isWinner: true } : p
             );
             set({ players: updatedPlayers });
             
             // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–±—ã–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ –º–µ—Å—Ç–∞)
             const { eliminationOrder } = get();
             const newEliminationOrder = [...eliminationOrder];
             if (!newEliminationOrder.includes(currentPlayer.id)) {
               newEliminationOrder.unshift(currentPlayer.id); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ (–ª—É—á—à–∏–µ –º–µ—Å—Ç–∞)
               set({ eliminationOrder: newEliminationOrder });
             }
             
             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–±–µ–¥—ã –Ω–∞ 3.5 —Å–µ–∫—É–Ω–¥—ã
             const position = newEliminationOrder.length; // –ú–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞ (1-–π, 2-–π, 3-–π...)
             const positionText = position === 1 ? '1-–µ –º–µ—Å—Ç–æ' : position === 2 ? '2-–µ –º–µ—Å—Ç–æ' : position === 3 ? '3-–µ –º–µ—Å—Ç–æ' : `${position}-–µ –º–µ—Å—Ç–æ`;
             
             get().showNotification(`üèÜ ${currentPlayer.name} - ${positionText}!`, 'success', 3500);
             
             console.log(`üèÜ [playSelectedCard] ${currentPlayer.name} –∑–∞–Ω—è–ª ${position}-–µ –º–µ—Å—Ç–æ`);
             
             // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–±–µ–¥—ã
             setTimeout(() => {
               get().checkVictoryCondition();
             }, 100);
           }
           
           // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª (–ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö)
           const playedCard = { ...selectedHandCard };
           playedCard.open = true;
           
           const newTableStack = [...tableStack, playedCard];
           const wasEmptyTable = tableStack.length === 0;
           
           console.log(`üÉè [${currentPlayer.name}] –∫–ª–∞–¥–µ—Ç –∫–∞—Ä—Ç—É ${playedCard.image} –Ω–∞ —Å—Ç–æ–ª (–≤—Å–µ–≥–æ –Ω–∞ —Å—Ç–æ–ª–µ: ${newTableStack.length})`);
           
           // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏ —Ñ–∏–Ω–∏—à–µ—Ä–∞ –∫—Ä—É–≥–∞
           let newInitiator = get().currentRoundInitiator;
           let newFinisher = get().roundFinisher;
           let newFinisherPassed = finisherPassed;
           
           if (wasEmptyTable) {
             // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ - —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
             newInitiator = currentPlayerId;
             newFinisher = get().calculateRoundFinisher(currentPlayerId);
             newFinisherPassed = false; // –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≤–µ—Ä—Ç–∞–π–º
             console.log(`üéØ [playSelectedCard] üÜï –ù–û–í–´–ô –†–ê–£–ù–î –ù–ê–ß–ê–¢! –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${currentPlayer.name}, –§–∏–Ω–∏—à–µ—Ä: ${players.find(p => p.id === newFinisher)?.name}`);
           }
           
           set({
             players: [...players],
             tableStack: newTableStack,
             selectedHandCard: null,
             roundInProgress: true,
             currentRoundInitiator: newInitiator,
             roundFinisher: newFinisher,
             finisherPassed: newFinisherPassed,
             lastCardTaker: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑—è–≤—à–µ–≥–æ –∫–∞—Ä—Ç—É
             stage2TurnPhase: 'selecting_card' // –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É
           });
           
           const actionType = wasEmptyTable ? '–Ω–∞—á–∞–ª –∞—Ç–∞–∫—É' : '–ø–æ–±–∏–ª –∫–∞—Ä—Ç—É';
           get().showNotification(`${currentPlayer.name} ${actionType} (–Ω–∞ —Å—Ç–æ–ª–µ: ${newTableStack.length})`, 'info', 3000);
           
           // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê P.I.D.R.: –ö–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è –≤ –º–∞—Å—Å–∏–≤–µ!
           // –ö—Ä—É–≥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ù–ï –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±–∏—Ç—å—è, –∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Å–æ–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
           console.log(`üÉè [playSelectedCard] –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–∞—Å—Å–∏–≤. –ù–∞ —Å—Ç–æ–ª–µ –∫–∞—Ä—Ç: ${newTableStack.length}`);
           console.log(`üÉè [playSelectedCard] –ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ: ${newTableStack.map(c => c.image).join(' -> ')}`);
           
           // –ù–û–í–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ö–†–£–ì–ê:
           // –ö—Ä—É–≥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞:
           // 1. –§–∏–Ω–∏—à–µ—Ä –ø–æ–±–∏–ª –∫–∞—Ä—Ç—É (–æ–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
           // 2. –õ—é–±–æ–π –∏–≥—Ä–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∏—à–µ—Ä–∞ –ø–æ–±–∏–ª –∫–∞—Ä—Ç—É (–æ–≤–µ—Ä—Ç–∞–π–º)
           
           const shouldEndRound = !wasEmptyTable && (
             // –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: —Ñ–∏–Ω–∏—à–µ—Ä –ø–æ–±–∏–ª –∫–∞—Ä—Ç—É
             (currentPlayerId === roundFinisher && !finisherPassed) ||
             // –û–≤–µ—Ä—Ç–∞–π–º: —Ñ–∏–Ω–∏—à–µ—Ä —É–∂–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª, –ª—é–±–æ–π —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–±–∏–ª
             (finisherPassed && newTableStack.length > 0)
           );
           
          if (shouldEndRound) {
            const reasonText = finisherPassed
              ? `–û–≤–µ—Ä—Ç–∞–π–º! ${currentPlayer.name} –ø–æ–±–∏–ª –∏ –∑–∞–∫—Ä—ã–ª –∫—Ä—É–≥`
              : `${currentPlayer.name} (—Ñ–∏–Ω–∏—à–µ—Ä) –∑–∞–∫—Ä—ã–ª –∫—Ä—É–≥`;
              
            console.log(`üéØ [playSelectedCard] üèÅ –ö–†–£–ì –ó–ê–í–ï–†–®–ï–ù! ${reasonText}`);
            console.log(`üéØ [playSelectedCard] üìä –ö–∞—Ä—Ç –≤ –±–∏—Ç—É: ${newTableStack.length}`);
            console.log(`üéØ [playSelectedCard] üóëÔ∏è –ö–∞—Ä—Ç—ã: ${newTableStack.map(c => c.image).join(', ')}`);
            
            // –í–°–ï –ö–ê–†–¢–´ –°–û –°–¢–û–õ–ê –£–•–û–î–Ø–¢ –í –ë–ò–¢–£
            const { playedCards = [] } = get();
            const updatedPlayedCards = [...playedCards, ...newTableStack];
            console.log(`üóëÔ∏è [playSelectedCard] –î–æ–±–∞–≤–ª—è–µ–º ${newTableStack.length} –∫–∞—Ä—Ç –≤ –±–∏—Ç–æ (–≤—Å–µ–≥–æ: ${updatedPlayedCards.length})`);
            
            set({
              tableStack: [],
              playedCards: updatedPlayedCards, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≤ –±–∏—Ç–æ
              roundInProgress: false,
              currentRoundInitiator: null,
              roundFinisher: null,
              finisherPassed: false,
              lastCardTaker: null,
              stage2TurnPhase: 'selecting_card'
            });
            
            get().showNotification(`üèÅ ${reasonText}! ${newTableStack.length} –∫–∞—Ä—Ç –≤ –±–∏—Ç–æ`, 'success', 3000);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–µ–Ω—å–∫–æ–≤ –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤
            // ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è!
            setTimeout(() => {
              const currentPlayers = get().players; // –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ—Ä–∞!
              currentPlayers.forEach(player => {
                get().checkStage3Transition(player.id);
              });
            }, 50);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
            get().checkVictoryCondition();
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–≥—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –ó–ê–ö–†–´–õ –∫—Ä—É–≥ –û–°–¢–ê–ï–¢–°–Ø —Ö–æ–¥–∏—Ç—å!
            // –•–æ–¥ –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∫—Ä—É–≥–∞ —Ö–æ–¥–∏—Ç —Å–Ω–æ–≤–∞
            console.log(`üèÜ [playSelectedCard] ${currentPlayer.name} –∑–∞–∫—Ä—ã–ª –∫—Ä—É–≥ –∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Ö–æ–¥–∏—Ç—å!`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
            setTimeout(() => {
              get().checkOneCardStatus();
            }, 100);
            
            return;
          }
           
           // –û–ë–´–ß–ù–û–ï –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ö–†–£–ì–ê
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–µ–Ω—å–∫–æ–≤ –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤
          // ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è!
          setTimeout(() => {
            const currentPlayers = get().players; // –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ—Ä–∞!
            currentPlayers.forEach(player => {
              get().checkStage3Transition(player.id);
            });
          }, 50);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
          get().checkVictoryCondition();
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ checkOneCardStatus() - –æ–Ω —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ nextTurn()
          
          // –ü–†–ê–í–ò–õ–ê P.I.D.R.: –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É (–£–°–ö–û–†–ï–ù–û)
          console.log(`üÉè [playSelectedCard P.I.D.R.] ‚úÖ –•–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É`);
          setTimeout(() => get().nextTurn(), 200);
         },
         
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–±–∏—Ç—å –∫–∞—Ä—Ç—É
        canBeatCard: (attackCard: Card, defendCard: Card, trumpSuit: string) => {
          if (!attackCard.image || !defendCard.image) return false;
          
          const attackSuit = get().getCardSuit(attackCard.image);
          const defendSuit = get().getCardSuit(defendCard.image);
          const attackRank = get().getCardRank(attackCard.image);
          const defendRank = get().getCardRank(defendCard.image);
          
          // –£–±—Ä–∞–Ω—ã –ª–æ–≥–∏ (—Å–ø–∞–º—è—Ç –∫–æ–Ω—Å–æ–ª—å - –≤—ã–∑—ã–≤–∞—é—Ç—Å—è 30+ —Ä–∞–∑ –∑–∞ —Ö–æ–¥)
          
          // –û–°–û–ë–û–ï –ü–†–ê–í–ò–õ–û: "–ü–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ü–∏–∫—è–º–∏" - –ø–∏–∫–∏ –º–æ–∂–Ω–æ –±–∏—Ç—å –¢–û–õ–¨–ö–û –ø–∏–∫–∞–º–∏
          if (attackSuit === 'spades' && defendSuit !== 'spades') {
            return false;
          }
          
          // –ë–∏—Ç—å —Ç–æ–π –∂–µ –º–∞—Å—Ç—å—é —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–æ–π
          if (attackSuit === defendSuit) {
            return defendRank > attackRank;
          }
          
          // –ë–∏—Ç—å –∫–æ–∑—ã—Ä–µ–º –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é –∫–∞—Ä—Ç—É (–ù–û –ù–ï –ü–ò–ö–£!)
          if (defendSuit === trumpSuit && attackSuit !== trumpSuit && attackSuit !== 'spades') {
            return true;
          }
          
          return false;
        },
         

         
        // –í–∑—è—Ç—å –ù–ò–ñ–ù–Æ–Æ –∫–∞—Ä—Ç—É —Å–æ —Å—Ç–æ–ª–∞ (–ü–†–ê–í–ò–õ–ê P.I.D.R.)
        takeTableCards: () => {
          console.log('üé¥ [takeTableCards] –í–´–ó–í–ê–ù–ê –§–£–ù–ö–¶–ò–Ø!');
          const { currentPlayerId, players, tableStack, roundFinisher, currentRoundInitiator } = get();
          
          console.log(`üé¥ [takeTableCards] currentPlayerId=${currentPlayerId}, tableStack.length=${tableStack.length}`);
          
          if (!currentPlayerId || tableStack.length === 0) {
            console.log('üé¥ [takeTableCards] –ë–õ–û–ö–ò–†–û–í–ö–ê: –Ω–µ—Ç currentPlayerId –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª');
            return;
          }
          
          const currentPlayer = players.find(p => p.id === currentPlayerId);
          if (!currentPlayer) {
            console.log('üé¥ [takeTableCards] –ë–õ–û–ö–ò–†–û–í–ö–ê: –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
          }
          
          console.log(`üÉè [takeTableCards P.I.D.R.] ${currentPlayer.name} –Ω–µ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –∏ –±–µ—Ä–µ—Ç –ù–ò–ñ–ù–Æ–Æ –∫–∞—Ä—Ç—É`);
           console.log(`üÉè [takeTableCards P.I.D.R.] –ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ:`, tableStack.map(c => c.image));
           
           // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –µ—Å–ª–∏ —Ñ–∏–Ω–∏—à–µ—Ä –≤–∑—è–ª –∫–∞—Ä—Ç—É (–Ω–∞—á–∞–ª—Å—è –æ–≤–µ—Ä—Ç–∞–π–º)
           const { finisherPassed } = get();
           let newFinisherPassed = finisherPassed;
           if (currentPlayerId === roundFinisher && !finisherPassed) {
             console.log(`üéØ [takeTableCards] ‚ö†Ô∏è –§–ò–ù–ò–®–ï–† ${currentPlayer.name} –≤–∑—è–ª –∫–∞—Ä—Ç—É - –ù–ê–ß–ê–õ–°–Ø –û–í–ï–†–¢–ê–ô–ú!`);
             newFinisherPassed = true;
           }
           
           // –ë–µ—Ä–µ–º –¢–û–õ–¨–ö–û –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É (–ø–µ—Ä–≤—É—é –≤ —Å—Ç–æ–ø–∫–µ)
           const bottomCard = tableStack[0];
           bottomCard.open = true; // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∑—è—Ç—É—é –∫–∞—Ä—Ç—É
           
           currentPlayer.cards.push(bottomCard);
           
           // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ —Å—Ç–æ–ª–µ
           const newTableStack = tableStack.slice(1);
           
           set({
             players: [...players],
             tableStack: newTableStack,
             finisherPassed: newFinisherPassed,
             lastCardTaker: currentPlayerId, // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑—è–≤—à–µ–≥–æ
             stage2TurnPhase: 'selecting_card' // –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É
           });
           
           console.log(`üÉè [takeTableCards P.I.D.R.] –í–∑—è—Ç–∞ –Ω–∏–∂–Ω—è—è –∫–∞—Ä—Ç–∞: ${bottomCard.image}`);
           console.log(`üÉè [takeTableCards P.I.D.R.] –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å—Ç–æ–ª–µ:`, newTableStack.map(c => c.image));
           
           get().showNotification(`${currentPlayer.name} –≤–∑—è–ª –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É (–æ—Å—Ç–∞–ª–æ—Å—å: ${newTableStack.length})`, 'warning', 3000);
           
           // –ï—Å–ª–∏ —Å—Ç–æ–ª –æ–ø—É—Å—Ç–µ–ª - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
           if (newTableStack.length === 0) {
             console.log(`üéØ [takeTableCards] üì≠ –°—Ç–æ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω - —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω`);
             set({
               roundInProgress: false,
               currentRoundInitiator: null,
               roundFinisher: null,
 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
               stage2TurnPhase: 'selecting_card'
             });
             get().showNotification('–°—Ç–æ–ª –æ—á–∏—â–µ–Ω! –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥', 'info', 3000);
           }
           
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–µ–Ω—å–∫–æ–≤ –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤
          // ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è!
          setTimeout(() => {
            const currentPlayers = get().players; // –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ—Ä–∞!
            currentPlayers.forEach(player => {
              get().checkStage3Transition(player.id);
            });
          }, 50);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
          get().checkVictoryCondition();
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
           get().checkOneCardStatus();
           
           // –ü–†–ê–í–ò–õ–ê P.I.D.R.: –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É (–£–°–ö–û–†–ï–ù–û)
           console.log(`üÉè [takeTableCards P.I.D.R.] ‚úÖ –•–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É`);
           setTimeout(() => get().nextTurn(), 200);
         },
         
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
         checkRoundComplete: () => {
           const { currentPlayerId, currentRoundInitiator, players } = get();
           if (!currentRoundInitiator) return false;
           
           // –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Ä–∞—É–Ω–¥–∞
           const initiatorIndex = players.findIndex(p => p.id === currentRoundInitiator);
           const currentIndex = players.findIndex(p => p.id === currentPlayerId);
           
           if (initiatorIndex === -1 || currentIndex === -1) return false;
           
           // –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –¥–æ—Ö–æ–¥–∏–º –¥–æ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
           const beforeInitiatorIndex = (initiatorIndex - 1 + players.length) % players.length;
           
           return currentIndex === beforeInitiatorIndex;
         },
         
         // ===== –ú–ï–¢–û–î–´ –î–õ–Ø 3-–ô –°–¢–ê–î–ò–ò =====
         
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ 3-—é —Å—Ç–∞–¥–∏—é - –ò–°–ü–†–ê–í–õ–ï–ù–û
         checkStage3Transition: (playerId: string) => {
           const { players, gameStage } = get();
           if (gameStage !== 2) return; // –¢–æ–ª—å–∫–æ –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ 3-—é
           
           const player = players.find(p => p.id === playerId);
           if (!player) {
             console.log(`üÉè [checkStage3Transition] ‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${playerId}`);
             return;
           }
           
           // –ó–ê–©–ò–¢–ê: –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ –Ω–µ—Ç –ø–µ–Ω—å–∫–æ–≤, –∑–Ω–∞—á–∏—Ç –æ–Ω–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
           if (player.penki.length === 0) {
             // –£–±—Ä–∞–Ω –ª–æ–≥ (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ö–æ–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞)
             return;
           }
           
         // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ–Ω—å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –†–£–ö–ê –ü–£–°–¢–ê–Ø (cards.length === 0)
          // –ù–ï –∫–æ–≥–¥–∞ "–Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç", –∞ –∫–æ–≥–¥–∞ "–í–û–û–ë–©–ï –ù–ï–¢ –ö–ê–†–¢"!
          
          // –î–õ–Ø –û–¢–õ–ê–î–ö–ò: –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å 0 –∫–∞—Ä—Ç–∞–º–∏
          if (player.cards.length === 0) {
            console.log(`üîç [checkStage3Transition] ${player.name}: –∫–∞—Ä—Ç=${player.cards.length}, –ø–µ–Ω—å–∫–∏=${player.penki.length}, playerStage=${player.playerStage || 'undefined'}`);
          }
          
          // ‚úÖ –£–ë–†–ê–ù–ê –ü–†–û–í–ï–†–ö–ê player.playerStage === 2 (–∏–∑–±—ã—Ç–æ—á–Ω–∞, —Ç.–∫. gameStage —É–∂–µ === 2)
          if (player.cards.length === 0 && player.penki.length > 0) {
            console.log(`üÉè [checkStage3Transition] ‚úÖ –£ –∏–≥—Ä–æ–∫–∞ ${player.name} –ø—É—Å—Ç–∞—è —Ä—É–∫–∞ –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ–Ω—å–∫–∏!`);
            get().activatePenki(playerId);
          }
         },
         
         // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ–Ω—å–∫–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏) - –ò–°–ü–†–ê–í–õ–ï–ù–û
         activatePenki: (playerId: string) => {
           const { players } = get();
           const playerIndex = players.findIndex(p => p.id === playerId);
           const player = players[playerIndex];
           
           if (!player || player.penki.length === 0) {
             console.log(`üÉè [activatePenki] ‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–µ–Ω—å–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${playerId}`);
             return;
           }
           
           console.log(`üÉè [activatePenki] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ–Ω—å–∫–æ–≤ –¥–ª—è ${player.name}`);
           console.log(`üÉè [activatePenki] - –¢–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã:`, player.cards.map(c => `${c.image}(${c.open ? 'open' : 'closed'})`));
           console.log(`üÉè [activatePenki] - –ü–µ–Ω—å–∫–∏:`, player.penki.map(c => `${c.image}(${c.open ? 'open' : 'closed'})`));
           
           // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ–Ω—å–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã
           const activatedPenki = player.penki.map(card => ({
             ...card,
             open: true // –ü–µ–Ω—å–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –≤ —Ä—É–∫—É
           }));
           
           // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ú–£–¢–ò–†–£–ï–ú –æ–±—ä–µ–∫—Ç player, –∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
           const newPlayers = [...players];
           newPlayers[playerIndex] = {
             ...player,
             cards: [...player.cards, ...activatedPenki],
             penki: [] // –û—á–∏—â–∞–µ–º –ø–µ–Ω—å–∫–∏
           };
           
           // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤
           set({ players: newPlayers });
           
           console.log(`üÉè [activatePenki] –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞:`, newPlayers[playerIndex].cards.map(c => `${c.image}(${c.open ? 'open' : 'closed'})`));
           
           get().showNotification(`${player.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–µ–Ω—å–∫–∏ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏!`, 'info', 5000);
           
           // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã –∏ —Å—Ç–∞—Ç—É—Å–∞ "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
           setTimeout(() => {
             get().checkVictoryCondition();
             get().checkOneCardStatus();
           }, 100);
         },
         
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô –ü–û–ë–ï–î–´ - –û–ë–™–Ø–í–õ–Ø–ï–ú –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô!
        checkVictoryCondition: () => {
          const { players, isGameActive, gameStage } = get();
          
          // –ó–ê–©–ò–¢–ê: –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
          if (!isGameActive) {
            console.log(`üèÜ [checkVictoryCondition] ‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
          }
          
          // –ó–ê–©–ò–¢–ê: –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
          if (players.length === 0) {
            console.log(`üèÜ [checkVictoryCondition] ‚ö†Ô∏è –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
          }
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í 1-–π —Å—Ç–∞–¥–∏–∏ –ø–æ–±–µ–¥–∞ –ù–ï–í–û–ó–ú–û–ñ–ù–ê!
          if (gameStage === 1) {
            // –£–±—Ä–∞–Ω –ª–æ–≥ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π - –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ö–æ–¥–µ)
            return;
          }
          
          // –£–±—Ä–∞–Ω –ª–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π)
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ö–ê–ñ–î–û–ì–û –∏–≥—Ä–æ–∫–∞
          const newWinners: Player[] = [];
          const existingWinners: Player[] = [];
          const playersInGame: Player[] = [];
          
          players.forEach(player => {
            const openCards = player.cards.filter(c => c.open).length;
            const closedCards = player.cards.filter(c => !c.open).length;
            const penki = player.penki.length;
            const total = player.cards.length + player.penki.length;
            
            // –£–±—Ä–∞–Ω –ª–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π)
            
            // –ü–û–ë–ï–î–ò–¢–ï–õ–¨ = –ù–ï–¢ –ö–ê–†–¢ –í–û–û–ë–©–ï (–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö, –Ω–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö, –Ω–∏ –ø–µ–Ω—å–∫–æ–≤)
            if (total === 0) {
              if (!player.isWinner) {
                console.log(`   üéâ –ù–û–í–´–ô –ü–û–ë–ï–î–ò–¢–ï–õ–¨!`);
                newWinners.push(player);
              } else {
                console.log(`   ‚úÖ –£–ñ–ï –ü–û–ë–ï–î–ò–¢–ï–õ–¨ (–∑—Ä–∏—Ç–µ–ª—å)`);
                existingWinners.push(player);
              }
            } else {
              // –£–±—Ä–∞–Ω –ª–æ–≥ (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ö–æ–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
              playersInGame.push(player);
            }
          });
          
          // –£–±—Ä–∞–Ω –ª–æ–≥ –∏—Ç–æ–≥–æ–≤ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π)
          
          // üéâ –û–ë–™–Ø–í–õ–Ø–ï–ú –ù–û–í–´–• –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô (–ù–ï –ó–ê–í–ï–†–®–ê–Ø –ò–ì–†–£)
          if (newWinners.length > 0) {
            console.log(`üéâ [checkVictoryCondition] –û–ë–™–Ø–í–õ–Ø–ï–ú –ù–û–í–´–• –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô!`);
            
            // –ü–æ–º–µ—á–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            const updatedPlayers = players.map(player => {
              if (newWinners.some(w => w.id === player.id)) {
                return { ...player, isWinner: true };
              }
              return player;
            });
            
            set({ players: updatedPlayers });
            
            // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô –° –ê–ù–ò–ú–ê–¶–ò–ï–ô
            newWinners.forEach((winner, index) => {
              const position = existingWinners.length + index + 1;
              const medals = ['ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üèÖ', 'üèÖ'];
              const medal = medals[position - 1] || 'üèÖ';
              const positionText = position === 1 ? '1-–µ –º–µ—Å—Ç–æ' : position === 2 ? '2-–µ –º–µ—Å—Ç–æ' : position === 3 ? '3-–µ –º–µ—Å—Ç–æ' : `${position}-–µ –º–µ—Å—Ç–æ`;
              
              console.log(`üéâ –û–ë–™–Ø–í–õ–Ø–ï–ú –ü–û–ë–ï–î–ò–¢–ï–õ–Ø: ${winner.name} - ${positionText}`);
              
              // ‚úÖ –ö–†–ê–°–ò–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –° –ú–ï–î–ê–õ–¨–Æ
              get().showNotification(
                `${medal} ${winner.name} - ${positionText}! üéâ`, 
                'success', 
                7000
              );
              
              // üéâ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ú–û–î–ê–õ–ö–£ –ü–û–ë–ï–î–ò–¢–ï–õ–Ø –î–õ–Ø –í–°–ï–• (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
              setTimeout(() => {
                set({
                  showWinnerModal: true,
                  winnerModalData: {
                    playerName: winner.name,
                    place: position,
                    avatar: winner.avatar
                  }
                });
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                  set({
                    showWinnerModal: false,
                    winnerModalData: null
                  });
                }, 3000);
              }, 500 + index * 200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–æ–¥–∞–ª–∫–∞–º–∏ –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
              
              // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
              if (winner.isUser) {
                setTimeout(() => {
                  set({
                    showVictoryModal: true,
                    victoryData: {
                      position: position,
                      isWinner: true,
                      playerName: winner.name,
                      gameMode: get().gameMode,
                      ratingChange: 50,
                      rewardsEarned: 100
                    }
                  });
                }, 500);
              }
            });
          }
          
          // üèÅ –ó–ê–í–ï–†–®–ê–ï–ú –ò–ì–†–£ –¢–û–õ–¨–ö–û –ö–û–ì–î–ê –û–°–¢–ê–õ–°–Ø 1 –ò–ì–†–û–ö
          if (playersInGame.length <= 1) {
            console.log(`üèÅ [checkVictoryCondition] –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê - –æ—Å—Ç–∞–ª—Å—è 1 –∏–≥—Ä–æ–∫ –∏–ª–∏ –º–µ–Ω—å—à–µ!`);
            
            setTimeout(() => {
              // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
              set({
                isGameActive: false,
                gameStage: 4, // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
              });
              
              if (playersInGame.length === 1) {
                // –ü–û–°–õ–ï–î–ù–ò–ô –ò–ì–†–û–ö = –ü–†–û–ò–ì–†–ê–í–®–ò–ô
                const loser = playersInGame[0];
                const cardsLeft = loser.cards.length + loser.penki.length;
                
                console.log(`üí∏ –ü–†–û–ò–ì–†–ê–í–®–ò–ô: ${loser.name} (${cardsLeft} –∫–∞—Ä—Ç)`);
                
                get().showNotification(
                  `üí∏ –ü–†–û–ò–ì–†–ê–í–®–ò–ô: ${loser.name} (${cardsLeft} –∫–∞—Ä—Ç)`, 
                  'error', 
                  5000
                );
                
                // üíÄ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ú–û–î–ê–õ–ö–£ –ü–†–û–ò–ì–†–ê–í–®–ï–ì–û
                setTimeout(() => {
                  set({
                    showLoserModal: true,
                    loserModalData: {
                      playerName: loser.name,
                      avatar: loser.avatar
                    }
                  });
                  
                  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                  setTimeout(() => {
                    set({
                      showLoserModal: false,
                      loserModalData: null
                    });
                  }, 5000);
                }, 1000);
                
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if (loser.isUser) {
                  setTimeout(() => {
                    set({
                      showVictoryModal: true,
                      victoryData: {
                        position: players.length, // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ
                        isWinner: false,
                        playerName: loser.name,
                        gameMode: get().gameMode,
                        ratingChange: -25,
                        rewardsEarned: 0
                      }
                    });
                  }, 2000);
                }
              }
              
              // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              const allWinners = players.filter(p => p.isWinner || (p.cards.length + p.penki.length === 0));
              setTimeout(() => {
                get().showNotification(
                  `üéä –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${allWinners.map(w => w.name).join(', ')}`, 
                  'success', 
                  6000
                );
              }, 3000);
              
            }, newWinners.length > 0 ? 3000 : 1000); // –ñ–¥–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
          }
        },
         
         // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ "–û–î–ù–ê –ö–ê–†–¢–ê!" –ò –®–¢–†–ê–§–û–í =====
         
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º—É –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–ª—è—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
        checkOneCardStatus: () => {
          const { players, gameStage, oneCardDeclarations, oneCardTimers } = get();
          if (gameStage !== 2 && gameStage !== 3) return; // –¢–æ–ª—å–∫–æ –≤–æ 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏—è—Ö
          
          const currentTime = Date.now();
          const newOneCardTimers = { ...oneCardTimers };
          const newOneCardDeclarations = { ...oneCardDeclarations };
          const newPlayersWithOneCard: string[] = [];
          
          players.forEach(player => {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—á–∏—Ç–∞–µ–º –¢–û–õ–¨–ö–û –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ (player.cards), –ë–ï–ó –ø–µ–Ω—å–∫–æ–≤ (player.penki)!
            // –ü–µ–Ω—å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ —Ä—É–∫–∞ –ø—É—Å—Ç–∞—è!
            const cardsInHand = player.cards.length; // –ö–∞—Ä—Ç—ã –í –†–£–ö–ï (–±–µ–∑ –ø–µ–Ω—å–∫–æ–≤!)
            const penkiCount = player.penki.length; // –ü–µ–Ω—å–∫–∏ (–æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è!)
            const hasAlreadyDeclared = oneCardDeclarations[player.id] === true;
            
            // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –õ–æ–≥–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ 1 –∫–∞—Ä—Ç–∞ –ò –ù–ï –æ–±—ä—è–≤–ª–µ–Ω–æ
            // –£–±—Ä–∞–ª–∏ —Å–ø–∞–º –ª–æ–≥–∞–º–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å != 1 –∫–∞—Ä—Ç–æ–π –∏–ª–∏ —É–∂–µ –æ–±—ä—è–≤–∏–≤—à–∏—Ö
            if (cardsInHand === 1 && !hasAlreadyDeclared) {
              console.log(`‚ö†Ô∏è [checkOneCardStatus] ${player.name} - 1 –ö–ê–†–¢–ê! –û–±—ä—è–≤–ª–µ–Ω–æ: ${hasAlreadyDeclared ? '–î–ê' : '–ù–ï–¢'}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ä–æ–≤–Ω–æ 1 –∫–∞—Ä—Ç–∞ –í –†–£–ö–ï (–ë–ï–ó –ø–µ–Ω—å–∫–æ–≤!)
            if (cardsInHand === 1) {
               newPlayersWithOneCard.push(player.id);
               
               // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ —É–∂–µ –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" - –ù–ï –ü–†–û–í–ï–†–Ø–ï–ú –°–ù–û–í–ê!
               if (hasAlreadyDeclared) {
                 // –ò–≥—Ä–æ–∫ —É–∂–µ –æ–±—ä—è–≤–∏–ª - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–∞–π–º–µ—Ä—ã
                 return;
               }
               
               // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ç–∞–π–º–µ—Ä–∞
               if (!oneCardTimers[player.id]) {
                 // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                 newOneCardTimers[player.id] = currentTime + 5000; // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                 
                 console.log(`‚è∞ [checkOneCardStatus] –£ –∏–≥—Ä–æ–∫–∞ ${player.name} 1 –∫–∞—Ä—Ç–∞ –≤ —Ä—É–∫–µ! –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–¥–æ ${new Date(newOneCardTimers[player.id]).toLocaleTimeString()})`);
                 
                 // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫)
                 if (!player.isBot) {
                  get().showNotification(`‚ö†Ô∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–∞—Å—å 1 –∫–∞—Ä—Ç–∞! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞–∂–º–∏—Ç–µ "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥!`, 'warning', 5000);
                }
                 
                // ===== –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–û–¢–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –û–ë–™–Ø–í–õ–Ø–Æ–¢ –ò –°–ü–†–ê–®–ò–í–ê–Æ–¢ =====
                if (player.isBot) {
                  // –ë–û–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –û–ë–™–Ø–í–õ–Ø–ï–¢ "–û–î–ù–ê –ö–ê–†–¢–ê!" —á–µ—Ä–µ–∑ 3.5 —Å–µ–∫—É–Ω–¥—ã
                  setTimeout(() => {
                    const { oneCardDeclarations } = get();
                    if (!oneCardDeclarations[player.id]) {
                      console.log(`ü§ñ [checkOneCardStatus] –ë–æ—Ç ${player.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä—è–≤–ª—è–µ—Ç: "–û–î–ù–ê –ö–ê–†–¢–ê!"`);
                      get().showNotification(`ü§ñ ${player.name}: "–û–î–ù–ê –ö–ê–†–¢–ê!"`, 'info', 3000);
                      get().declareOneCard(player.id);
                    }
                  }, 3500); // ‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ 3.5 —Å–µ–∫—É–Ω–¥—ã
                } else {
                  // –î–ª—è —á–µ–ª–æ–≤–µ–∫–∞ - –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –±–æ—Ç–æ–≤ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
                  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ
                  const alreadyScheduled = get().oneCardTimers[`bot_asked_${player.id}`];
                  if (!alreadyScheduled) {
                    console.log(`ü§ñ [checkOneCardStatus] –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –±–æ—Ç–æ–≤ –¥–ª—è ${player.name} (–ü–ï–†–í–´–ô –†–ê–ó)`);
                    get().scheduleBotAskHowManyCards(player.id);
                    // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏
                    newOneCardTimers[`bot_asked_${player.id}`] = currentTime;
                  }
                }
                
               // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
               // –ù–ï –ó–ê–ü–£–°–ö–ê–ï–ú –µ—Å–ª–∏ —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ pendingPenalty)
               }
            } else if (cardsInHand !== 1) {
              // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –£ –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 1 –∫–∞—Ä—Ç—ã - –°–ë–†–ê–°–´–í–ê–ï–ú –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ —Ç–∞–π–º–µ—Ä
              // –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–∞—Ö –∏–≥—Ä–æ–∫ –°–ù–û–í–ê –¥–æ–ª–∂–µ–Ω –æ–±—ä—è–≤–∏—Ç—å!
              if (oneCardDeclarations[player.id] || oneCardTimers[player.id] || oneCardTimers[`bot_asked_${player.id}`]) {
                console.log(`üîÑ [checkOneCardStatus] ${player.name}: ${cardsInHand} –∫–∞—Ä—Ç ‚Üí –°–ë–†–û–° –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –æ–±—ä—è–≤–ª—è—Ç—å –∑–∞–Ω–æ–≤–æ)`);
                delete newOneCardDeclarations[player.id];
                delete newOneCardTimers[player.id];
                delete newOneCardTimers[`bot_asked_${player.id}`]; // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ–ø—Ä–æ—Å–∞ –±–æ—Ç–æ–≤
              }
            }
           });
           
           // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
           set({ 
             oneCardTimers: newOneCardTimers,
             oneCardDeclarations: newOneCardDeclarations,
             playersWithOneCard: newPlayersWithOneCard
           });
         },
         
        // –ò–≥—Ä–æ–∫ –æ–±—ä—è–≤–ª—è–µ—Ç "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
        declareOneCard: (playerId: string) => {
          const { players, oneCardDeclarations, oneCardTimers, gameStage } = get();
          const player = players.find(p => p.id === playerId);
          if (!player) return;
          
          const openCards = player.cards.filter(c => c.open);
          const totalCards = player.cards.length;
          
          // –í–æ 2-–π/3-–π —Å—Ç–∞–¥–∏–∏ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã (–±–µ–∑ –ø–µ–Ω—å–∫–æ–≤), –≤ 1-–π —Å—Ç–∞–¥–∏–∏ - —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ
          const cardsInPlay = (gameStage === 2 || gameStage === 3) ? totalCards : openCards.length;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ 1 –∫–∞—Ä—Ç–∞ –≤ –∏–≥—Ä–µ
          if (cardsInPlay !== 1) {
            get().showNotification(`‚ùå ${player.name}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ! –£ –≤–∞—Å ${cardsInPlay} –∫–∞—Ä—Ç`, 'error', 3000);
            return;
          }
           
           // –£—Å–ø–µ—à–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
           const newDeclarations = { ...oneCardDeclarations };
           const newTimers = { ...oneCardTimers };
           
           newDeclarations[playerId] = true;
           delete newTimers[playerId]; // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä
           
           set({ 
             oneCardDeclarations: newDeclarations,
             oneCardTimers: newTimers
           });
           
           console.log(`‚úÖ [declareOneCard] ${player.name} –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" –≤–æ–≤—Ä–µ–º—è`);
           get().showNotification(`‚úÖ ${player.name}: "–û–î–ù–ê –ö–ê–†–¢–ê!" –æ–±—ä—è–≤–ª–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è`, 'success', 3000);
         },
         
       // –°–ø—Ä–æ—Å–∏—Ç—å "—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?" —É –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
       askHowManyCards: (askerPlayerId: string, targetPlayerId: string) => {
          const { players, oneCardDeclarations, oneCardTimers, gameStage } = get();
          const asker = players.find(p => p.id === askerPlayerId);
          const target = players.find(p => p.id === targetPlayerId);
          
          if (!asker || !target) return;
          
          const targetOpenCards = target.cards.filter(c => c.open);
          const targetTotalCards = target.cards.length;
          const currentTime = Date.now();
          
          // –û–¢–û–ë–†–ê–ñ–ê–ï–ú —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã (–ø–µ–Ω—å–∫–∏ = –∑–∞–∫—Ä—ã—Ç—ã–µ, –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º!)
          console.log(`‚ùì [askHowManyCards] ${asker.name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É ${target.name} —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç`);
          console.log(`‚ùì [askHowManyCards] –£ ${target.name}: –æ—Ç–∫—Ä—ã—Ç—ã—Ö=${targetOpenCards.length}, –≤—Å–µ–≥–æ=${targetTotalCards} (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –æ—Ç–∫—Ä—ã—Ç—ã–µ!)`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –û–¢–ö–†–´–¢–´–ï –∫–∞—Ä—Ç—ã (–ø–µ–Ω—å–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
          get().showNotification(`üìä ${target.name} –∏–º–µ–µ—Ç ${targetOpenCards.length} –æ—Ç–∫—Ä—ã—Ç${targetOpenCards.length === 1 ? '—É—é' : '—ã—Ö'} –∫–∞—Ä—Ç${targetOpenCards.length === 1 ? '—É' : ''}`, 'info', 4000);
           
          // –®–¢–†–ê–§ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –û–ë–©–ï–ú–£ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç (–≤–∫–ª—é—á–∞—è –ø–µ–Ω—å–∫–∏)
          console.log(`üéØ [askHowManyCards] –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ç—Ä–∞—Ñ–∞: –≤—Å–µ–≥–æ –∫–∞—Ä—Ç=${targetTotalCards}`);
          
          if (targetTotalCards === 1) {
             const hasActiveTimer = oneCardTimers[targetPlayerId] && oneCardTimers[targetPlayerId] > currentTime;
             const hasExpiredTimer = oneCardTimers[targetPlayerId] && oneCardTimers[targetPlayerId] <= currentTime;
             const hasDeclared = oneCardDeclarations[targetPlayerId];
             
             console.log(`üéØ [askHowManyCards] –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä: ${hasActiveTimer}, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä: ${hasExpiredTimer}, –æ–±—ä—è–≤–∏–ª: ${hasDeclared}`);
             
             if ((hasActiveTimer || hasExpiredTimer) && !hasDeclared) {
               // –®–¢–†–ê–§! –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ–±—ä—è–≤–∏—Ç—å, –Ω–æ –Ω–µ –æ–±—ä—è–≤–∏–ª
               console.log(`üí∏ [askHowManyCards] ‚ö†Ô∏è –®–¢–†–ê–§! ${target.name} –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ–±—ä—è–≤–∏—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞!", –Ω–æ –Ω–µ –æ–±—ä—è–≤–∏–ª`);
               
               get().showNotification(`üí∏ –®–¢–†–ê–§! ${target.name} –∑–∞–±—ã–ª –æ–±—ä—è–≤–∏—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" - –ø–æ–ª—É—á–∞–µ—Ç –ó–ê–ö–†–´–¢–´–ï —à—Ç—Ä–∞—Ñ–Ω—ã–µ –∫–∞—Ä—Ç—ã!`, 'error', 5000);
               
               // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —à—Ç—Ä–∞—Ñ–∞ - –∏–≥—Ä–æ–∫–∏ —Å–∞–º–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã
               get().startPenaltyProcess(targetPlayerId);
             } else if (hasDeclared) {
               console.log(`‚úÖ [askHowManyCards] ${target.name} –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –≤–æ–≤—Ä–µ–º—è`);
               get().showNotification(`‚úÖ ${target.name} –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –≤–æ–≤—Ä–µ–º—è - —à—Ç—Ä–∞—Ñ–∞ –Ω–µ—Ç`, 'success', 3000);
             } else if (!hasActiveTimer && !hasExpiredTimer) {
               console.log(`‚ÑπÔ∏è [askHowManyCards] –£ ${target.name} –Ω–µ –±—ã–ª–æ —Ç–∞–π–º–µ—Ä–∞ - —à—Ç—Ä–∞—Ñ–∞ –Ω–µ—Ç`);
               get().showNotification(`‚ÑπÔ∏è –£ ${target.name} –Ω–µ –±—ã–ª–æ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª—è—Ç—å - —à—Ç—Ä–∞—Ñ–∞ –Ω–µ—Ç`, 'info', 3000);
             }
           }
         },
         
         // –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —à—Ç—Ä–∞—Ñ–∞ - –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É
         startPenaltyProcess: (forgetfulPlayerId: string) => {
           const { players } = get();
           const forgetfulPlayer = players.find(p => p.id === forgetfulPlayerId);
           if (!forgetfulPlayer) return;
           
           // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –æ—Ç–¥–∞—Ç—å –∫–∞—Ä—Ç—ã (–≤—Å–µ –∫—Ä–æ–º–µ —à—Ç—Ä–∞—Ñ—É–µ–º–æ–≥–æ)
           const contributorsNeeded = players
             .filter(p => p.id !== forgetfulPlayerId && p.cards.filter(c => c.open).length > 0)
             .map(p => p.id);
           
           if (contributorsNeeded.length === 0) {
             get().showNotification(`‚ö†Ô∏è –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—ã ${forgetfulPlayer.name}`, 'warning', 3000);
             return;
           }
           
           console.log(`üí∏ [startPenaltyProcess] –ù–∞—á–∏–Ω–∞–µ–º —à—Ç—Ä–∞—Ñ –¥–ª—è ${forgetfulPlayer.name}, —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${contributorsNeeded.length}`);
           
           // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–π —à—Ç—Ä–∞—Ñ
           set({ 
             pendingPenalty: {
               targetPlayerId: forgetfulPlayerId,
               contributorsNeeded: [...contributorsNeeded]
             }
           });
           
          get().showNotification(`üí∏ –ò–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è —à—Ç—Ä–∞—Ñ–∞ ${forgetfulPlayer.name}!`, 'warning', 7000);
          
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–¥–∞—é—Ç –∫–∞—Ä—Ç—ã, –ª—é–¥–∏ –ù–ï –ø–æ–ª—É—á–∞—é—Ç –º–æ–¥–∞–ª–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
          // –ú–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ"
          contributorsNeeded.forEach((playerId, index) => {
            const player = players.find(p => p.id === playerId);
            
            if (player?.isBot) {
              // –î–ª—è –±–æ—Ç–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ö—É–¥—à–∏–µ –∫–∞—Ä—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
              setTimeout(() => {
                const openCards = player.cards.filter(c => c.open);
                const worstCard = get().findWorstCardInHand(openCards, get().trumpSuit);
                if (worstCard) {
                  console.log(`ü§ñ [startPenaltyProcess] –ë–æ—Ç ${player.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ö—É–¥—à—É—é –∫–∞—Ä—Ç—É –¥–ª—è —à—Ç—Ä–∞—Ñ–∞`);
                  get().contributePenaltyCard(playerId, worstCard.id);
                }
              }, (index + 1) * 1000); // –ë–æ—Ç—ã –æ—Ç–¥–∞—é—Ç –∫–∞—Ä—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            }
            // –î–ª—è –ª—é–¥–µ–π - –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
            // –û–Ω–∏ —Å–∞–º–∏ –Ω–∞–∂–º—É—Ç –∫–Ω–æ–ø–∫—É "–°–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ"
          });
         },
         
         // –ò–≥—Ä–æ–∫ –æ—Ç–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –∑–∞ —à—Ç—Ä–∞—Ñ
         contributePenaltyCard: (contributorId: string, cardId: string) => {
           const { players, pendingPenalty } = get();
           if (!pendingPenalty) return;
           
           // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö (–Ω–µ –æ—Ç–¥–∞–ª –∫–∞—Ä—Ç—É)
           if (!pendingPenalty.contributorsNeeded.includes(contributorId)) {
             console.log(`‚ö†Ô∏è [contributePenaltyCard] –ò–≥—Ä–æ–∫ ${contributorId} —É–∂–µ –æ—Ç–¥–∞–ª –∫–∞—Ä—Ç—É –∏–ª–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —à—Ç—Ä–∞—Ñ–µ`);
             return;
           }
           
           const contributor = players.find(p => p.id === contributorId);
           const targetPlayer = players.find(p => p.id === pendingPenalty.targetPlayerId);
           if (!contributor || !targetPlayer) return;
           
           // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç—É —É –æ—Ç–¥–∞—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
           const cardIndex = contributor.cards.findIndex(c => c.id === cardId);
           if (cardIndex === -1) return;
           
           const card = contributor.cards[cardIndex];
           if (!card.open) {
             get().showNotification(`‚ùå –ú–æ–∂–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã!`, 'error', 3000);
             return;
           }
           
          console.log(`üí∏ [contributePenaltyCard] ${contributor.name} –æ—Ç–¥–∞–µ—Ç –∫–∞—Ä—Ç—É ${card.image} –≤ —à—Ç—Ä–∞—Ñ–Ω—É—é —Å—Ç–æ–ø–∫—É –¥–ª—è ${targetPlayer.name}`);
          console.log(`üìä [contributePenaltyCard] –î–æ: ${contributor.name} –∏–º–µ–µ—Ç ${contributor.cards.length} –∫–∞—Ä—Ç`);
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const newPlayers = players.map(player => ({ ...player, cards: [...player.cards] }));
          const contributorIndex = newPlayers.findIndex(p => p.id === contributorId);
          
          // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É —É –æ—Ç–¥–∞—é—â–µ–≥–æ
          newPlayers[contributorIndex].cards.splice(cardIndex, 1);
          console.log(`üìä [contributePenaltyCard] –ü–æ—Å–ª–µ: ${contributor.name} –±—É–¥–µ—Ç –∏–º–µ—Ç—å ${newPlayers[contributorIndex].cards.length} –∫–∞—Ä—Ç`);
          
          // –ù–û–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —à—Ç—Ä–∞—Ñ–Ω—É—é —Å—Ç–æ–ø–∫—É
          const penaltyCard = { ...card, open: false };
          console.log(`üóÇÔ∏è [contributePenaltyCard] –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É ${penaltyCard.image} –≤ —à—Ç—Ä–∞—Ñ–Ω—É—é —Å—Ç–æ–ø–∫—É`);
          get().addCardToPenaltyDeck(penaltyCard);
           
           // –ù–û–í–û–ï –ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ —É –æ—Ç–¥–∞—é—â–µ–≥–æ –æ—Å—Ç–∞–ª–∞—Å—å 1 –∫–∞—Ä—Ç–∞ - –æ–Ω –¥–æ–ª–∂–µ–Ω –æ–±—ä—è–≤–∏—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞!"
           if (newPlayers[contributorIndex].cards.filter(c => c.open).length === 1) {
             console.log(`üÉè [contributePenaltyCard] –£ ${contributor.name} –æ—Å—Ç–∞–ª–∞—Å—å 1 –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ - –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å!`);
             setTimeout(() => {
               if (contributor.isBot) {
                 // –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä—è–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
                 get().showNotification(`ü§ñ ${contributor.name}: "–û–î–ù–ê –ö–ê–†–¢–ê!"`, 'info', 3000);
                 setTimeout(() => {
                   get().declareOneCard(contributorId);
                 }, 1500); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 1.5 —Å–µ–∫—É–Ω–¥—ã
               } else {
                 // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ù–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò! –¢–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–æ—Ç–∞–º–∏
                 console.log(`üë§ [contributePenaltyCard] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${contributor.name} –¥–æ–ª–∂–µ–Ω —Å–∞–º –æ–±—ä—è–≤–∏—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞!"`);
                 // –ë–æ—Ç—ã –±—É–¥—É—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ checkOneCardStatus
               }
             }, 1000);
           }
           
           // –£–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
           const newContributorsNeeded = pendingPenalty.contributorsNeeded.filter(id => id !== contributorId);
           
           let newPendingPenalty = null;
           if (newContributorsNeeded.length > 0) {
             newPendingPenalty = {
               ...pendingPenalty,
               contributorsNeeded: newContributorsNeeded
             };
           } else {
             // –í–°–ï –ö–ê–†–¢–´ –°–û–ë–†–ê–ù–´ - —Ä–∞–∑–¥–∞–µ–º —à—Ç—Ä–∞—Ñ–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ —Å—Ç–æ–ø–∫–∏
             console.log(`‚ö†Ô∏è [contributePenaltyCard] –í—Å–µ —à—Ç—Ä–∞—Ñ–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å–æ–±—Ä–∞–Ω—ã - —Ä–∞–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`);
             setTimeout(() => {
               get().distributePenaltyCards(pendingPenalty.targetPlayerId);
             }, 500);
           }
           
          // –°–∫—Ä—ã–≤–∞–µ–º UI –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
          set({ 
            players: newPlayers,
            pendingPenalty: newPendingPenalty,
            showPenaltyCardSelection: false,
            penaltyCardSelectionPlayerId: null
          });
          
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å–ª–µ–¥—É—é—â–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          // –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –°–ê–ú –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ"
          
          // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ –∫–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–±—Ä–∞–ª–∞—Å—å
          setTimeout(() => {
            const updatedContributor = get().players.find(p => p.id === contributorId);
            if (updatedContributor) {
              console.log(`‚úÖ [contributePenaltyCard] –ü–†–û–í–ï–†–ö–ê: ${updatedContributor.name} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç ${updatedContributor.cards.length} –∫–∞—Ä—Ç`);
            }
          }, 100);
          
          // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è React
          setTimeout(() => {
            const currentPlayers = get().players;
             set({ players: [...currentPlayers] });
             
             // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
             get().checkOneCardStatus();
           }, 100);
           
           get().showNotification(`‚úÖ ${contributor.name} —Å–∫–∏–Ω—É–ª –∫–∞—Ä—Ç—É —à—Ç—Ä–∞—Ñ–∞!`, 'success', 2000);
           
           // –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–¥–∞–ª–∏ –∫–∞—Ä—Ç—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º —à—Ç—Ä–∞—Ñ
           if (newContributorsNeeded.length === 0) {
             console.log(`üí∏ [contributePenaltyCard] –®—Ç—Ä–∞—Ñ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${targetPlayer.name}`);
             
             // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
             const { oneCardDeclarations, oneCardTimers } = get();
             const newDeclarations = { ...oneCardDeclarations };
             const newTimers = { ...oneCardTimers };
             delete newDeclarations[pendingPenalty.targetPlayerId];
             delete newTimers[pendingPenalty.targetPlayerId];
             
             set({ 
               oneCardDeclarations: newDeclarations,
               oneCardTimers: newTimers
             });
             
             get().showNotification(`üí∏ ${targetPlayer.name} –ø–æ–ª—É—á–∏–ª —à—Ç—Ä–∞—Ñ–Ω—ã–µ –∫–∞—Ä—Ç—ã –∑–∞ –∑–∞–±—ã–≤—á–∏–≤–æ—Å—Ç—å!`, 'error', 4000);
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" - –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç
             setTimeout(() => {
               const finalPlayers = get().players;
               const finalTarget = finalPlayers.find(p => p.id === pendingPenalty.targetPlayerId);
               console.log(`üí∏ [contributePenaltyCard] –ò–¢–û–ì–û: ${finalTarget?.name} –∏–º–µ–µ—Ç ${finalTarget?.cards.length} –∫–∞—Ä—Ç (${finalTarget?.cards.filter(c => c.open).length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö)`);
               
               // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–µ–Ω—å–∫–æ–≤ –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ —à—Ç—Ä–∞—Ñ–∞
               finalPlayers.forEach(player => {
                 get().checkStage3Transition(player.id);
               });
               
               get().checkOneCardStatus();
               
               // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ UI
               const updatedPlayers = get().players;
               set({ players: [...updatedPlayers] });
             }, 1000);
           }
         },
         
         // –û—Ç–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
         cancelPenalty: () => {
           set({ pendingPenalty: null });
           get().showNotification(`‚ùå –®—Ç—Ä–∞—Ñ –æ—Ç–º–µ–Ω–µ–Ω`, 'info', 2000);
         },
         
         // –ù–∞–π—Ç–∏ —Ö—É–¥—à—É—é –∫–∞—Ä—Ç—É –≤ —Ä—É–∫–µ –¥–ª—è —Å–∫–∏–¥—ã–≤–∞–Ω–∏—è
         findWorstCardInHand: (cards: Card[], trumpSuit: string | null) => {
           if (cards.length === 0) return null;
           
           // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–ª–æ—Ö–∏—Ö –∫–∞—Ä—Ç:
           // 1. –ù–µ–∫–æ–∑—ã—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–Ω–≥–∞ (2-7)
           // 2. –ö–æ–∑—ã—Ä–∏ –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–Ω–≥–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∫–æ–∑—ã—Ä–Ω—ã—Ö)
           // 3. –õ—é–±–∞—è —Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è –∫–∞—Ä—Ç–∞
           
           const nonTrumpCards = cards.filter(c => trumpSuit && get().getCardSuit(c.image || '') !== trumpSuit);
           const trumpCards = cards.filter(c => trumpSuit && get().getCardSuit(c.image || '') === trumpSuit);
           
           // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–ª–æ—Ö–∏–µ –Ω–µ–∫–æ–∑—ã—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
           if (nonTrumpCards.length > 0) {
             const lowNonTrumpCards = nonTrumpCards.filter(c => {
               const rank = get().getCardRank(c.image || '');
               return rank <= 7; // 2, 3, 4, 5, 6, 7 - –ø–ª–æ—Ö–∏–µ –∫–∞—Ä—Ç—ã
             });
             
             if (lowNonTrumpCards.length > 0) {
               // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –Ω–∏–∑–∫—É—é –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é –∫–∞—Ä—Ç—É
               return lowNonTrumpCards.reduce((worst, card) => {
                 const worstRank = get().getCardRank(worst.image || '');
                 const cardRank = get().getCardRank(card.image || '');
                 return cardRank < worstRank ? card : worst;
               });
             }
             
             // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—é–±—É—é –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é –∫–∞—Ä—Ç—É (—Å–∞–º—É—é –Ω–∏–∑–∫—É—é)
             return nonTrumpCards.reduce((worst, card) => {
               const worstRank = get().getCardRank(worst.image || '');
               const cardRank = get().getCardRank(card.image || '');
               return cardRank < worstRank ? card : worst;
             });
           }
           
           // –ï—Å–ª–∏ –Ω–µ–∫–æ–∑—ã—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–µ—Ç, –±–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –∫–æ–∑—ã—Ä—å
           if (trumpCards.length > 0) {
             return trumpCards.reduce((worst, card) => {
               const worstRank = get().getCardRank(worst.image || '');
               const cardRank = get().getCardRank(card.image || '');
               return cardRank < worstRank ? card : worst;
             });
           }
           
           // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - —Å–∞–º—É—é –Ω–∏–∑–∫—É—é –∫–∞—Ä—Ç—É –∏–∑ –≤—Å–µ—Ö
           return cards.reduce((worst, card) => {
             const worstRank = get().getCardRank(worst.image || '');
             const cardRank = get().getCardRank(card.image || '');
             return cardRank < worstRank ? card : worst;
           });
         },
         
         // ===== –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–† –ú–ï–¢–û–î–´ =====
         
         // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
         syncGameState: (remoteGameState) => {
           const { multiplayerData } = get();
           if (!multiplayerData) return;
           
           console.log(`üåê [Multiplayer] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:`, remoteGameState);
           
           // –û—Å—Ç–æ—Ä–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è—è –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
           const stateUpdates: any = {};
           
           // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –∏–≥—Ä—ã
           if (remoteGameState.gameStage !== undefined) stateUpdates.gameStage = remoteGameState.gameStage;
           if (remoteGameState.currentPlayerId !== undefined) stateUpdates.currentPlayerId = remoteGameState.currentPlayerId;
           if (remoteGameState.trumpSuit !== undefined) stateUpdates.trumpSuit = remoteGameState.trumpSuit;
           if (remoteGameState.tableStack !== undefined) stateUpdates.tableStack = [...remoteGameState.tableStack];
           if (remoteGameState.stage2TurnPhase !== undefined) stateUpdates.stage2TurnPhase = remoteGameState.stage2TurnPhase;
           
           // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
           if (remoteGameState.players && Array.isArray(remoteGameState.players)) {
             const { players } = get();
             const updatedPlayers = players.map(localPlayer => {
               const remotePlayer = remoteGameState.players.find((p: any) => p.id === localPlayer.id);
               if (remotePlayer && !localPlayer.isUser) {
                 // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞/–¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
                 return {
                   ...localPlayer,
                   cards: remotePlayer.cards || localPlayer.cards,
                   penki: remotePlayer.penki || localPlayer.penki
                 };
               }
               return localPlayer;
             });
             stateUpdates.players = updatedPlayers;
           }
           
           // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
           set(stateUpdates);
         },
         
         // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
         sendPlayerMove: (moveData) => {
           const { multiplayerData } = get();
           if (!multiplayerData) return;
           
           console.log(`üåê [Multiplayer] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞:`, moveData);
           
           // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å WebSocket –∏–∑ useWebSocket
           // const { sendPlayerMove } = useWebSocket();
           // sendPlayerMove(moveData);
         },
         
         // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
         applyRemoteMove: (moveData) => {
           console.log(`üåê [Multiplayer] –ü—Ä–∏–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ö–æ–¥:`, moveData);
           
           const { multiplayerData } = get();
           if (!multiplayerData) return;
           
           try {
             // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ö–æ–¥–æ–≤
             switch (moveData.type) {
               case 'card_played':
                 // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—ã–≥—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
                 if (moveData.cardId && moveData.playerId) {
                   // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ —Å –∫–∞—Ä—Ç–æ–π
                 }
                 break;
                 
               case 'card_taken':
                 // –ò–≥—Ä–æ–∫ –≤–∑—è–ª –∫–∞—Ä—Ç—É
                 if (moveData.playerId) {
                   // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã
                 }
                 break;
                 
               case 'one_card_declared':
                 // –ò–≥—Ä–æ–∫ –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
                 if (moveData.playerId) {
                   get().declareOneCard(moveData.playerId);
                 }
                 break;
                 
               case 'penalty_card_contributed':
                 // –ò–≥—Ä–æ–∫ –æ—Ç–¥–∞–ª —à—Ç—Ä–∞—Ñ–Ω—É—é –∫–∞—Ä—Ç—É
                 if (moveData.contributorId && moveData.cardId) {
                   get().contributePenaltyCard(moveData.contributorId, moveData.cardId);
                 }
                 break;
                 
               default:
                 console.warn(`üåê [Multiplayer] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ö–æ–¥–∞:`, moveData.type);
             }
           } catch (error) {
             console.error(`üåê [Multiplayer] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö–æ–¥–∞:`, error);
           }
         },
         
         // ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ë–û–¢–û–í =====
         
         // –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
         // –î–õ–Ø –ò–ì–†–û–ö–û–í: –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2.545—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?"
         calculateAdaptiveDelay: () => {
           const now = performance.now();
           const frameTime = now - (window as any).lastFrameTime || 16.67; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞
           (window as any).lastFrameTime = now;
           
           // –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 2.545 —Å–µ–∫—É–Ω–¥—ã (–ò–ì–†–û–ö–ò)
           let delay = 2545;
           
           console.log(`üéØ [calculateAdaptiveDelay] –í—Ä–µ–º—è –∫–∞–¥—Ä–∞: ${frameTime.toFixed(2)}ms`);
           
           // –ï—Å–ª–∏ FPS —Ö—É–∂–µ 60 (frame time > 16.67ms), –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
           if (frameTime > 16.67) {
             const lagMs = frameTime - 16.67;
             const lagIncrements = Math.floor(lagMs / 100); // –ó–∞ –∫–∞–∂–¥—ã–µ 100ms –ª–∞–≥–∞
             const additionalDelay = lagIncrements * 1055; // –î–æ–±–∞–≤–ª—è–µ–º 1.055—Å
             delay += additionalDelay;
             
             console.log(`‚è≥ [calculateAdaptiveDelay] –õ–∞–≥ ${lagMs.toFixed(2)}ms, –¥–æ–±–∞–≤–ª—è–µ–º ${additionalDelay}ms –∑–∞–¥–µ—Ä–∂–∫–∏`);
           }
           
           console.log(`‚åõ [calculateAdaptiveDelay] –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ò–ì–†–û–ö–û–í: ${delay}ms`);
           return delay;
         },
         
         // –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞ "—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?" —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
         scheduleBotAskHowManyCards: (targetPlayerId: string) => {
           const { players, oneCardDeclarations } = get();
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç 1 –∫–∞—Ä—Ç—É –∏ –Ω–µ –æ–±—ä—è–≤–∏–ª
           const target = players.find(p => p.id === targetPlayerId);
           if (!target) return;
           
           // –ü–†–ê–í–ò–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–¢–ö–†–´–¢–´–ï –∫–∞—Ä—Ç—ã (–≤–∫–ª—é—á–∞—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–µ–Ω—å–∫–∏!)
           const openCards = target.cards.filter(c => c.open);
           if (openCards.length !== 1) {
             console.log(`ü§ñ [scheduleBotAskHowManyCards] –£ ${target.name} ${openCards.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç, –Ω–µ 1 - –æ—Ç–º–µ–Ω—è–µ–º`);
             return; // –ù–µ 1 –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
           }
           
           if (oneCardDeclarations[targetPlayerId]) {
             console.log(`ü§ñ [scheduleBotAskHowManyCards] ${target.name} —É–∂–µ –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω—É –∫–∞—Ä—Ç—É", –±–æ—Ç–∞–º —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ`);
             return; // –£–∂–µ –æ–±—ä—è–≤–∏–ª
           }
           
           const delay = get().calculateAdaptiveDelay();
           
           console.log(`ü§ñ [scheduleBotAskHowManyCards] –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –±–æ—Ç–æ–≤ –∫ ${target.name} —á–µ—Ä–µ–∑ ${delay}ms (—É –Ω–µ–≥–æ ${openCards.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç)`);
           
           setTimeout(() => {
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –≤—Å—ë –µ—â—ë –Ω–µ –æ–±—ä—è–≤–∏–ª–∞ "–æ–¥–Ω—É –∫–∞—Ä—Ç—É"
             const { players: currentPlayers, oneCardDeclarations: currentDeclarations } = get();
             
             if (currentDeclarations[targetPlayerId]) {
               console.log(`ü§ñ [scheduleBotAskHowManyCards] ${target.name} —É–∂–µ –æ–±—ä—è–≤–∏–ª, –æ—Ç–º–µ–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –±–æ—Ç–æ–≤`);
               return;
             }
             
             // –ù–∞–π–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–æ—Å–∏—Ç
             const botPlayers = currentPlayers.filter(p => p.isBot && p.id !== targetPlayerId);
             
             if (botPlayers.length > 0) {
               const randomBot = botPlayers[Math.floor(Math.random() * botPlayers.length)];
               
               console.log(`ü§ñ [scheduleBotAskHowManyCards] –ë–æ—Ç ${randomBot.name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É ${target.name}: "–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?"`);
               
               get().askHowManyCards(randomBot.id, targetPlayerId);
               
               // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
               get().showNotification(`ü§ñ ${randomBot.name}: "–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç —É ${target.name}?"`, 'info', 3000);
             }
           }, delay);
         }
    }),
    {
      name: 'pidr-game-storage',
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–Å –ò–ì–†–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ refresh
      partialize: (state) => ({
        // –û—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        isGameActive: state.isGameActive,
        gameMode: state.gameMode,
        players: state.players,
        currentPlayerId: state.currentPlayerId,
        deck: state.deck,
        playedCards: state.playedCards,
        lastPlayedCard: state.lastPlayedCard,
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–¥–∏–π P.I.D.R
        gameStage: state.gameStage,
        availableTargets: state.availableTargets,
        mustDrawFromDeck: state.mustDrawFromDeck,
        canPlaceOnSelf: state.canPlaceOnSelf,
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞
        turnPhase: state.turnPhase,
        revealedDeckCard: state.revealedDeckCard,
        canPlaceOnSelfByRules: state.canPlaceOnSelfByRules,
        skipHandAnalysis: state.skipHandAnalysis,
        
        // –í—Ç–æ—Ä–∞—è —Å—Ç–∞–¥–∏—è
        lastDrawnCard: state.lastDrawnCard,
        lastPlayerToDrawCard: state.lastPlayerToDrawCard,
        trumpSuit: state.trumpSuit,
        drawnHistory: state.drawnHistory,
        
        // –°–∏—Å—Ç–µ–º–∞ "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" –∏ —à—Ç—Ä–∞—Ñ–æ–≤
        oneCardDeclarations: state.oneCardDeclarations,
        oneCardTimers: state.oneCardTimers,
        playersWithOneCard: state.playersWithOneCard,
        pendingPenalty: state.pendingPenalty,
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ 2-–π —Å—Ç–∞–¥–∏–∏ (–¥—É—Ä–∞–∫)
        tableStack: state.tableStack,
        selectedHandCard: state.selectedHandCard,
        stage2TurnPhase: state.stage2TurnPhase,
        roundInProgress: state.roundInProgress,
        currentRoundInitiator: state.currentRoundInitiator,
        roundFinisher: state.roundFinisher,
        
        // –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        multiplayerData: state.multiplayerData,
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        stats: state.stats,
        settings: state.settings,
        gameCoins: state.gameCoins
      })
    }
  )
)