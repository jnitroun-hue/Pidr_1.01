// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏

export interface StoredRoom {
  id: string;
  code: string;
  name: string;
  host: string;
  players: number;
  maxPlayers: number;
  gameMode: 'casual' | 'competitive';
  hasPassword: boolean;
  isPrivate: boolean;
  status: 'waiting' | 'playing' | 'full';
  ping: number;
  difficulty: 'easy' | 'medium' | 'hard';
  createdAt: string;
  lastActivity: string;
}

const STORAGE_KEY = 'pidr_rooms';
const BROADCAST_CHANNEL = 'pidr_rooms_sync';

class RoomStorage {
  private broadcastChannel: BroadcastChannel | null = null;
  private listeners: ((rooms: StoredRoom[]) => void)[] = [];

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BroadcastChannel –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
    if (typeof window !== 'undefined' && 'BroadcastChannel' in window) {
      this.broadcastChannel = new BroadcastChannel(BROADCAST_CHANNEL);
      this.broadcastChannel.onmessage = (event) => {
        if (event.data.type === 'rooms_updated') {
          this.notifyListeners(event.data.rooms);
        }
      };
    }

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.cleanupOldRooms();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ localStorage
  getRooms(): StoredRoom[] {
    if (typeof window === 'undefined') return [];
    
    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      if (!stored) return [];
      
      const rooms: StoredRoom[] = JSON.parse(stored);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã (—Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)
      const now = new Date();
      const validRooms = rooms.filter(room => {
        const lastActivity = new Date(room.lastActivity);
        const ageMinutes = (now.getTime() - lastActivity.getTime()) / (1000 * 60);
        return ageMinutes < 10;
      });

      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º localStorage
      if (validRooms.length !== rooms.length) {
        this.saveRooms(validRooms);
      }

      return validRooms;
    } catch (error) {
      console.error('Error reading rooms from localStorage:', error);
      return [];
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã –≤ localStorage
  saveRooms(rooms: StoredRoom[]): void {
    if (typeof window === 'undefined') return;
    
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(rooms));
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      if (this.broadcastChannel) {
        this.broadcastChannel.postMessage({
          type: 'rooms_updated',
          rooms: rooms
        });
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      this.notifyListeners(rooms);
    } catch (error) {
      console.error('Error saving rooms to localStorage:', error);
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
  addRoom(room: Omit<StoredRoom, 'lastActivity'>): void {
    const rooms = this.getRooms();
    const newRoom: StoredRoom = {
      ...room,
      lastActivity: new Date().toISOString()
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–Ω–∞—Ç—ã —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    const existingIndex = rooms.findIndex(r => r.code === room.code);
    if (existingIndex >= 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É
      rooms[existingIndex] = newRoom;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      rooms.unshift(newRoom);
    }
    
    this.saveRooms(rooms);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
  updateRoom(code: string, updates: Partial<StoredRoom>): void {
    const rooms = this.getRooms();
    const index = rooms.findIndex(r => r.code === code);
    
    if (index >= 0) {
      rooms[index] = {
        ...rooms[index],
        ...updates,
        lastActivity: new Date().toISOString()
      };
      this.saveRooms(rooms);
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
  removeRoom(code: string): void {
    const rooms = this.getRooms();
    const filteredRooms = rooms.filter(r => r.code !== code);
    this.saveRooms(filteredRooms);
  }

  // –ù–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É –ø–æ –∫–æ–¥—É
  findRoom(code: string): StoredRoom | null {
    const rooms = this.getRooms();
    return rooms.find(r => r.code.toUpperCase() === code.toUpperCase()) || null;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–Ω–∞—Ç—ã
  updateActivity(code: string): void {
    this.updateRoom(code, { lastActivity: new Date().toISOString() });
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ (—É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤)
  joinRoom(code: string): boolean {
    const room = this.findRoom(code);
    if (!room) return false;
    
    if (room.players >= room.maxPlayers) return false;
    
    this.updateRoom(code, {
      players: room.players + 1,
      status: room.players + 1 >= room.maxPlayers ? 'full' : 'waiting'
    });
    
    return true;
  }

  // –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É (—É–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤)
  leaveRoom(code: string): boolean {
    const room = this.findRoom(code);
    if (!room) return false;
    
    const newPlayerCount = Math.max(0, room.players - 1);
    
    if (newPlayerCount === 0) {
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
      this.removeRoom(code);
    } else {
      this.updateRoom(code, {
        players: newPlayerCount,
        status: 'waiting'
      });
    }
    
    return true;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã
  cleanupOldRooms(): void {
    const rooms = this.getRooms();
    const now = new Date();
    
    const validRooms = rooms.filter(room => {
      const lastActivity = new Date(room.lastActivity);
      const ageMinutes = (now.getTime() - lastActivity.getTime()) / (1000 * 60);
      return ageMinutes < 10; // –ö–æ–º–Ω–∞—Ç—ã –∂–∏–≤—É—Ç 10 –º–∏–Ω—É—Ç
    });

    if (validRooms.length !== rooms.length) {
      this.saveRooms(validRooms);
      console.log(`üßπ Cleaned up ${rooms.length - validRooms.length} old rooms`);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç
  subscribe(callback: (rooms: StoredRoom[]) => void): () => void {
    this.listeners.push(callback);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      const index = this.listeners.indexOf(callback);
      if (index >= 0) {
        this.listeners.splice(index, 1);
      }
    };
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  private notifyListeners(rooms: StoredRoom[]): void {
    this.listeners.forEach(callback => {
      try {
        callback(rooms);
      } catch (error) {
        console.error('Error in room storage listener:', error);
      }
    });
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  clearAll(): void {
    if (typeof window === 'undefined') return;
    localStorage.removeItem(STORAGE_KEY);
    this.saveRooms([]);
  }

  // –ó–∞–∫—Ä—ã—Ç—å BroadcastChannel
  destroy(): void {
    if (this.broadcastChannel) {
      this.broadcastChannel.close();
      this.broadcastChannel = null;
    }
    this.listeners = [];
  }
}

// Singleton instance
export const roomStorage = new RoomStorage();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
if (typeof window !== 'undefined') {
  setInterval(() => {
    roomStorage.cleanupOldRooms();
  }, 2 * 60 * 1000);
}
