import { NextRequest, NextResponse } from 'next/server';

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ (—Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
const protectedPaths: string[] = [
  '/profile',
  '/game',
];

// –ü—É—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫—É–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
const authPath = '/auth';

export function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≥–ª–∞–≤–Ω–æ–π
  if (pathname === authPath || pathname === '/') {
    return NextResponse.next();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏ (cookie pidr_session)
  const sessionCookie = req.cookies.get('pidr_session')?.value;
  let isAuthenticated = false;

  if (sessionCookie) {
    try {
      const sessionData = JSON.parse(sessionCookie);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ userId –∏–ª–∏ telegramId
      const hasUserId = !!(sessionData.userId || sessionData.user_id || 
                          sessionData.telegramId || sessionData.telegram_id || 
                          sessionData.id);
      isAuthenticated = hasUserId;
    } catch (error) {
      // Cookie —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
      console.error('‚ùå Invalid session cookie:', error);
      isAuthenticated = false;
    }
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (!isAuthenticated && protectedPaths.some(path => pathname.startsWith(path))) {
    console.log(`üîí Redirecting to /auth from ${pathname} (no session)`);
    const authUrl = new URL(authPath, req.url);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    authUrl.searchParams.set('redirect', pathname);
    return NextResponse.redirect(authUrl);
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (isAuthenticated && pathname === authPath) {
    console.log(`‚úÖ Redirecting to / from /auth (already authenticated)`);
    const homeUrl = new URL('/', req.url);
    return NextResponse.redirect(homeUrl);
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\.png$|.*\\.jpg$|.*\\.jpeg$|.*\\.gif$|.*\\.svg$).*)',
  ],
}
