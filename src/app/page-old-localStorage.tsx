"use client";
import { useEffect, useState, Suspense } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { Spinner, Text, Flex } from '@chakra-ui/react';
import { MainMenu } from '../components/main_menu_component'

interface User {
  id: string;
  username: string;
  firstName?: string;
  lastName?: string;
  avatar?: string;
  rating: number;
  coins: number;
  gamesPlayed: number;
  gamesWon: number;
  telegramId?: string | null; // –î–û–ë–ê–í–õ–ï–ù–û
  photoUrl?: string | null;   // –î–û–ë–ê–í–õ–ï–ù–û
}

function HomeWithParams() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const searchParams = useSearchParams();
  const router = useRouter();


  // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    console.log('üéÆ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ - –ü–†–û–í–ï–†–ö–ê –ò–ì–†–û–ö–ê');
    
    const initializePlayer = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ Telegram WebApp –∑–∞–≥—Ä—É–∂–µ–Ω
      if (typeof window === 'undefined' || !window.Telegram?.WebApp) {
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
        createLocalPlayer();
        return;
      }
      
      const telegramUser = window.Telegram.WebApp.initDataUnsafe?.user;
      const telegramId = telegramUser?.id?.toString();
      
      if (!telegramId) {
        console.log('‚ö†Ô∏è –ù–µ—Ç Telegram ID, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
        createLocalPlayer();
        return;
      }
      
      try {
        // –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å localStorage
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)...');
        const response = await fetch('/api/auth', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            type: 'telegram',
            id: telegramId,
            username: telegramUser?.username || undefined,
            first_name: telegramUser?.first_name || undefined,
            last_name: telegramUser?.last_name || undefined,
            photo_url: telegramUser?.photo_url || undefined
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success && data.user) {
            console.log('‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', data.user);
            
            const existingUser: User = {
              id: data.user.id || `player_${telegramId}`,
              username: data.user.username || telegramUser?.first_name || '–ò–≥—Ä–æ–∫',
              firstName: data.user.first_name || telegramUser?.first_name || '–ò–≥—Ä–æ–∫',
              lastName: data.user.last_name || telegramUser?.last_name || '',
              telegramId: telegramId,
              coins: data.user.coins || 1000,
              rating: data.user.rating || 0,
              gamesPlayed: data.user.games_played || 0,
              gamesWon: data.user.games_won || 0,
              photoUrl: data.user.photo_url || telegramUser?.photo_url
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            localStorage.setItem('user', JSON.stringify(existingUser));
            localStorage.setItem('current_user', JSON.stringify(existingUser));
            
            // üîë –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!
            if (data.token) {
              localStorage.setItem('auth_token', data.token);
              console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
            } else {
              console.error('‚ùå –¢–û–ö–ï–ù –ù–ï –ü–û–õ–£–ß–ï–ù –û–¢ API!');
            }
            
            setUser(existingUser);
            setLoading(false);
            
            // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
            window.dispatchEvent(new CustomEvent('coinsUpdated', { 
              detail: { coins: existingUser.coins } 
            }));
            
            console.log('üöÄ –ò–ì–†–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£ (–∏–≥—Ä–æ–∫ –∏–∑ –±–∞–∑—ã)!');
            return;
          }
        }
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        console.log('üë§ –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
        createNewPlayer(telegramUser, telegramId);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä–æ–∫–∞:', error);
        console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API');
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        try {
          await createUserThroughAPI(telegramUser, telegramId);
        } catch (apiError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ API:', apiError);
          console.log('üîÑ –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback');
          createLocalPlayer();
        }
      }
    };
    
    const createUserThroughAPI = async (telegramUser: any | undefined, telegramId: string) => {
      console.log('üåê –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API...');
      
      const authData = {
        type: 'telegram',
        id: telegramId,
        username: telegramUser?.username || '',
        first_name: telegramUser?.first_name || '–ò–≥—Ä–æ–∫',
        last_name: telegramUser?.last_name || '',
        photo_url: telegramUser?.photo_url || null
      };
      
      const response = await fetch('/api/auth', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(authData)
      });
      
      if (!response.ok) {
        throw new Error(`API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.success && result.user && result.token) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API:', result.user);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.setItem('auth_token', result.token);
        localStorage.setItem('user', JSON.stringify(result.user));
        localStorage.setItem('current_user', JSON.stringify(result.user));
        
        // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
        window.dispatchEvent(new CustomEvent('coinsUpdated', { 
          detail: { coins: result.user.coins } 
        }));
        
        setUser(result.user);
        setLoading(false);
        
        console.log('üöÄ –ò–ì–†–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ API)!');
      } else {
        throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    };
    
    const createNewPlayer = (telegramUser: any | undefined, telegramId: string) => {
      const newUser: User = {
        id: `player_${telegramId}`, // –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô ID –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram ID!
        username: telegramUser?.first_name || '–ò–≥—Ä–æ–∫',
        firstName: telegramUser?.first_name || '–ò–≥—Ä–æ–∫', 
        lastName: telegramUser?.last_name || '',
        telegramId: telegramId,
        coins: 1000,
        rating: 0,
        gamesPlayed: 0,
        gamesWon: 0,
        photoUrl: telegramUser?.photo_url || null
      };

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ù–û–í–´–ô –∏–≥—Ä–æ–∫:', newUser);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      localStorage.setItem('user', JSON.stringify(newUser));
      localStorage.setItem('current_user', JSON.stringify(newUser));
      
      // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
      window.dispatchEvent(new CustomEvent('coinsUpdated', { 
        detail: { coins: newUser.coins } 
      }));
      
      setUser(newUser);
      setLoading(false);
      
      console.log('üöÄ –ò–ì–†–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£ (–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫)!');
    };
    
    const createLocalPlayer = () => {
      console.error('‚ùå –õ–û–ö–ê–õ–¨–ù–´–ï –ò–ì–†–û–ö–ò –û–¢–ö–õ–Æ–ß–ï–ù–´! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ë–î.');
      console.error('üì± –û—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É –≤ Telegram WebApp –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth/login');
      
      setLoading(false);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      alert('–î–ª—è –∏–≥—Ä—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp –∏–ª–∏ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É. –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
    };
    
    initializePlayer();
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const savePlayerToDatabase = async (playerData: User) => {
    if (!playerData.telegramId) {
      console.log('‚ö†Ô∏è –ù–µ—Ç Telegram ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É');
      return;
    }
    
    try {
      const response = await fetch('/api/auth', {
        method: 'PUT', // PUT –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: 'telegram',
          id: playerData.telegramId,
          username: playerData.username,
          first_name: playerData.firstName,
          last_name: playerData.lastName,
          coins: playerData.coins,
          rating: playerData.rating,
          games_played: playerData.gamesPlayed,
          games_won: playerData.gamesWon,
          photo_url: playerData.photoUrl
        })
      });
      
      if (response.ok) {
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É');
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É:', error);
    }
  };
  
  // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    const handleStatsUpdate = (event: CustomEvent) => {
      if (user) {
        const updatedUser = { ...user, ...event.detail };
        setUser(updatedUser);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('user', JSON.stringify(updatedUser));
        localStorage.setItem('current_user', JSON.stringify(updatedUser));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        savePlayerToDatabase(updatedUser);
      }
    };
    
    window.addEventListener('playerStatsUpdated', handleStatsUpdate as EventListener);
    
    return () => {
      window.removeEventListener('playerStatsUpdated', handleStatsUpdate as EventListener);
    };
  }, [user]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ URL
  useEffect(() => {
    const referralCode = searchParams.get('ref');
    if (referralCode && user) {
      handleReferralCode(referralCode);
    }
  }, [searchParams, user]);

  const handleReferralCode = async (referralCode: string) => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        localStorage.setItem('pending_referral_code', referralCode);
        alert('üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í–æ–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å 100 –º–æ–Ω–µ—Ç.');
        return;
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥
      const response = await fetch('/api/referral', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          action: 'use_referral',
          referralCode: referralCode
        })
      });

      const result = await response.json();
      if (result.success) {
        alert(`üéâ ${result.message}`);
        // –û—á–∏—â–∞–µ–º URL –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        const url = new URL(window.location.href);
        url.searchParams.delete('ref');
        window.history.replaceState({}, '', url.toString());
      } else {
        alert(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
      }
    } catch (error) {
      console.error('Error processing referral code:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
    }
  };

  const handleNavigate = (page: string) => {
    if (page === 'wallet') {
      window.location.href = '/wallet';
    } else if (page === 'profile') {
      window.location.href = '/profile';
    } else if (page === 'rating') {
      window.location.href = '/rating';
    } else if (page === 'rules') {
      window.location.href = '/rules';
    } else if (page === 'game') {
      window.location.href = '/game-setup';
    } else if (page === 'multiplayer') {
      window.location.href = '/multiplayer';
    } else if (page === 'new-room') {
      window.location.href = '/new-room';
    } else if (page === 'invite') {
      window.location.href = '/friends';
    } else if (page === 'shop') {
      window.location.href = '/shop';
    } else if (page === 'menu') {
      // –æ—Ç–∫—Ä—ã—Ç—å –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  };
  
  if (loading) {
    return (
      <Flex 
        minH="100vh" 
        alignItems="center" 
        justifyContent="center" 
        bg="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
        flexDirection="column"
      >
        <Spinner size="xl" color="white" />
        <Text mt={4} color="white" fontSize="lg">
          –ó–∞–≥—Ä—É–∑–∫–∞ P.I.D.R...
        </Text>
      </Flex>
    );
  }

  if (!user) {
    return null; // –ë—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω middleware'–æ–º
  }

  return <MainMenu onNavigate={handleNavigate} />;
}

export default function Home() {
  return (
    <Suspense fallback={<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}>
      <HomeWithParams />
    </Suspense>
  );
}
