'use client';

import { useState, useEffect, useRef } from 'react';
import { avatarCanvasGenerator } from '@/lib/image-generation/avatar-generator';
import { tableCanvasGenerator } from '@/lib/image-generation/table-generator';
import { gameAnimationSystem } from '@/lib/animations/game-animations';

/**
 * üé¨ –¢–ï–°–¢–û–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –î–õ–Ø –ê–í–ê–¢–ê–†–û–í –ò –ê–ù–ò–ú–ê–¶–ò–ô
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
 */

type AvatarTheme = 'classic' | 'neon' | 'retro' | 'cartoon' | 'robot';
type TableStyle = 'classic' | 'neon' | 'luxury';

interface GeneratedAvatar {
  name: string;
  theme: AvatarTheme;
  imageUrl: string;
  timestamp: number;
}

interface GeneratedTable {
  style: TableStyle;
  imageUrl: string;
  timestamp: number;
}

export default function TestAnimationsPage() {
  const [generatedAvatars, setGeneratedAvatars] = useState<GeneratedAvatar[]>([]);
  const [generatedTables, setGeneratedTables] = useState<GeneratedTable[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedTheme, setSelectedTheme] = useState<AvatarTheme>('classic');
  const [selectedTableStyle, setSelectedTableStyle] = useState<TableStyle>('luxury');
  
  const animationContainerRef = useRef<HTMLDivElement>(null);
  const testCardRef = useRef<HTMLDivElement>(null);
  const testTableRef = useRef<HTMLDivElement>(null);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
  const generateAvatar = async (name: string, theme: AvatarTheme) => {
    setIsGenerating(true);
    try {
      console.log(`üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è ${name} –≤ —Å—Ç–∏–ª–µ ${theme}`);
      const imageUrl = await avatarCanvasGenerator.generateCoolAvatar(name, { theme });
      
      const newAvatar: GeneratedAvatar = {
        name,
        theme,
        imageUrl,
        timestamp: Date.now()
      };

      setGeneratedAvatars(prev => [newAvatar, ...prev.slice(0, 7)]); // –û—Å—Ç–∞–≤–ª—è–µ–º 8 –∞–≤–∞—Ç–∞—Ä–æ–≤
      console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–∞
  const generateTable = async (style: TableStyle) => {
    setIsGenerating(true);
    try {
      console.log(`üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–æ–ª –≤ —Å—Ç–∏–ª–µ ${style}`);
      const imageUrl = await tableCanvasGenerator.generatePremiumTable(800, 500, style);
      
      const newTable: GeneratedTable = {
        style,
        imageUrl,
        timestamp: Date.now()
      };

      setGeneratedTables(prev => [newTable, ...prev.slice(0, 2)]); // –û—Å—Ç–∞–≤–ª—è–µ–º 3 —Å—Ç–æ–ª–∞
      console.log('‚úÖ –°—Ç–æ–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ª–∞:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–æ–≤
  const generateBotTeam = async () => {
    const botNames = ['AI-Destroyer', 'CyberBot', 'QuantumPlayer', 'NeuralNet', 'DeepMind', 'AlphaCard'];
    
    setIsGenerating(true);
    try {
      const avatars: GeneratedAvatar[] = [];
      
      for (const name of botNames) {
        const imageUrl = await avatarCanvasGenerator.generateBotAvatar(name);
        avatars.push({
          name,
          theme: 'robot',
          imageUrl,
          timestamp: Date.now()
        });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      
      setGeneratedAvatars(avatars);
      console.log('ü§ñ –ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–æ–≤:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  const testCardFlip = async () => {
    if (testCardRef.current) {
      await gameAnimationSystem.animateCardFlip(testCardRef.current, true);
      await new Promise(resolve => setTimeout(resolve, 1000));
      await gameAnimationSystem.animateCardFlip(testCardRef.current, false);
    }
  };

  const testTablePulse = () => {
    if (testTableRef.current) {
      gameAnimationSystem.animateTablePulse(testTableRef.current, '#ffd700');
      setTimeout(() => {
        if (testTableRef.current) {
          gameAnimationSystem.stopTablePulse(testTableRef.current);
        }
      }, 3000);
    }
  };

  const testFireworks = async () => {
    if (animationContainerRef.current) {
      await gameAnimationSystem.animateFireworks(animationContainerRef.current, 4000);
    }
  };

  const testConfetti = async () => {
    if (animationContainerRef.current) {
      await gameAnimationSystem.animateConfetti(animationContainerRef.current, 4000);
    }
  };

  const testVictoryGlow = async () => {
    const avatarElements = document.querySelectorAll('.test-avatar');
    if (avatarElements.length > 0) {
      await gameAnimationSystem.animateVictoryGlow(avatarElements[0] as HTMLElement);
    }
  };

  const playerNames = ['–ò–≥—Ä–æ–∫1', 'Player2', '–ì–µ–π–º–µ—Ä', 'ProGamer', 'Champion', 'Winner'];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 relative overflow-hidden">
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π */}
      <div 
        ref={animationContainerRef}
        className="fixed inset-0 pointer-events-none z-50"
      />

      <div className="max-w-7xl mx-auto relative z-10">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">
            üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏ –∞–Ω–∏–º–∞—Ü–∏–π
          </h1>
          <p className="text-gray-300">
            Canvas –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∏–≥—Ä—ã
          </p>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞–º–∏ */}
        <div className="bg-black/30 backdrop-blur-lg rounded-2xl p-6 mb-8 border border-purple-500/20">
          <h2 className="text-2xl font-bold text-white mb-4">üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤</h2>
          
          <div className="flex flex-wrap items-center gap-4 mb-6">
            {/* –í—ã–±–æ—Ä —Ç–µ–º—ã */}
            <div className="flex items-center gap-2">
              <label className="text-white font-medium">–¢–µ–º–∞:</label>
              <select
                value={selectedTheme}
                onChange={(e) => setSelectedTheme(e.target.value as AvatarTheme)}
                className="bg-gray-800 text-white px-3 py-2 rounded-lg border border-gray-600 focus:border-purple-500 focus:outline-none"
                disabled={isGenerating}
              >
                <option value="classic">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è</option>
                <option value="neon">–ù–µ–æ–Ω</option>
                <option value="retro">–†–µ—Ç—Ä–æ</option>
                <option value="cartoon">–ú—É–ª—å—Ç—è—à–Ω–∞—è</option>
                <option value="robot">–†–æ–±–æ—Ç</option>
              </select>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex gap-2">
              <button
                onClick={generateBotTeam}
                disabled={isGenerating}
                className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 disabled:from-gray-600 disabled:to-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200 disabled:cursor-not-allowed"
              >
                {isGenerating ? '‚è≥ –°–æ–∑–¥–∞–µ–º...' : 'ü§ñ –ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–æ–≤'}
              </button>
              
              <button
                onClick={() => setGeneratedAvatars([])}
                disabled={isGenerating}
                className="bg-red-600 hover:bg-red-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200 disabled:cursor-not-allowed"
              >
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
          </div>

          {/* –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {playerNames.map((name) => (
              <button
                key={name}
                onClick={() => generateAvatar(name, selectedTheme)}
                disabled={isGenerating}
                className="bg-gray-700 hover:bg-gray-600 disabled:bg-gray-800 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 disabled:cursor-not-allowed"
              >
                {name}
              </button>
            ))}
          </div>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞–º–∏ */}
        <div className="bg-black/30 backdrop-blur-lg rounded-2xl p-6 mb-8 border border-purple-500/20">
          <h2 className="text-2xl font-bold text-white mb-4">üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–æ–≤</h2>
          
          <div className="flex flex-wrap items-center gap-4 mb-4">
            <div className="flex items-center gap-2">
              <label className="text-white font-medium">–°—Ç–∏–ª—å:</label>
              <select
                value={selectedTableStyle}
                onChange={(e) => setSelectedTableStyle(e.target.value as TableStyle)}
                className="bg-gray-800 text-white px-3 py-2 rounded-lg border border-gray-600 focus:border-purple-500 focus:outline-none"
                disabled={isGenerating}
              >
                <option value="luxury">–†–æ—Å–∫–æ—à–Ω—ã–π</option>
                <option value="neon">–ù–µ–æ–Ω–æ–≤—ã–π</option>
                <option value="classic">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</option>
              </select>
            </div>

            <button
              onClick={() => generateTable(selectedTableStyle)}
              disabled={isGenerating}
              className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 disabled:from-gray-600 disabled:to-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200 disabled:cursor-not-allowed"
            >
              {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : 'üéØ –°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ª'}
            </button>
          </div>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π */}
        <div className="bg-black/30 backdrop-blur-lg rounded-2xl p-6 mb-8 border border-purple-500/20">
          <h2 className="text-2xl font-bold text-white mb-4">üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π</h2>
          
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
            <button
              onClick={testCardFlip}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200"
            >
              üé¥ –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç—ã
            </button>
            
            <button
              onClick={testTablePulse}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200"
            >
              üé≤ –ü—É–ª—å—Å–∞—Ü–∏—è —Å—Ç–æ–ª–∞
            </button>
            
            <button
              onClick={testFireworks}
              className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200"
            >
              üéÜ –§–µ–π–µ—Ä–≤–µ—Ä–∫–∏
            </button>
            
            <button
              onClick={testConfetti}
              className="bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200"
            >
              üéä –ö–æ–Ω—Ñ–µ—Ç—Ç–∏
            </button>
            
            <button
              onClick={testVictoryGlow}
              className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200"
            >
              ‚ú® –°–≤–µ—á–µ–Ω–∏–µ –ø–æ–±–µ–¥—ã
            </button>
          </div>

          {/* –¢–µ—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
          <div className="flex items-center justify-center gap-8 mt-6">
            <div
              ref={testCardRef}
              className="w-20 h-28 bg-gradient-to-b from-white to-gray-200 rounded-lg border-2 border-gray-400 flex items-center justify-center text-2xl font-bold text-gray-800 cursor-pointer hover:scale-105 transition-transform"
            >
              üé¥
            </div>
            
            <div
              ref={testTableRef}
              className="w-32 h-20 bg-gradient-to-b from-green-600 to-green-800 rounded-xl border-4 border-yellow-500 flex items-center justify-center text-white font-bold cursor-pointer"
            >
              –°–¢–û–õ
            </div>
          </div>
        </div>

        {/* –ì–∞–ª–µ—Ä–µ—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ */}
        {generatedTables.length > 0 && (
          <div className="bg-black/30 backdrop-blur-lg rounded-2xl p-6 mb-8 border border-purple-500/20">
            <h2 className="text-2xl font-bold text-white mb-4">üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {generatedTables.map((table, index) => (
                <div key={`${table.style}-${table.timestamp}`} className="group">
                  <div className="bg-gray-800/50 rounded-xl p-4 border border-gray-600/30 hover:border-purple-500/50 transition-all duration-300 hover:scale-105">
                    <div className="aspect-[8/5] mb-3 rounded-lg overflow-hidden bg-gray-900/50">
                      <img
                        src={table.imageUrl}
                        alt={`${table.style} table`}
                        className="w-full h-full object-contain"
                        loading="lazy"
                      />
                    </div>
                    <div className="text-center">
                      <div className="text-white font-medium">
                        {table.style.toUpperCase()} —Å—Ç–æ–ª
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ì–∞–ª–µ—Ä–µ—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ */}
        {generatedAvatars.length > 0 && (
          <div className="bg-black/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/20">
            <h2 className="text-2xl font-bold text-white mb-4">
              üë• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã ({generatedAvatars.length})
            </h2>
            
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4">
              {generatedAvatars.map((avatar, index) => (
                <div key={`${avatar.name}-${avatar.timestamp}`} className="group test-avatar">
                  <div className="bg-gray-800/50 rounded-xl p-3 border border-gray-600/30 hover:border-purple-500/50 transition-all duration-300 hover:scale-105">
                    {/* –ê–≤–∞—Ç–∞—Ä */}
                    <div className="aspect-square mb-2 rounded-lg overflow-hidden bg-gray-900/50">
                      <img
                        src={avatar.imageUrl}
                        alt={`${avatar.name} avatar`}
                        className="w-full h-full object-cover"
                        loading="lazy"
                      />
                    </div>
                    
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <div className="text-center">
                      <div className="text-white font-medium text-sm truncate">
                        {avatar.name}
                      </div>
                      <div className="text-gray-400 text-xs">
                        {avatar.theme}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
