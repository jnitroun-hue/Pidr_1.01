'use client'
import { useState, useMemo, useEffect, useRef } from 'react';
import Image from 'next/image';
import BottomNav from '../../components/BottomNav';
import styles from './GameTable.module.css';
import { useDragAndDrop } from '@/hooks/useDragAndDrop';
import type { Player, Card } from '../../types/game';
import type { Card as StoreCard } from '../../store/gameStore';
import { motion, AnimatePresence } from 'framer-motion';
import React from 'react';
import { ErrorBoundary } from '../../components/ErrorBoundary';
import { useGameStore } from '@/store/gameStore';
import { AIPlayer, AIDifficulty } from '@/lib/game/ai-player';
import MultiplayerGame from '@/components/MultiplayerGame';
import { useWebSocket } from '@/hooks/useWebSocket';
import { useTelegram } from '@/hooks/useTelegram';

const CARD_IMAGES = [
  '2_of_clubs.png','2_of_diamonds.png','2_of_hearts.png','2_of_spades.png',
  '3_of_clubs.png','3_of_diamonds.png','3_of_hearts.png','3_of_spades.png',
  '4_of_clubs.png','4_of_diamonds.png','4_of_hearts.png','4_of_spades.png',
  '5_of_clubs.png','5_of_diamonds.png','5_of_hearts.png','5_of_spades.png',
  '6_of_clubs.png','6_of_diamonds.png','6_of_hearts.png','6_of_spades.png',
  '7_of_clubs.png','7_of_diamonds.png','7_of_hearts.png','7_of_spades.png',
  '8_of_clubs.png','8_of_diamonds.png','8_of_hearts.png','8_of_spades.png',
  '9_of_clubs.png','9_of_diamonds.png','9_of_hearts.png','9_of_spades.png',
  '10_of_clubs.png','10_of_diamonds.png','10_of_hearts.png','10_of_spades.png',
  'ace_of_clubs.png','ace_of_diamonds.png','ace_of_hearts.png','ace_of_spades.png',
  'jack_of_clubs.png','jack_of_diamonds.png','jack_of_hearts.png','jack_of_spades.png',
  'king_of_clubs.png','king_of_diamonds.png','king_of_hearts.png','king_of_spades.png',
  'queen_of_clubs.png','queen_of_diamonds.png','queen_of_hearts.png','queen_of_spades.png',
];
const CARD_BACK = 'back.png';

// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é —Å—Ç–æ–ª–∞
const getTableDimensions = () => {
  const vw = Math.min(window.innerWidth, document.documentElement.clientWidth);
  const vh = Math.min(window.innerHeight, document.documentElement.clientHeight);
  
  const isMobile = vw <= 768;
  const isSmallMobile = vw <= 480;
  const isLandscape = vw > vh;
  
  // –†–∞–∑–º–µ—Ä—ã —Å—Ç–æ–ª–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
  let tableWidth, tableHeight;
  
  if (isSmallMobile) {
    tableWidth = Math.min(vw * 0.5, 200); // 50% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
    tableHeight = Math.min(vh * 0.25, 150); // 25% –æ—Ç –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
  } else if (isMobile) {
    tableWidth = Math.min(vw * 0.45, 280); // 45% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
    tableHeight = Math.min(vh * 0.25, 200); // 25% –æ—Ç –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
  } else {
    tableWidth = Math.min(vw * 0.35, 400); // 35% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    tableHeight = Math.min(vh * 0.3, 320); // 30% –æ—Ç –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
  }
  
  // –ü–æ–∑–∏—Ü–∏—è —Å—Ç–æ–ª–∞ (—Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞)
  const tableX = vw / 2;
  const tableY = vh / 2;
  
  return {
    width: tableWidth,
    height: tableHeight,
    centerX: tableX,
    centerY: tableY,
    // –†–∞–¥–∏—É—Å—ã –æ–≤–∞–ª–∞ —Å—Ç–æ–ª–∞
    radiusX: tableWidth / 2,
    radiusY: tableHeight / 2
  };
};

// –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ DevTools)
const getCirclePosition = (index: number, totalPlayers: number): { top: string; left: string } => {
  // –í–∞—à–∏ —Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ü–û –ß–ê–°–û–í–û–ô –°–¢–†–ï–õ–ö–ï (—Å–Ω–∏–∑—É —Å–ª–µ–≤–∞ ‚Üí –≤–ø—Ä–∞–≤–æ ‚Üí –≤–≤–µ—Ä—Ö ‚Üí –≤–ª–µ–≤–æ)
  const fixedPositions = [
    { left: '-52.4997%', top: '119.7888%' },    // –ò–≥—Ä–æ–∫ 1 (—Å–Ω–∏–∑—É —Å–ª–µ–≤–∞) - –ù–ê–ß–ê–õ–û
    { left: '10.9545%', top: '125.0384%' },     // –ò–≥—Ä–æ–∫ 2 (—Å–Ω–∏–∑—É —Ü–µ–Ω—Ç—Ä)
    { left: '75.0455%', top: '121.0384%' },     // –ò–≥—Ä–æ–∫ 3 (—Å–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞)
    { left: '110.5003%', top: '49.7888%' },     // –ò–≥—Ä–æ–∫ 4 (—Å–ø—Ä–∞–≤–∞ —Ü–µ–Ω—Ç—Ä)
    { left: '114.6837%', top: '-39.1274%' },    // –ò–≥—Ä–æ–∫ 5 (—Å–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞)
    { left: '65.6382%', top: '-89.6818%' },     // –ò–≥—Ä–æ–∫ 6 (—Å–≤–µ—Ä—Ö—É —Ü–µ–Ω—Ç—Ä-–ø—Ä–∞–≤–∞)
    { left: '5%', top: '-79.2089%' },           // –ò–≥—Ä–æ–∫ 7 (—Å–≤–µ—Ä—Ö—É —Ü–µ–Ω—Ç—Ä-–ª–µ–≤–∞)
    { left: '-57.3618%', top: '-49.6818%' },    // –ò–≥—Ä–æ–∫ 8 (—Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞)
    { left: '-68%', top: '35%' },               // –ò–≥—Ä–æ–∫ 9 (—Å–ª–µ–≤–∞ —Ü–µ–Ω—Ç—Ä) - –í–ê–®–ê –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê
  ];
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—à—É —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  return fixedPositions[index] || { left: '50%', top: '50%' };
};

function getFirstPlayerIdx(players: Player[]): number {
  for (let i = 0; i < players.length; i++) {
    if (players[i].isUser) return i;
  }
  return 0;
}

interface GamePageContentProps {
  initialPlayerCount?: number;
  isMultiplayer?: boolean;
  multiplayerData?: {
    roomId: string;
    roomCode: string;
    isHost: boolean;
  };
  onGameEnd?: () => void;
}

function GamePageContentComponent({ 
  initialPlayerCount = 4, 
  isMultiplayer = false, 
  multiplayerData,
  onGameEnd 
}: GamePageContentProps) {
  const { user } = useTelegram();
  
  const { 
    isGameActive, gameStage, turnPhase, stage2TurnPhase,
    players, currentPlayerId, deck, availableTargets,
    selectedHandCard, revealedDeckCard, tableStack, trumpSuit,
    oneCardDeclarations, oneCardTimers, playersWithOneCard, pendingPenalty,
    gameCoins,
    startGame, endGame, 
    drawCard, makeMove, onDeckClick, placeCardOnSelfByRules,
    selectHandCard, playSelectedCard, takeTableCards, showNotification,
    declareOneCard, askHowManyCards, contributePenaltyCard, cancelPenalty
  } = useGameStore();

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ tableStack —É–±—Ä–∞–Ω - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

  const [playerCount, setPlayerCount] = useState(initialPlayerCount);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å—ã)
  const [multiplayerRoom, setMultiplayerRoom] = useState<{
    id: string;
    code: string;
    isHost: boolean;
  } | null>(multiplayerData ? {
    id: multiplayerData.roomId,
    code: multiplayerData.roomCode,
    isHost: multiplayerData.isHost
  } : null);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    if (multiplayerData) {
      setMultiplayerRoom({
        id: multiplayerData.roomId,
        code: multiplayerData.roomCode,
        isHost: multiplayerData.isHost
      });
    }
  }, [multiplayerData]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
  useEffect(() => {
    if (isMultiplayer && !isGameActive && onGameEnd) {
      console.log('üéÆ [GamePageContent] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ, –≤—ã–∑—ã–≤–∞–µ–º onGameEnd');
      onGameEnd();
    }
  }, [isGameActive, isMultiplayer, onGameEnd]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
  useEffect(() => {
    console.log('üîß [GamePageContent] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π:', {
      selectHandCard: !!selectHandCard,
      playSelectedCard: !!playSelectedCard,
      takeTableCards: !!takeTableCards,
      makeMove: !!makeMove,
      onDeckClick: !!onDeckClick
    });
  }, [selectHandCard, playSelectedCard, takeTableCards, makeMove, onDeckClick]);
  const [dealt, setDealt] = useState(false);
  const [gameInitialized, setGameInitialized] = useState(false);
  const [previousGameStage, setPreviousGameStage] = useState(gameStage);

  // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  const seatScale = useMemo(() => {
    const n = players.length || playerCount;
    if (n >= 8) return 0.85;
    if (n >= 6) return 0.9;
    return 1; // 5 –∏ –º–µ–Ω—å—à–µ
  }, [players.length, playerCount]);

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç
  const currentTurnPlayer = players.find(p => p.id === currentPlayerId);
  const currentPlayerIndex = players.findIndex(p => p.id === currentPlayerId);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—á–µ–ª–æ–≤–µ–∫–∞ (–¥–ª—è UI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç)
  const humanPlayer = players.find(p => p.isUser);
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ò–ò –¥–ª—è –±–æ—Ç–æ–≤
  const [aiPlayers, setAiPlayers] = useState<Map<number, AIPlayer>>(new Map());
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ AI (race condition protection)
  const aiProcessingRef = useRef<string | null>(null);
  
  // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const [screenInfo, setScreenInfo] = useState({
    isMobile: false,
    isSmallMobile: false,
    isVerySmallMobile: false,
    isLandscape: false,
    isIPhone: false,
    isAndroid: false,
    viewportWidth: 0,
    viewportHeight: 0,
    safeArea: { top: 0, bottom: 0, left: 0, right: 0 }
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
  const [positionKey, setPositionKey] = useState(0);
  
  useEffect(() => {
    const updateScreenInfo = () => {
      const vw = Math.min(window.innerWidth, document.documentElement.clientWidth);
      const vh = Math.min(window.innerHeight, document.documentElement.clientHeight);
      const isMobile = vw <= 768;
      const isSmallMobile = vw <= 480;
      const isVerySmallMobile = vw <= 375; // iPhone SE –∏ –ø–æ–¥–æ–±–Ω—ã–µ
      const isLandscape = vw > vh;
      
      // –û—Å–æ–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è iPhone
      const isIPhone = /iPhone|iPod/.test(navigator.userAgent);
      const isAndroid = /Android/.test(navigator.userAgent);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º safe areas –¥–ª—è iOS –∏ Android
      const safeAreaTop = 
        window.screen && window.screen.height && window.innerHeight < window.screen.height 
          ? Math.max(0, (window.screen.height - window.innerHeight) / 2) 
          : 0;
      
      const newScreenInfo = {
        isMobile,
        isSmallMobile,
        isVerySmallMobile,
        isLandscape,
        isIPhone,
        isAndroid,
        viewportWidth: vw,
        viewportHeight: vh,
        safeArea: {
          top: safeAreaTop,
          bottom: isVerySmallMobile ? 120 : isSmallMobile ? 100 : isMobile ? 80 : 60, // –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è iPhone
          left: isIPhone ? 10 : 0, // –û—Ç—Å—Ç—É–ø—ã –ø–æ –±–æ–∫–∞–º –¥–ª—è iPhone
          right: isIPhone ? 10 : 0
        }
      };
      
      setScreenInfo(newScreenInfo);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
      setPositionKey(prev => prev + 1);
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    updateScreenInfo();
    
    // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    window.addEventListener('resize', updateScreenInfo);
    window.addEventListener('orientationchange', updateScreenInfo);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (Android)
    let orientationTimeout: NodeJS.Timeout;
    const handleOrientationChange = () => {
      clearTimeout(orientationTimeout);
      orientationTimeout = setTimeout(updateScreenInfo, 500);
    };
    
    window.addEventListener('orientationchange', handleOrientationChange);
    
    // –û—á–∏—Å—Ç–∫–∞
    return () => {
      window.removeEventListener('resize', updateScreenInfo);
      window.removeEventListener('orientationchange', updateScreenInfo);
      window.removeEventListener('orientationchange', handleOrientationChange);
      clearTimeout(orientationTimeout);
    };
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    const newAiPlayers = new Map<number, AIPlayer>();
    players.forEach(player => {
      if (player.isBot) {
        const playerId = typeof player.id === 'string' ? 
          parseInt(player.id.replace('player_', '')) : player.id;
        console.log(`ü§ñ [AI Init] –°–æ–∑–¥–∞–µ–º AI –¥–ª—è –±–æ—Ç–∞ ${player.name} (ID: ${player.id} -> ${playerId}, difficulty: ${player.difficulty || 'medium'})`);
        newAiPlayers.set(playerId, new AIPlayer(playerId, player.difficulty || 'medium'));
      }
    });
    console.log(`ü§ñ [AI Init] –í—Å–µ–≥–æ AI —Å–æ–∑–¥–∞–Ω–æ: ${newAiPlayers.size}, –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤:`, Array.from(newAiPlayers.keys()));
    setAiPlayers(newAiPlayers);
  }, [players]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ–Ω—å–∫–æ–≤
  useEffect(() => {
    if (gameStage !== previousGameStage) {
      setPreviousGameStage(gameStage);
    }
  }, [gameStage, previousGameStage]);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –ò–ò
  useEffect(() => {
    const { isGameActive, currentPlayerId, players, gameStage, stage2TurnPhase, deck, availableTargets, revealedDeckCard, trumpSuit, tableStack } = useGameStore.getState();
    
    if (!isGameActive || !currentPlayerId) {
      console.log(`ü§ñ [AI useEffect] –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞: isGameActive=${isGameActive}, currentPlayerId=${currentPlayerId}`);
      return;
    }
    
    const currentTurnPlayer = players.find(p => p.id === currentPlayerId);
    if (!currentTurnPlayer || !currentTurnPlayer.isBot) {
      console.log(`ü§ñ [AI useEffect] –ù–µ –±–æ—Ç –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: currentTurnPlayer=${currentTurnPlayer?.name}, isBot=${currentTurnPlayer?.isBot}`);
      return;
    }

    console.log(`ü§ñ [AI useEffect] –ó–ê–ü–£–°–ö AI –¥–ª—è –±–æ—Ç–∞ ${currentTurnPlayer.name}`);
    console.log(`ü§ñ [AI useEffect] –°–æ—Å—Ç–æ—è–Ω–∏–µ: gameStage=${gameStage}, stage2TurnPhase=${stage2TurnPhase}`);
    console.log(`ü§ñ [AI useEffect] –ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ: ${currentTurnPlayer.cards?.length || 0}, –Ω–∞ —Å—Ç–æ–ª–µ: ${tableStack?.length || 0}`);
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ AI (race condition protection)
    if (aiProcessingRef.current === currentPlayerId) {
      console.log(`üö´ [AI Protection] AI —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –¥–ª—è ${currentTurnPlayer.name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }
    
    // –°–¢–†–û–ì–ò–ï –ü–†–û–í–ï–†–ö–ò: –ò–ò –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥!
    console.log(`ü§ñ [AI Check] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞ ${currentTurnPlayer.name}:`);
    console.log(`ü§ñ [AI Check] - gameStage: ${gameStage}, turnPhase: ${turnPhase}, stage2TurnPhase: ${stage2TurnPhase}`);
    console.log(`ü§ñ [AI Check] - currentPlayerId: ${currentPlayerId}, player.id: ${currentTurnPlayer.id}`);
    console.log(`ü§ñ [AI Check] - –∏–≥—Ä–æ–∫.–∫–∞—Ä—Ç—ã: ${currentTurnPlayer.cards.length}, –æ—Ç–∫—Ä—ã—Ç—ã—Ö: ${currentTurnPlayer.cards.filter(c => c.open).length}`);
    console.log(`ü§ñ [AI Check] - –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞:`, currentTurnPlayer.cards.map(c => `${c.image}(${c.open ? 'open' : 'closed'})`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    if (gameStage === 2 || gameStage === 3) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ò–ò —Ö–æ–¥–∏—Ç—å –≤ —Ñ–∞–∑–∞—Ö 'selecting_card' –∏ 'waiting_beat' –¥–ª—è 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏–π
      if (stage2TurnPhase !== 'selecting_card' && stage2TurnPhase !== 'waiting_beat') {
        console.log(`üö´ [AI Check] –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –≤ —Ñ–∞–∑—É ${gameStage}-–π —Å—Ç–∞–¥–∏–∏: ${stage2TurnPhase}`);
        return;
      }
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—É—â–∏–º
      if (currentTurnPlayer?.id !== currentPlayerId) {
        console.log(`üö´ [AI Check] ID –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º ID —Ö–æ–¥–∞`);
        return;
      }
    } else if (gameStage === 1) {
      if (turnPhase !== 'analyzing_hand' && turnPhase !== 'waiting_deck_action') {
        console.log(`üö´ [AI Check] –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –≤ —Ñ–∞–∑—É 1-–π —Å—Ç–∞–¥–∏–∏: ${turnPhase}`);
        return;
      }
    }
    
    const playerIdNum = typeof currentPlayerId === 'string' ? 
      parseInt(currentPlayerId.replace('player_', '')) : currentPlayerId;
    console.log(`üîç [AI useEffect] currentPlayerId: ${currentPlayerId}, converted to: ${playerIdNum}`);
    
    const ai = aiPlayers.get(playerIdNum);
    if (!ai) {
      console.log(`üö® [AI useEffect] AI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerIdNum}, –¥–æ—Å—Ç—É–ø–Ω—ã–µ AI:`, Array.from(aiPlayers.keys()));
      return;
    }
    
    console.log(`‚úÖ [AI Check] –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ó–∞–ø—É—Å–∫–∞–µ–º AI –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${currentTurnPlayer.name}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    aiProcessingRef.current = currentPlayerId;
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –ò–ò –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    const makeAIMove = async () => {
      try {
        // –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        if (!currentTurnPlayer || !currentTurnPlayer.isBot || !players.length) {
          console.log(`üö® [makeAIMove] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–æ–¥–∞ –ò–ò`);
          aiProcessingRef.current = null;
          return;
        }
        
        const gameState = {
          players,
          currentPlayer: currentPlayerId,
          gameStage,
          deck,
          availableTargets,
          revealedDeckCard,
          tableStack,
          trumpSuit, // –ö–æ–∑—ã—Ä—å –∏–∑ gameStore (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
          stage2TurnPhase // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∑—É 2-–π —Å—Ç–∞–¥–∏–∏ –¥–ª—è AI
        };
        
        const decision = await ai.makeDecisionWithDelay(gameState);
      
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –ò–ò —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã
        if (gameStage === 1) {
        // –í 1-–π —Å—Ç–∞–¥–∏–∏ –ò–ò –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É: –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ ‚Üí –∫–æ–ª–æ–¥–∞ ‚Üí –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
        switch (decision.action) {
          case 'place_on_target':
            if (decision.targetPlayerId !== undefined) {
              const { makeMove } = useGameStore.getState();
              if (makeMove) makeMove(decision.targetPlayerId.toString());
            }
            break;
          case 'draw_card':
            // –í 1-–π —Å—Ç–∞–¥–∏–∏ –ò–ò –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–ª–æ–¥–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –∏–∑ —Ä—É–∫–∏
            const { onDeckClick } = useGameStore.getState();
            if (onDeckClick) onDeckClick();
            break;
          default:
            console.log('–ò–ò –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤ 1-–π —Å—Ç–∞–¥–∏–∏');
            break;
        }
      } else if (gameStage === 2 || gameStage === 3) {
        // –í–æ 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏—è—Ö AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É selectHandCard + playSelectedCard (–ø—Ä–∞–≤–∏–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
        console.log(`ü§ñ [AI Stage${gameStage}] –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ:`, decision);
        console.log(`ü§ñ [AI Stage${gameStage}] - tableStack.length: ${tableStack?.length || 0}`);
        console.log(`ü§ñ [AI Stage${gameStage}] - trumpSuit: ${trumpSuit}`);
        console.log(`ü§ñ [AI Stage${gameStage}] - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏`);
        switch (decision.action) {
          case 'play_card':
            const { selectHandCard, playSelectedCard } = useGameStore.getState();
            if (decision.cardToPlay && selectHandCard && playSelectedCard) {
              // –ù–∞–π–¥–µ–º –∫–∞—Ä—Ç—É –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞ –∏ –≤—ã–±–µ—Ä–µ–º –µ—ë
              if (currentTurnPlayer) {
                console.log(`ü§ñ [AI Stage${gameStage}] –ò—â–µ–º –∫–∞—Ä—Ç—É ${decision.cardToPlay?.image} —Å—Ä–µ–¥–∏:`, currentTurnPlayer.cards.map(c => `${c.image}(${c.open ? 'open' : 'closed'})`));
                
                const cardInHand = currentTurnPlayer.cards.find(c => 
                  c.image === decision.cardToPlay?.image && c.open
                );
                if (cardInHand) {
                  console.log(`ü§ñ [AI Stage${gameStage}] ‚úÖ –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É: ${cardInHand.image}`);
                  selectHandCard(cardInHand);
                  // –ò–≥—Ä–∞–µ–º –∫–∞—Ä—Ç—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê)
                  setTimeout(() => {
                    console.log(`ü§ñ [AI Stage${gameStage}] ‚úÖ –ò–≥—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É`);
                    playSelectedCard();
                  }, 400);
                } else {
                  console.log(`üö® [AI Stage${gameStage}] –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä—É–∫–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞:`, decision.cardToPlay?.image);
                  console.log(`üö® [AI Stage${gameStage}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã:`, currentTurnPlayer.cards.filter(c => c.open).map(c => c.image));
                  console.log(`üö® [AI Stage${gameStage}] –í—Å–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞:`, currentTurnPlayer.cards.map(c => `${c.image}(${c.open ? 'open' : 'closed'})`));
                  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
                  console.log(`ü§ñ [AI Stage${gameStage}] Fallback: –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥`);
                  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                  aiProcessingRef.current = null;
                }
              }
            } else {
              console.log(`üö® [AI Stage${gameStage}] –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏–≥—Ä—ã –∫–∞—Ä—Ç`);
            }
            break;
          case 'draw_card':
            // –í–æ 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏—è—Ö —ç—Ç–æ –∑–Ω–∞—á–∏—Ç "–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞"
            const { takeTableCards } = useGameStore.getState();
            if (takeTableCards) {
              console.log(`ü§ñ [AI Stage${gameStage}] –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞`);
              takeTableCards();
            } else {
              console.log(`üö® [AI Stage${gameStage}] –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ takeTableCards`);
            }
            break;
          case 'pass':
            console.log(`ü§ñ [AI Stage${gameStage}] –ò–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥`);
            // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤–∞ nextTurn()
            break;
          default:
            console.log(`üö® [AI Stage${gameStage}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, decision.action);
        }
      }
        
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
      aiProcessingRef.current = null;
        
    } catch (error) {
      console.error(`üö® [makeAIMove] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ö–æ–¥–µ –ò–ò:`, error);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      aiProcessingRef.current = null;
    }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –ò–ò —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê)
    const delay = (gameStage === 2 || gameStage === 3) ? 250 : 500;
    const timeoutId = setTimeout(makeAIMove, delay);
    
    return () => {
      clearTimeout(timeoutId);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ useEffect
      aiProcessingRef.current = null;
    };
  }, [isGameActive, currentPlayerId, gameStage, stage2TurnPhase, turnPhase]);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –∏–∑ gameStore
  useEffect(() => {
    if (!gameInitialized) {
      if (isGameActive && players.length > 0) {
        // –ò–ì–†–ê –£–ñ–ï –ó–ê–ü–£–©–ï–ù–ê - –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï REFRESH!
        console.log(`üéÆ [–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï] –ò–≥—Ä–∞ P.I.D.R. –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);
        console.log(`üéÆ [–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï] –°—Ç–∞–¥–∏—è: ${gameStage}, —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: ${currentPlayerId}`);
        console.log(`üéÆ [–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï] –§–∞–∑–∞ —Ö–æ–¥–∞: ${turnPhase}, stage2TurnPhase: ${stage2TurnPhase}`);
        
        setPlayerCount(players.length);
        setGameInitialized(true);
        setDealt(true); // –í–ê–ñ–ù–û: –∫–∞—Ä—Ç—ã —É–∂–µ —Ä–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏!
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        showNotification(`üîÑ –ò–≥—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å ${gameStage}-–π —Å—Ç–∞–¥–∏–∏`, 'success', 3000);
        
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ö–æ–¥ –±–æ—Ç–∞ - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —á–µ—Ä–µ–∑ useEffect –¥–ª—è AI
        const currentTurnPlayer = players.find(p => p.id === currentPlayerId);
        if (currentTurnPlayer?.isBot) {
          console.log(`ü§ñ [–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï] –ë–æ—Ç ${currentTurnPlayer.name} –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ö–æ–¥`);
        }
      } else {
        // –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        console.log('üéÆ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã...');
        setGameInitialized(true);
      }
    }
  }, [gameInitialized, isGameActive, players.length, gameStage, currentPlayerId, turnPhase, stage2TurnPhase, showNotification]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
  useEffect(() => {
    if (isGameActive && !dealt) {
      setDealt(true);
    }
  }, [isGameActive, dealt]);

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  const handleStartGame = () => {
    startGame('multiplayer', playerCount);
    setDealt(false);
    setGameInitialized(true);
  };

  // –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞—Ä—Ç
  
  // –ù–û–í–´–ô STATE –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–¥ –∏–≥—Ä–æ–∫–∞–º–∏
  const [playerMessages, setPlayerMessages] = useState<{[playerId: string]: {text: string; type: 'info' | 'warning' | 'success' | 'error'; timestamp: number}}>({});

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
  const showPlayerMessage = (playerId: string, text: string, type: 'info' | 'warning' | 'success' | 'error' = 'info', duration: number = 3000) => {
    setPlayerMessages(prev => ({
      ...prev,
      [playerId]: { text, type, timestamp: Date.now() }
    }));
    
    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      setPlayerMessages(prev => {
        const newMessages = { ...prev };
        delete newMessages[playerId];
        return newMessages;
      });
    }, duration);
  };

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –≤—Å–µ—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
  const showOpponentsCardCount = () => {
    if (!humanPlayer) return;
    
    console.log('üî¢ [showOpponentsCardCount] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –∏–≥—Ä–æ–∫–æ–º –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–æ—Å–∏–ª
    showPlayerMessage(humanPlayer.id, 'üîç –°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?', 'info', 2000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    const opponentsWithOneCard = players.filter(p => 
      p.id !== humanPlayer.id && 
      playersWithOneCard.includes(p.id)
    );
    
    if (opponentsWithOneCard.length > 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ —Å 1 –∫–∞—Ä—Ç–æ–π, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–µ—Ä–≤–æ–≥–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
      const targetPlayer = opponentsWithOneCard[0];
      console.log(`üéØ [showOpponentsCardCount] –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ç—Ä–∞—Ñ —É ${targetPlayer.name} —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É`);
      askHowManyCards(humanPlayer.id, targetPlayer.id);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å 1 –∫–∞—Ä—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  
      players
        .filter(p => p.id !== humanPlayer.id)
        .forEach((player, index) => {
          const openCards = player.cards.filter(c => c.open).length;
          
          setTimeout(() => {
            showPlayerMessage(
              player.id, 
              `${openCards} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç`, 
              'info', 
              4000
            );
          }, index * 800);
        });
    }
  };

  // –û–±—ä—è–≤–∏—Ç—å —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
  const announceLastCard = () => {
    if (!humanPlayer) return;
    
    const openCards = humanPlayer.cards.filter(c => c.open);
    console.log('1Ô∏è‚É£ [announceLastCard] –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã:', openCards.length);
    
    if (openCards.length === 1) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      declareOneCard(humanPlayer.id);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –∏–≥—Ä–æ–∫–æ–º –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è–≤–∏–ª
      showPlayerMessage(humanPlayer.id, '‚òùÔ∏è –û–î–ù–ê –ö–ê–†–¢–ê!', 'success', 4000);
      
      console.log(`üì¢ [announceLastCard] ${humanPlayer.name} –æ–±—ä—è–≤–∏–ª –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É!`);
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–¥ –∏–≥—Ä–æ–∫–æ–º
      showPlayerMessage(humanPlayer.id, `‚ùå –£ –≤–∞—Å ${openCards.length} –∫–∞—Ä—Ç!`, 'error', 3000);
      showNotification(`–ù–µ–ª—å–∑—è –æ–±—ä—è–≤–ª—è—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" - —É –≤–∞—Å ${openCards.length} –∫–∞—Ä—Ç`, 'error', 3000);
      console.warn(`‚ö†Ô∏è [announceLastCard] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${openCards.length} –∫–∞—Ä—Ç –≤–º–µ—Å—Ç–æ 1`);
    }
  };



  const canDrawCard = turnPhase === 'deck_card_revealed' && currentTurnPlayer?.id === currentPlayerId;
  const canClickDeck = turnPhase === 'showing_deck_hint' && currentTurnPlayer?.id === currentPlayerId;
  const waitingForTarget = turnPhase === 'waiting_target_selection';
  
  // –£–î–ê–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ canBeatTopCard –∏ shouldShowTakeButton - –∫–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É" —Ç–µ–ø–µ—Ä—å –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
  if (!isGameActive) {
    return (
      <div className={styles.gameContainer}>
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '100vh',
          color: '#e2e8f0',
          textAlign: 'center',
          padding: '20px'
        }}>
          <h2 style={{ marginBottom: '20px', fontSize: '24px' }}>P.I.D.R. Game</h2>
          <p style={{ marginBottom: '30px', opacity: 0.7 }}>
            –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–≥—Ä—É.
          </p>
          <button
            onClick={() => window.history.back()}
            style={{
              background: 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',
              color: '#fff',
              border: 'none',
              borderRadius: '12px',
              padding: '12px 24px',
              fontSize: '16px',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
          >
            ‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.gameContainer}>
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∑—ã—Ä–µ - —Ç–æ–ª—å–∫–æ —Å–æ 2-–π —Å—Ç–∞–¥–∏–∏ —Ä—è–¥–æ–º —Å –±—É—Ä–≥–µ—Ä –º–µ–Ω—é */}
      {isGameActive && gameStage >= 2 && trumpSuit && (
        <div style={{
          position: 'fixed',
          top: '15px',
          right: '70px', // –†—è–¥–æ–º —Å –±—É—Ä–≥–µ—Ä –º–µ–Ω—é
          zIndex: 1100,
          background: 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',
          color: '#fff',
          padding: '5px 10px', // –£–º–µ–Ω—å—à–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
          borderRadius: '12px',
          fontSize: '12px', // –£–º–µ–Ω—å—à–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
          fontWeight: 600,
          display: 'flex',
          alignItems: 'center',
          gap: '4px',
          boxShadow: '0 5px 12px rgba(99, 102, 241, 0.4)',
          backdropFilter: 'blur(8px)'
        }}>
          <span style={{ fontSize: '14px' }}>
            {trumpSuit === 'hearts' ? '‚ô•Ô∏è' : 
             trumpSuit === 'diamonds' ? '‚ô¶Ô∏è' : 
             trumpSuit === 'clubs' ? '‚ô£Ô∏è' : 
             trumpSuit === 'spades' ? '‚ô†Ô∏è' : ''}
          </span>
          –ö–æ–∑—ã—Ä—å
        </div>
      )}

      {!isGameActive ? (
        <div className={styles.setupScreen}>
          <h2>P.I.D.R. - –ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞</h2>
          
          {/* –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ */}
          <div className={styles.playerCountSelector}>
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {playerCount}</label>
            <input
              type="range"
              min="3"
              max="9"
              value={playerCount}
              onChange={(e) => setPlayerCount(Number(e.target.value))}
              className={styles.rangeSlider}
            />
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã */}
          <div className={styles.gameButtons}>
            <button onClick={handleStartGame} className={styles.startButton}>
              üéÆ –ò–≥—Ä–∞—Ç—å
            </button>
            
            <button 
              onClick={() => alert('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')} 
              className={styles.roomButton}
            >
              üè† –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
            </button>
            
            <button 
              onClick={() => alert('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')} 
              className={styles.roomButton}
            >
              üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            </button>
          </div>
        </div>
      ) : (
        <div className={styles.gameArea}>
          <div className={styles.tableBg}>
            <div 
              className={styles.tableCenter} 
              style={{ 
                transform: `translate(-50%, -50%)`,
                width: `${getTableDimensions().width}px`,
                height: `${getTableDimensions().height}px`
              }}
            >
              
              {/* –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã (—Å–ª–µ–≤–∞ –æ—Ç –∫–æ–ª–æ–¥—ã) */}
              {revealedDeckCard && (
                <div className={styles.revealedCardContainer}>
                  <div className={styles.revealedCard}>
                    <div 
                      className={styles.cardBackdrop} 
                      style={{ 
                        width: screenInfo.isVerySmallMobile ? 38 : screenInfo.isSmallMobile ? 43 : screenInfo.isMobile ? 48 : 53, 
                        height: screenInfo.isVerySmallMobile ? 58 : screenInfo.isSmallMobile ? 65 : screenInfo.isMobile ? 72 : 80,
                        background: 'white',
                        borderRadius: '8px',
                        position: 'absolute',
                        zIndex: -1
                      }} 
                    />
                    <Image 
                      src={revealedDeckCard.image ? `/img/cards/${revealedDeckCard.image}` : '/img/cards/back.png'} 
                      alt="revealed card" 
                      width={screenInfo.isVerySmallMobile ? 38 : screenInfo.isSmallMobile ? 43 : screenInfo.isMobile ? 48 : 53} 
                      height={screenInfo.isVerySmallMobile ? 58 : screenInfo.isSmallMobile ? 65 : screenInfo.isMobile ? 72 : 80}
                      className={styles.revealedCardImage}
                    />
                  </div>
                </div>
              )}

              {/* –ö–ê–†–¢–´ –ù–ê –°–¢–û–õ–ï –¥–ª—è 2-–π —Å—Ç–∞–¥–∏–∏ (–¥—É—Ä–∞–∫) */}
              {gameStage === 2 && (
                <div className={styles.tableCardsContainer}>
                  {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ */}
                  
                  {/* –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —É–±—Ä–∞–Ω–∞ - —Å—Ç–æ–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ */}
                  
                  {tableStack && tableStack.length > 0 ? (
                    <>
                      <AnimatePresence mode="popLayout">
                        {tableStack.map((card, index) => (
                          <motion.div
                            key={`table-card-${card.id}-${index}`}
                            initial={{ 
                              opacity: 0, 
                              scale: 0.8, 
                              y: -50,
                              rotateX: -90 
                            }}
                            animate={{ 
                              opacity: 1, 
                              scale: Math.max(0.75, 1 - ((tableStack.length - 1 - index) * 0.05)), // –ò–°–ü–†–ê–í–õ–ï–ù–û: –º–∏–Ω–∏–º—É–º 75%, –º–µ–Ω—å—à–µ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
                              y: 0,
                              rotateX: 0,
                              transition: {
                                type: "spring",
                                stiffness: 200,
                                damping: 15,
                                delay: index * 0.1
                              }
                            }}
                            exit={{ 
                              opacity: 0, 
                              scale: 0.8,
                              y: 50,
                              transition: { duration: 0.3 }
                            }}
                            className={`${styles.tableCard} ${index === tableStack.length - 1 ? styles.tableCardTop : ''}`}
                            style={{
                              left: `${-15 + index * 18}px`, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞
                              top: `${-10 + index * 5}px`, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–µ–Ω—å—à–µ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
                              zIndex: 200 + index // –í—ã—Å–æ–∫–∏–π z-index - –≤–µ—Ä—Ö–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–≤–µ—Ä—Ö –Ω–∏–∂–Ω–∏—Ö
                            }}
                          >
                            <Image 
                              src={card.image ? `/img/cards/${card.image}` : '/img/cards/back.png'} 
                              alt={`table card ${index}: ${card.image}`}
                              width={screenInfo.isVerySmallMobile ? 50 : screenInfo.isSmallMobile ? 55 : screenInfo.isMobile ? 60 : 70} 
                              height={screenInfo.isVerySmallMobile ? 72 : screenInfo.isSmallMobile ? 79 : screenInfo.isMobile ? 87 : 102}
                              className={styles.tableCardImage}
                              priority
                            />
                          </motion.div>
                        ))}
                      </AnimatePresence>
                      {/* –õ–µ–π–±–ª –¥–ª—è –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ —É–±—Ä–∞–Ω - –º–µ—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å—Ç–æ–ª—É */}
                    </>
                  ) : (
                    /* –õ–µ–π–±–ª —É–±—Ä–∞–Ω - –∫–æ–≥–¥–∞ —Å—Ç–æ–ª –ø—É—Å—Ç–æ–π –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º */
                    null
                  )}
                </div>
              )}

              {/* –ö–æ–ª–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–æ—Ä–∞ */}
              <div className={styles.dropZone}>
                <div 
                  className={styles.deckStack}
                  onClick={() => {
                    if (canClickDeck) {
                      onDeckClick();
                    } else if (canDrawCard) {
                      drawCard();
                    }
                  }}
                  style={{
                    cursor: (canDrawCard || canClickDeck) ? 'pointer' : 'default',
                    opacity: (canDrawCard || canClickDeck) ? 1 : 0.7
                  }}
                >
                  {deck.length > 0 && (
                    <Image 
                      src="/img/cards/back.png" 
                      alt="deck" 
                      width={screenInfo.isVerySmallMobile ? 32 : screenInfo.isSmallMobile ? 37 : screenInfo.isMobile ? 42 : 47} 
                      height={screenInfo.isVerySmallMobile ? 48 : screenInfo.isSmallMobile ? 53 : screenInfo.isMobile ? 60 : 67}
                      className={styles.deckCard}
                    />
                  )}
                  <div className={styles.deckCount}>{deck.length}</div>
                </div>
                
                {/* –í 1-–π —Å—Ç–∞–¥–∏–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É" - —Ç–æ–ª—å–∫–æ –∫–ª–∏–∫ –ø–æ –∫–æ–ª–æ–¥–µ */}
                {canDrawCard && gameStage > 1 && (
                  <button 
                    onClick={() => drawCard()}
                    className={styles.drawButton}
                  >
                    –í–∑—è—Ç—å –∫–∞—Ä—Ç—É
                  </button>
                )}
              </div>

              {/* –£–ë–†–ê–ù–û: –°—Ç–æ–ø–∫–∞ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞–ª–∞ —Ü–µ–Ω—Ç—Ä. –í –ø—Ä–∏–º–µ—Ä–µ –µ–µ –Ω–µ—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ. */}

              {/* –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–æ–ª–æ–¥–µ - –¢–û–õ–¨–ö–û –î–õ–Ø –ò–ì–†–û–ö–ê */}
              {gameStage === 1 && canClickDeck && !currentTurnPlayer?.isBot && (
                <div className={styles.deckHintContainer}>
                  <div className={styles.deckHintArrow}>üëÜ</div>
                  <div className={styles.deckHintText}>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–¥—É</div>
                </div>
              )}



              {/* –ò–≥—Ä–æ–∫–∏ –ø–æ –∫—Ä—É–≥—É */}
              {players.map((p, playerIndex) => {
                const position = getCirclePosition(playerIndex, players.length);
                const isCurrentPlayer = p.id === currentTurnPlayer?.id;
                const isCurrentTurn = p.id === players[currentPlayerIndex]?.id;
                // –ü–û–î–°–ö–ê–ó–ö–ò –¢–û–õ–¨–ö–û –î–õ–Ø –ß–ï–õ–û–í–ï–ö–ê (–Ω–µ –¥–ª—è –±–æ—Ç–æ–≤!)
                const showHintsForUser = currentTurnPlayer && !currentTurnPlayer.isBot;
                
                const isTargetAvailable = availableTargets.includes(playerIndex) && showHintsForUser;
                const isCurrentPlayerCard = p.id === currentPlayerId && turnPhase === 'analyzing_hand' && availableTargets.length > 0 && showHintsForUser;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–∞–∑—ã waiting_deck_action –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
                const canPlaceOnSelfInDeckAction = p.id === currentPlayerId && 
                                                   turnPhase === 'waiting_deck_action' && 
                                                   useGameStore.getState().canPlaceOnSelfByRules &&
                                                   showHintsForUser;
                
                const isClickableTarget = isTargetAvailable && (turnPhase === 'waiting_target_selection' || turnPhase === 'waiting_deck_action');
                const isClickableOwnCard = isCurrentPlayerCard || canPlaceOnSelfInDeckAction;
                
                // –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞)
                if (p.id === currentPlayerId && showHintsForUser) {
                  console.log(`üéØ [GamePageContent] –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ ${p.name}:`);
                  console.log(`üéØ [GamePageContent] - p.id: ${p.id}, currentPlayerId: ${currentPlayerId}, —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${p.id === currentPlayerId}`);
                  console.log(`üéØ [GamePageContent] - turnPhase: ${turnPhase}`);
                  console.log(`üéØ [GamePageContent] - availableTargets: [${availableTargets.join(', ')}], –¥–ª–∏–Ω–∞: ${availableTargets.length}`);
                  console.log(`üéØ [GamePageContent] - isCurrentPlayerCard: ${isCurrentPlayerCard}`);
                  console.log(`üéØ [GamePageContent] - canPlaceOnSelfInDeckAction: ${canPlaceOnSelfInDeckAction}`);
                  console.log(`üéØ [GamePageContent] - isClickableOwnCard: ${isClickableOwnCard}`);
                }
                
                if (isTargetAvailable && showHintsForUser) {
                  console.log(`üéØ [GamePageContent] –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –¶–ï–õ–ò ${p.name} (–∏–Ω–¥–µ–∫—Å ${playerIndex}):`);
                  console.log(`üéØ [GamePageContent] - isTargetAvailable: ${isTargetAvailable}`);
                  console.log(`üéØ [GamePageContent] - turnPhase: ${turnPhase}`);
                  console.log(`üéØ [GamePageContent] - isClickableTarget: ${isClickableTarget}`);
                }

                return (
                  <div
                    key={`${p.id}-${positionKey}`} // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
                    className={`${styles.playerSeat} ${isCurrentPlayer ? styles.currentPlayerSeat : ''} ${isCurrentTurn ? styles.playerTurn : ''} ${isTargetAvailable ? styles.highlightedTarget : ''}`}
                    style={{
                      position: 'absolute',
                      left: position.left,
                      top: position.top,
                      transform: `translate(-50%, -50%) scale(0.85)`, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± –∫–∞–∫ –≤ DevTools
                    }}
                  >
                    {/* –°–û–û–ë–©–ï–ù–ò–ï –ù–ê–î –ò–ì–†–û–ö–û–ú */}
                    {playerMessages[p.id] && (
                      <motion.div
                        initial={{ opacity: 0, y: -10, scale: 0.8 }}
                        animate={{ opacity: 1, y: -50, scale: 1 }}
                        exit={{ opacity: 0, y: -60, scale: 0.8 }}
                        transition={{ duration: 0.3 }}
                        style={{
                          position: 'absolute',
                          top: '-20px',
                          left: '50%',
                          transform: 'translateX(-50%)',
                          background: playerMessages[p.id].type === 'warning' ? 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)' :
                                      playerMessages[p.id].type === 'error' ? 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)' :
                                      playerMessages[p.id].type === 'success' ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)' :
                                      'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',
                          color: 'white',
                          padding: '6px 12px',
                          borderRadius: '12px',
                          fontSize: '11px',
                          fontWeight: '600',
                          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',
                          zIndex: 1000,
                          whiteSpace: 'nowrap',
                          border: '1px solid rgba(255, 255, 255, 0.2)',
                          backdropFilter: 'blur(4px)'
                        }}
                      >
                        {playerMessages[p.id].text}
                      </motion.div>
                    )}

                    {/* –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
                    <div className={styles.avatarWrap}>
                      <div className={styles.avatarContainer}>
                        {p.avatar && p.avatar.startsWith('data:') ? (
                          // SVG –∞–≤–∞—Ç–∞—Ä
                          <div 
                            className={styles.avatar}
                            style={{ 
                              width: screenInfo.isVerySmallMobile ? 26 : screenInfo.isSmallMobile ? 28 : screenInfo.isMobile ? 32 : 40,
                              height: screenInfo.isVerySmallMobile ? 26 : screenInfo.isSmallMobile ? 28 : screenInfo.isMobile ? 32 : 40,
                              borderRadius: '50%',
                              backgroundImage: `url(${p.avatar})`,
                              backgroundSize: 'cover',
                              border: isCurrentPlayer ? '2px solid #ffd700' : '1px solid rgba(255,255,255,0.2)',
                              boxShadow: isCurrentPlayer ? '0 0 10px #ffd700' : 'none'
                            }}
                          />
                        ) : (
                          // –û–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                          <Image 
                            src={p.avatar || '/img/player-avatar.svg'} 
                            alt="avatar" 
                            width={screenInfo.isVerySmallMobile ? 26 : screenInfo.isSmallMobile ? 28 : screenInfo.isMobile ? 32 : 40} 
                            height={screenInfo.isVerySmallMobile ? 26 : screenInfo.isSmallMobile ? 28 : screenInfo.isMobile ? 32 : 40} 
                            className={styles.avatar}
                            style={{
                              borderRadius: '50%',
                              border: isCurrentPlayer ? '2px solid #ffd700' : '1px solid rgba(255,255,255,0.2)',
                              boxShadow: isCurrentPlayer ? '0 0 10px #ffd700' : 'none'
                            }}
                          />
                        )}
                        {p.isBot && (
                          <div className={styles.botBadge} title={`AI (${p.difficulty || 'medium'})`}>
                            ü§ñ
                          </div>
                        )}
                      </div>
                      {/* –ò–º—è –†–Ø–î–û–ú —Å –∞–≤–∞—Ç–∞—Ä–æ–º (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ div) */}
                      <span 
                        className={styles.playerName} 
                        style={{ 
                          fontSize: screenInfo.isVerySmallMobile ? '9px' : screenInfo.isSmallMobile ? '10px' : screenInfo.isMobile ? '12px' : '14px', 
                          fontWeight: 600,
                          color: isCurrentPlayer ? '#ffd700' : 'white',
                          textShadow: isCurrentPlayer ? '0 0 10px #ffd700' : 'none',
                          whiteSpace: 'nowrap' /* –ò–º—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É */
                        }}
                      >
                        {p.name}
                        {isCurrentPlayer && <span style={{ marginLeft: 4 }}>üëë</span>}
                      </span>
                      {/* –°—á–µ—Ç—á–∏–∫ –û–¢–ö–†–´–¢–´–• –∫–∞—Ä—Ç –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤ –≤–æ 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏–∏ */}
                      {(gameStage === 2 || gameStage === 3) && (
                        <span style={{
                          color: p.id === humanPlayer?.id ? '#ffd700' : '#00ff88',
                          marginLeft: 4,
                          fontSize: '12px',
                          fontWeight: 'bold',
                          background: p.id === humanPlayer?.id ? 'rgba(255, 215, 0, 0.1)' : 'rgba(0, 255, 136, 0.1)',
                          padding: '2px 6px',
                          borderRadius: '8px',
                          border: p.id === humanPlayer?.id ? '1px solid rgba(255, 215, 0, 0.3)' : '1px solid rgba(0, 255, 136, 0.3)'
                        }}>
                          üÉè {p.cards.filter(c => c.open).length}
                        </span>
                      )}
                      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Ü–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ */}
                      {isTargetAvailable && showHintsForUser && <span style={{color:'#ffd700',marginLeft:4}}>üéØ</span>}
                    </div>
                    
                    {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ–Ω—å–∫–æ–≤ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç—ã */}
                    <div className={styles.cardsContainer}>
                      {/* –ü–µ–Ω—å–∫–∏ (–ø–æ–¥–ª–æ–∂–∫–∞) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –ø–µ–Ω—å–∫–∏ */}
                      {/* –í 3-–π —Å—Ç–∞–¥–∏–∏ –ø–µ–Ω—å–∫–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –≤ player.cards */}
                      <AnimatePresence mode="wait">
                        {p.penki && p.penki.length > 0 && gameStage === 2 && (
                          <motion.div 
                            key="penki-visible"
                            className={styles.penkiRow}
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0.8 }}
                            transition={{ duration: 0.3 }}
                          >
                            {p.penki.map((penkiCard, pi) => {
                              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–µ–Ω—å–∫–æ–≤ —Ç–æ–∂–µ
                              const playerPosition = getCirclePosition(playerIndex, players.length);
                              const isLeftSide = parseFloat(playerPosition.left) < 50;
                              const penkiOffset = isLeftSide ? pi * 10 : -pi * 10;
                              
                              return (
                              <motion.div
                                key={penkiCard.id}
                                className={`${styles.penkiCard} ${styles.visible}`}
                                style={{ 
                                  left: `${penkiOffset}px`,
                                  zIndex: pi + 1
                                }}
                                title={`–ü–µ–Ω—ë–∫ ${pi + 1} (–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ 3-–π —Å—Ç–∞–¥–∏–∏)`}
                                initial={{ opacity: 0, scale: 0.8, y: 10 }}
                                animate={{ opacity: 1, scale: 1, y: 0 }}
                                exit={{ opacity: 0, scale: 0.8, y: 10 }}
                                transition={{ 
                                  duration: 0.4,
                                  delay: pi * 0.1 
                                }}
                              >
                                <Image
                                  src="/img/cards/back.png"
                                  alt="penki"
                                  width={screenInfo.isSmallMobile ? 33 : screenInfo.isMobile ? 42 : 52} /* –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞ */
                                  height={screenInfo.isSmallMobile ? 48 : screenInfo.isMobile ? 60 : 75} /* –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞ */
                                  style={{ 
                                    borderRadius: '8px',
                                    opacity: 0.8
                                  }}
                                />
                              </motion.div>
                            );
                            })}
                          </motion.div>
                        )}
                      </AnimatePresence>
                      
                      {/* –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–≤–µ—Ä—Ö –ø–µ–Ω—å–∫–æ–≤ */}
                      {p.cards.length > 0 && (gameStage === 1 || gameStage === 3 || gameStage === 2) && (
                        <div className={styles.activeCardContainer}>
                          {p.cards.map((card, ci) => { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∫–∞—Ä—Ç—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
                            const visibleCards = p.cards;
                            const isTopCard = ci === visibleCards.length - 1; // –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑ –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç
                            
                            // –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏ –¥–ª—è isTopCard (—Ç–æ–ª—å–∫–æ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞)
                            if (p.id === currentPlayerId && showHintsForUser) {
                              console.log(`üéØ [GamePageContent] –ö–∞—Ä—Ç–∞ ${ci} –∏–≥—Ä–æ–∫–∞ ${p.name}: isTopCard = ${isTopCard}, visibleCards.length = ${visibleCards.length}`);
                            }
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–∏–Ω–≥–∞ –∫–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
                            const playerPosition = getCirclePosition(playerIndex, players.length);
                            const isLeftSide = parseFloat(playerPosition.left) < 50; // –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞
                            const spacing = screenInfo.isSmallMobile ? 12 : screenInfo.isMobile ? 13 : 15;
                            const cardOffset = isLeftSide ? ci * spacing : -ci * spacing;
                            
                            return (
                              <motion.div
                                key={card.id}
                                initial={{ opacity: 0, y: -40, rotateY: -180, scale: 0.5 }}
                                animate={{ 
                                  opacity: dealt ? 1 : 0, 
                                  y: 0, 
                                  rotateY: 0, 
                                  scale: 1,
                                  transition: {
                                    type: "spring",
                                    stiffness: 200,
                                    damping: 15
                                  }
                                }}
                                exit={{ opacity: 0, y: 40, rotateY: 180, scale: 0.5 }}
                                transition={{ 
                                  delay: (playerIndex * 0.15) + (ci * 0.08), 
                                  duration: 0.6,
                                  type: "spring",
                                  stiffness: 150,
                                  damping: 12
                                }}
                                whileHover={{ 
                                  scale: isClickableTarget && isTopCard ? 1.15 : 1.05,
                                  rotateY: 5,
                                  z: 20
                                }}
                                style={{ 
                                  position: 'absolute',
                                  left: `${cardOffset}px`,
                                  zIndex: ci + 10 // –ü–æ–≤–µ—Ä—Ö –ø–µ–Ω—å–∫–æ–≤
                                }}
                              >
                                <div
                                  className={`${styles.cardOnPenki} ${
                                    // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –∫–∞—Ä—Ç—ã –±–æ—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
                                    gameStage === 2 && p.isBot ? styles.closed :
                                    card.open ? styles.open : styles.closed
                                  } ${(isClickableTarget || isClickableOwnCard) && isTopCard ? styles.targetCard : ''}`}
                                  style={{ 
                                    cursor: (isClickableTarget || isClickableOwnCard) && isTopCard ? 'pointer' : 'default',
                                    transform: (isClickableTarget || isClickableOwnCard) && isTopCard ? 'scale(1.02)' : 'scale(1)',
                                    // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –∫–∞—Ä—Ç—ã –±–æ—Ç–æ–≤ –∏–º–µ—é—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
                                    width: (gameStage === 2 && p.isBot) ? 60 : (card.open ? 82 : 60), // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞
                                    height: (gameStage === 2 && p.isBot) ? 87 : (card.open ? 120 : 87) // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞
                                  }}
                                  onClick={() => {
                                    if (showHintsForUser) {
                                      console.log(`üéØ [GamePageContent] –ö–õ–ò–ö –ø–æ –∫–∞—Ä—Ç–µ ${p.name}, isTopCard: ${isTopCard}`);
                                      console.log(`üéØ [GamePageContent] - isClickableOwnCard: ${isClickableOwnCard}, isClickableTarget: ${isClickableTarget}`);
                                    }
                                    if (isTopCard) {
                                      if (isClickableOwnCard) {
                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –∫–∞—Ä—Ç–æ–π
                                        if (canPlaceOnSelfInDeckAction) {
                                          if (showHintsForUser) console.log(`‚úÖ [GamePageContent] –ö–ª–∏–∫ –ø–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ - –∫–ª–∞–¥–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º`);
                                          placeCardOnSelfByRules();
                                        } else if (isCurrentPlayerCard) {
                                          if (showHintsForUser) console.log(`‚úÖ [GamePageContent] –ö–ª–∏–∫ –ø–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ - –≤—ã–∑—ã–≤–∞–µ–º makeMove('initiate_move')`);
                                          makeMove('initiate_move');
                                        }
                                      } else if (isClickableTarget) {
                                        if (showHintsForUser) console.log(`‚úÖ [GamePageContent] –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –≤—ã–∑—ã–≤–∞–µ–º makeMove(${p.id})`);
                                        // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –¥–µ–ª–∞–µ–º —Ö–æ–¥
                                        makeMove(p.id);
                                      } else {
                                        if (showHintsForUser) console.log(`‚ùå [GamePageContent] –ö–∞—Ä—Ç–∞ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞`);
                                      }
                                    } else {
                                      if (showHintsForUser) console.log(`‚ùå [GamePageContent] –ö–ª–∏–∫ –Ω–µ –ø–æ –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–µ`);
                                    }
                                  }}
                                >
                                  <Image
                                    src={
                                      // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –∫–∞—Ä—Ç—ã –±–æ—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã—Ç—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Ç–∫—Ä—ã—Ç—ã
                                      (gameStage as number) === 2 && p.isBot ? 
                                        `/img/cards/back.png` :
                                      // –í 1-–π —Å—Ç–∞–¥–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                                      (card.open && card.image ? `/img/cards/${card.image}` : `/img/cards/back.png`)
                                    }
                                    alt={
                                      (gameStage === 2 && p.isBot) ? 'back' :
                                      (card.open ? 'card' : 'back')
                                    }
                                    width={
                                      // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –∫–∞—Ä—Ç—ã –±–æ—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É
                                      (gameStage === 2 && p.isBot) ?
                                        (screenInfo.isSmallMobile ? 37 : screenInfo.isMobile ? 45 : 60) :
                                      card.open ? 
                                        (screenInfo.isSmallMobile ? 52 : screenInfo.isMobile ? 60 : 82) : // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞
                                        (screenInfo.isSmallMobile ? 37 : screenInfo.isMobile ? 45 : 60) // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞
                                    }
                                    height={
                                      // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –∫–∞—Ä—Ç—ã –±–æ—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É
                                      (gameStage === 2 && p.isBot) ?
                                        (screenInfo.isSmallMobile ? 52 : screenInfo.isMobile ? 63 : 87) :
                                      card.open ? 
                                        (screenInfo.isSmallMobile ? 75 : screenInfo.isMobile ? 87 : 120) : // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞
                                        (screenInfo.isSmallMobile ? 52 : screenInfo.isMobile ? 63 : 87) // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞
                                    }
                                    draggable={false}
                                    style={{
                                      borderRadius: 0,
                                      transition: 'all 0.3s ease-in-out'
                                    }}
                                  />
                                 </div>
                               </motion.div>
                             );
                           })}
                         </div>
                       )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ –≤–Ω–∏–∑—É - —Ç–æ–ª—å–∫–æ –≤–æ 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏—è—Ö –ò –¢–û–õ–¨–ö–û –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ */}
          {isGameActive && humanPlayer && humanPlayer.cards.length > 0 && gameStage >= 2 && (
            <div className={styles.playerHand}>
              <div className={styles.handTitle}>
                {gameStage === 2 && stage2TurnPhase === 'selecting_card' && humanPlayer.id === currentPlayerId ? 
                  'üéØ –í–´–ë–ï–†–ò–¢–ï –ö–ê–†–¢–£' : 
                  'üé¥ –í–∞—à–∏ –∫–∞—Ä—Ç—ã'} ({humanPlayer.cards.filter(c => c.open).length})
                
                {/* –ö–Ω–æ–ø–∫–∏ –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ */}
                <div style={{ marginLeft: '15px', display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '5px' }}>
                  {/* –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ */}
                  {gameStage === 2 && tableStack.length > 0 && humanPlayer?.id === currentPlayerId && (
                    <button 
                      className={styles.takeCardFromTableButton}
                      onClick={() => {
                        console.log('üÉè [GamePageContent] –í–∑—è—Ç—å –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É —Å–æ —Å—Ç–æ–ª–∞');
                        takeTableCards();
                      }}
                    >
                      üì• –í–∑—è—Ç—å –∫–∞—Ä—Ç—É
                    </button>
                  )}
                  
                  {/* –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞—Ä—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —à—Ç—Ä–∞—Ñ–æ–≤ */}
                  {gameStage === 2 && humanPlayer && (() => {
                    const humanOpenCards = humanPlayer.cards.filter(c => c.open).length;
                    const humanNeedsToDeclaree = oneCardTimers[humanPlayer.id] && !oneCardDeclarations[humanPlayer.id];
                    const someoneHasOneCard = playersWithOneCard.some(playerId => playerId !== humanPlayer.id);
                    
                    return (
                      <>
                        {/* –ö–Ω–æ–ø–∫–∞ "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –∫–æ–≥–¥–∞ —É –∏–≥—Ä–æ–∫–∞ 1 –∫–∞—Ä—Ç–∞ –∏ –∞–∫—Ç–∏–≤–µ–Ω —Ç–∞–π–º–µ—Ä */}
                        {humanNeedsToDeclaree && (
                          <div className={styles.cardCountButtonsContainer}>
                            <button 
                              className={styles.cardCountButton}
                              onClick={() => {
                                console.log('üÉè [GamePageContent] –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞!');
                                announceLastCard();
                              }}
                              style={{ 
                                background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                                animation: 'pulseRed 1s infinite',
                                boxShadow: '0 0 20px rgba(239, 68, 68, 0.6)'
                              }}
                            >
                              ‚ö†Ô∏è –û–î–ù–ê –ö–ê–†–¢–ê! (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
                            </button>
                          </div>
                        )}
                        
                        {/* –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è */}
                        {humanOpenCards === 1 && !humanNeedsToDeclaree && !oneCardDeclarations[humanPlayer.id] && (
                          <div className={styles.cardCountButtonsContainer}>
                            <button 
                              className={styles.cardCountButton}
                              onClick={() => {
                                console.log('üÉè [GamePageContent] –î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞!');
                                announceLastCard();
                              }}
                              style={{ background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)' }}
                            >
                              ‚òùÔ∏è –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!
                            </button>
                          </div>
                        )}
                        
                        {/* –ö–Ω–æ–ø–∫–∞ "–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —É –∫–æ–≥–æ-—Ç–æ –µ—Å—Ç—å 1 –∫–∞—Ä—Ç–∞ (–º–æ–∂–Ω–æ –ø–æ–π–º–∞—Ç—å) */}
                        {someoneHasOneCard && !pendingPenalty && (
                          <div className={styles.cardCountButtonsContainer}>
                            <button 
                              className={styles.cardCountButton}
                              onClick={() => {
                                console.log('üÉè [GamePageContent] –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ç—Ä–∞—Ñ—ã: —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?');
                                showOpponentsCardCount();
                              }}
                              style={{ 
                                background: 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',
                                border: '2px solid #ffd700'
                              }}
                            >
                              üéØ –°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?
                            </button>
                          </div>
                        )}
                        
                        {/* –ò–Ω–¥–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à—Ç—Ä–∞—Ñ–∞ */}
                        {pendingPenalty && humanPlayer && (
                          <div className={styles.cardCountButtonsContainer}>
                            {pendingPenalty.contributorsNeeded.includes(humanPlayer.id) ? (
                              <div 
                                className={styles.cardCountButton}
                                style={{ 
                                  background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                                  animation: 'pulse 1s infinite',
                                  border: '2px solid #ffd700',
                                  cursor: 'default'
                                }}
                              >
                                üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —à—Ç—Ä–∞—Ñ–∞!
                              </div>
                            ) : (
                              <div 
                                className={styles.cardCountButton}
                                style={{ 
                                  background: 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)',
                                  cursor: 'default'
                                }}
                              >
                                ‚è≥ –ñ–¥–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...
                              </div>
                            )}
                          </div>
                        )}
                      </>
                    );
                  })()}
                </div>
              </div>
              <div className={styles.handCards}>
                {humanPlayer.cards.map((card, index) => {
                  const isSelectableStage1 = gameStage === 1 && 
                    humanPlayer.id === currentPlayerId && 
                    !humanPlayer.isBot;
                  const isSelectableStage2 = card.open && 
                    gameStage === 2 && 
                    stage2TurnPhase === 'selecting_card' && 
                    humanPlayer.id === currentPlayerId && 
                    !humanPlayer.isBot;
                  const isSelectablePenalty = pendingPenalty && 
                    humanPlayer && 
                    pendingPenalty.contributorsNeeded.includes(humanPlayer.id) && 
                    card.open;
                  const isSelected = selectedHandCard?.id === card.id;
                  const baseStep = 10;
                  const mobileSteps = {
                    open: screenInfo.isSmallMobile ? 18 : screenInfo.isMobile ? 21 : 25,
                    closed: screenInfo.isSmallMobile ? 14 : screenInfo.isMobile ? 16 : 18
                  };
                  const step = card.open ? mobileSteps.open : mobileSteps.closed;
                  const cardOffset = index * step;
                  const mobileCardSizes = {
                    open: screenInfo.isVerySmallMobile 
                      ? { w: 60, h: 90 } 
                      : screenInfo.isSmallMobile 
                        ? { w: 70, h: 105 } 
                        : screenInfo.isMobile 
                          ? { w: 76, h: 115 } 
                          : { w: 84, h: 126 }, // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
                    closed: screenInfo.isVerySmallMobile 
                      ? { w: 50, h: 75 } 
                      : screenInfo.isSmallMobile 
                        ? { w: 58, h: 87 } 
                        : screenInfo.isMobile 
                          ? { w: 64, h: 96 } 
                          : { w: 70, h: 105 }
                  };
                  const size = card.open ? mobileCardSizes.open : mobileCardSizes.closed;
                  
                  return (
                    <div 
                      key={card.id} 
                      className={`${styles.handCard} ${card.open ? styles.open : styles.closed} ${(isSelectableStage1 || isSelectableStage2 || isSelectablePenalty) ? styles.playable : ''}`}
                      style={{ 
                        position: 'absolute',
                        left: `${cardOffset}px`,
                        top: isSelected ? '-10px' : '0px',
                        zIndex: index + 1,
                        transform: isSelected ? 'scale(1.07)' : 'scale(1)',
                        filter: isSelected ? 'drop-shadow(0 0 10px #00ff00)' : 'none',
                        transition: 'all 0.2s ease-in-out',
                        width: `${size.w}px`,
                        height: `${size.h}px`,
                      }}
                      onClick={() => {
                        // –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –∏–¥–µ—Ç —à—Ç—Ä–∞—Ñ - –∏–≥—Ä–æ–∫ –æ—Ç–¥–∞–µ—Ç –∫–∞—Ä—Ç—É
                        if (pendingPenalty && humanPlayer && pendingPenalty.contributorsNeeded.includes(humanPlayer.id)) {
                          if (!card.open) {
                            showNotification('‚ùå –ú–æ–∂–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã!', 'error', 3000);
                            return;
                          }
                          
                          console.log(`üí∏ [GamePageContent] –ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É ${card.image} –¥–ª—è —à—Ç—Ä–∞—Ñ–∞`);
                          contributePenaltyCard(humanPlayer.id, card.id);
                          return;
                        }
                        
                        // 1-—è —Å—Ç–∞–¥–∏—è: —Ö–æ–¥–∏–º –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
                        if (gameStage === 1 && 
                            humanPlayer.id === currentPlayerId && 
                            !humanPlayer.isBot) {
                          console.log(`üéÆ [HandCard Click] –•–æ–¥ –≤ 1-–π —Å—Ç–∞–¥–∏–∏: ${card.image}`);
                          makeMove(card.id);
                          return;
                        }
                        
                        // 2-—è –∏ 3-—è —Å—Ç–∞–¥–∏–∏: —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥
                        if (isSelectableStage2 && 
                            gameStage === 2 && 
                            humanPlayer.id === currentPlayerId && 
                            !humanPlayer.isBot) {
                          console.log(`üéØ [HandCard Click] –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É: ${card.image}`);
                          selectHandCard(card);
                        } else {
                          console.log(`üö´ [HandCard Click] –ö–ª–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: isSelectableStage2=${isSelectableStage2}, gameStage=${gameStage}, isCurrentPlayer=${humanPlayer.id === currentPlayerId}, isBot=${humanPlayer.isBot}`);
                        }
                      }}
                    >
                      <div className={styles.cardBase} style={{ width: '100%', height: '100%' }}>
                        <Image
                          src={card.open && card.image ? `/img/cards/${card.image}` : `/img/cards/back.png`}
                          alt={card.open ? 'card' : 'back'}
                          width={size.w}
                          height={size.h}
                          draggable={false}
                          priority
                          style={{ 
                            borderRadius: 0,
                            boxShadow: card.open ? '0 2px 10px rgba(0, 0, 0, 0.35)' : '0 2px 8px rgba(0, 0, 0, 0.5)'
                          }}
                        />
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* –ë—É—Ä–≥–µ—Ä –º–µ–Ω—é */}
          <div className={styles.gameControls}>
            <div className={styles.burgerMenu}>
              <button className={styles.burgerButton}>
                <div className={styles.burgerLines}>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </button>
              <div className={styles.burgerDropdown}>
                {/* –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–≤—ã—Ö –º–æ–Ω–µ—Ç */}
                <div className={styles.menuCoinsBalance}>
                  <div className={styles.coinsIcon}>ü™ô</div>
                  <div className={styles.coinsInfo}>
                    <div className={styles.coinsAmount}>{gameCoins.toLocaleString()}</div>
                    <div className={styles.coinsLabel}>–ú–æ–Ω–µ—Ç</div>
                  </div>
                </div>
                
                <div className={styles.menuDivider}></div>
                
                <button onClick={() => window.history.back()} className={styles.menuItem}>
                  ‚Üê –ù–∞–∑–∞–¥
                </button>
                <button onClick={() => window.location.reload()} className={styles.menuItem}>
                  üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                </button>
                <button onClick={() => {
                  endGame();
                  if (isMultiplayer && onGameEnd) {
                    onGameEnd();
                  }
                }} className={styles.menuItem}>
                  üö´ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
      {isMultiplayer && multiplayerRoom && (
        <MultiplayerGame
          roomId={multiplayerRoom.id}
          roomCode={multiplayerRoom.code}
          isHost={multiplayerRoom.isHost}
          onGameStateUpdate={(gameState) => {
            console.log('üîÑ [Multiplayer] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', gameState);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
          }}
        />
      )}

      <BottomNav />
    </div>
  );
}

// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ ErrorBoundary —á—Ç–æ–±—ã –∏–≥—Ä–∞ –Ω–µ –≤—ã–ª–µ—Ç–∞–ª–∞
export default function GamePageContentWrapper(props: GamePageContentProps) {
  return (
    <ErrorBoundary>
      <GamePageContentComponent {...props} />
    </ErrorBoundary>
  );
}