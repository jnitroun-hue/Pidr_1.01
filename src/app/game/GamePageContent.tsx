'use client'
import { useState, useMemo, useEffect, useRef } from 'react';
import Image from 'next/image';
import PlayerProfileModal from '../../components/PlayerProfileModal';
import PenaltyCardSelector from '../../components/PenaltyCardSelector';
import styles from './GameTable.module.css';
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç pidr_generators
import { getPremiumTable } from '@/utils/generatePremiumTable';
import { useDragAndDrop } from '@/hooks/useDragAndDrop';
// TableSelector —É–¥–∞–ª–µ–Ω - –≤—ã–±–æ—Ä —Å—Ç–æ–ª–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
import type { Player, Card } from '../../types/game';
import type { Card as StoreCard } from '../../store/gameStore';
import { motion, AnimatePresence } from 'framer-motion';
import React from 'react';
import { ErrorBoundary } from '../../components/ErrorBoundary';
import { useGameStore } from '@/store/gameStore';
import { AIPlayer, AIDifficulty } from '@/lib/game/ai-player';
import MultiplayerGame from '@/components/MultiplayerGame';
import WinnerScreen from '@/components/WinnerScreen';
import { useLanguage } from '../../components/LanguageSwitcher';
import { useTranslations } from '../../lib/i18n/translations';
import { useWebSocket } from '@/hooks/useWebSocket';
import { useTelegram } from '@/hooks/useTelegram';

const CARD_IMAGES = [
  '2_of_clubs.png','2_of_diamonds.png','2_of_hearts.png','2_of_spades.png',
  '3_of_clubs.png','3_of_diamonds.png','3_of_hearts.png','3_of_spades.png',
  '4_of_clubs.png','4_of_diamonds.png','4_of_hearts.png','4_of_spades.png',
  '5_of_clubs.png','5_of_diamonds.png','5_of_hearts.png','5_of_spades.png',
  '6_of_clubs.png','6_of_diamonds.png','6_of_hearts.png','6_of_spades.png',
  '7_of_clubs.png','7_of_diamonds.png','7_of_hearts.png','7_of_spades.png',
  '8_of_clubs.png','8_of_diamonds.png','8_of_hearts.png','8_of_spades.png',
  '9_of_clubs.png','9_of_diamonds.png','9_of_hearts.png','9_of_spades.png',
  '10_of_clubs.png','10_of_diamonds.png','10_of_hearts.png','10_of_spades.png',
  'ace_of_clubs.png','ace_of_diamonds.png','ace_of_hearts.png','ace_of_spades.png',
  'jack_of_clubs.png','jack_of_diamonds.png','jack_of_hearts.png','jack_of_spades.png',
  'king_of_clubs.png','king_of_diamonds.png','king_of_hearts.png','king_of_spades.png',
  'queen_of_clubs.png','queen_of_diamonds.png','queen_of_hearts.png','queen_of_spades.png',
];
const CARD_BACK = 'back.png';
const CARDS_PATH = '/img/cards/'; // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ –ö –ö–ê–†–¢–ê–ú!

// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é —Å—Ç–æ–ª–∞
const getTableDimensions = () => {
  if (typeof window === 'undefined') {
    return { vw: 1024, vh: 768, isMobile: false, isSmallMobile: false };
  }
  
  const vw = Math.min(window.innerWidth, document.documentElement.clientWidth);
  const vh = Math.min(window.innerHeight, document.documentElement.clientHeight);
  
  const isMobile = vw <= 768;
  const isSmallMobile = vw <= 480;
  const isLandscape = vw > vh;
  
  // –†–∞–∑–º–µ—Ä—ã —Å—Ç–æ–ª–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
  let tableWidth, tableHeight;
  
  if (isSmallMobile) {
    tableWidth = Math.min(vw * 0.5, 200); // 50% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
    tableHeight = Math.min(vh * 0.25, 150); // 25% –æ—Ç –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
  } else if (isMobile) {
    tableWidth = Math.min(vw * 0.45, 280); // 45% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
    tableHeight = Math.min(vh * 0.25, 200); // 25% –æ—Ç –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
  } else {
    tableWidth = Math.min(vw * 0.35, 400); // 35% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    tableHeight = Math.min(vh * 0.3, 320); // 30% –æ—Ç –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
  }
  
  // –ü–æ–∑–∏—Ü–∏—è —Å—Ç–æ–ª–∞ (—Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞)
  const tableX = vw / 2;
  const tableY = vh / 2;
  
  return {
    width: tableWidth,
    height: tableHeight,
    centerX: tableX,
    centerY: tableY,
    // –†–∞–¥–∏—É—Å—ã –æ–≤–∞–ª–∞ —Å—Ç–æ–ª–∞
    radiusX: tableWidth / 2,
    radiusY: tableHeight / 2
  };
};

// üéØ –†–ê–°–°–ê–î–ö–ê –ò–ì–†–û–ö–û–í –ü–û –ß–ê–°–û–í–û–ô –°–¢–†–ï–õ–ö–ï –î–õ–Ø –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ì–û –°–¢–û–õ–ê
const getRectanglePosition = (index: number, totalPlayers: number, gameStage: number = 1): { 
  top: string; 
  left: string; 
  cardDirection: 'horizontal' | 'vertical';
  cardOffset: { x: number; y: number };
} => {
  // –ü–û–ó–ò–¶–ò–Ø 0: –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –í–ù–ò–ó–£ –ü–û –¶–ï–ù–¢–†–£
  if (index === 0) {
    return { 
      left: '50%', 
      top: '92%', // –°–∞–º—ã–π –Ω–∏–∑
      cardDirection: 'horizontal',
      cardOffset: { x: 0, y: -40 }
    };
  }
  
  // –ù–û–í–ê–Ø –†–ê–°–°–ê–î–ö–ê: 2 –°–í–ï–†–•–£, –ü–û 3 –ü–û –ë–û–ö–ê–ú
  // 1-3 ‚Üí –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (3 –∏–≥—Ä–æ–∫–∞)
  // 4-5 ‚Üí –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ (2 –∏–≥—Ä–æ–∫–∞) 
  // 6-8 ‚Üí –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (3 –∏–≥—Ä–æ–∫–∞)
  
  // ‚úÖ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò –î–õ–Ø –í–°–ï–• –°–¢–ê–î–ò–ô
  const positions = [
    { left: '5%', top: '70%', cardDirection: 'vertical' as const, cardOffset: { x: 55, y: 0 } }, // 1: —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É
    { left: '5%', top: '50%', cardDirection: 'vertical' as const, cardOffset: { x: 55, y: 0 } }, // 2: —Å–ª–µ–≤–∞ —Ü–µ–Ω—Ç—Ä
    { left: '5%', top: '30%', cardDirection: 'vertical' as const, cardOffset: { x: 55, y: 0 } }, // 3: —Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É
    
    // –í–ï–†–•–ù–Ø–Ø –°–¢–û–†–û–ù–ê - 2 –ò–ì–†–û–ö–ê
    { left: '35%', top: '5%', cardDirection: 'horizontal' as const, cardOffset: { x: 0, y: 55 } }, // 4: —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞
    { left: '65%', top: '5%', cardDirection: 'horizontal' as const, cardOffset: { x: 0, y: 55 } }, // 5: —Å–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞
    
    // –ü–†–ê–í–ê–Ø –°–¢–û–†–û–ù–ê - 3 –ò–ì–†–û–ö–ê
    { left: '95%', top: '30%', cardDirection: 'vertical' as const, cardOffset: { x: -55, y: 0 } }, // 6: —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É
    { left: '95%', top: '50%', cardDirection: 'vertical' as const, cardOffset: { x: -55, y: 0 } }, // 7: —Å–ø—Ä–∞–≤–∞ —Ü–µ–Ω—Ç—Ä
    { left: '95%', top: '70%', cardDirection: 'vertical' as const, cardOffset: { x: -55, y: 0 } }, // 8: —Å–ø—Ä–∞–≤–∞ –≤–Ω–∏–∑—É
  ];
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
  if (index >= 1 && index <= 9) {
    return positions[index - 1];
  }
  
  // Fallback –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  const fallbackAngle = (2 * Math.PI * (index - 1)) / totalPlayers;
  const fallbackX = 50 + 42 * Math.cos(fallbackAngle - Math.PI / 2);
  const fallbackY = 50 + 42 * Math.sin(fallbackAngle - Math.PI / 2);
  
  return {
    left: `${Math.max(5, Math.min(95, fallbackX))}%`,
    top: `${Math.max(5, Math.min(95, fallbackY))}%`,
    cardDirection: 'horizontal' as const,
    cardOffset: { x: 0, y: -30 }
  };
};

// LEGACY –§–£–ù–ö–¶–ò–Ø (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
const getCirclePosition = (index: number, totalPlayers: number, gameStage: number = 1): { top: string; left: string } => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  return getRectanglePosition(index, totalPlayers, gameStage);
  
  /*
  // –°–¢–ê–†–ê–Ø –û–í–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ —Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É (–ø–æ–∑–∏—Ü–∏—è 0)
  if (index === 0) {
    return { left: '50%', top: '85%' };
  }
  
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç–ª–ª–∏–ø—Å—É
  const actualIndex = index - 1; // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const remainingPlayers = totalPlayers - 1;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–ª–∏–ø—Å–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –æ–≤–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª)
  const centerX = 50; // –¶–µ–Ω—Ç—Ä –ø–æ X (%)
  const centerY = 45; // –¶–µ–Ω—Ç—Ä –ø–æ Y (%) - –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  const radiusX = 45; // –†–∞–¥–∏—É—Å –ø–æ X (%)
  const radiusY = 35; // –†–∞–¥–∏—É—Å –ø–æ Y (%)
  
  // –£–≥–ª—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, –Ω–∞—á–∏–Ω–∞—è —Å –≤–µ—Ä—Ö–∞ –∏ –∏–¥—è –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
  // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤–Ω–∏–∑—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const startAngle = -Math.PI / 2; // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
  const endAngle = Math.PI / 2; // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞
  const angleRange = Math.PI; // –ü–æ–ª—É–∫—Ä—É–≥ —Å–≤–µ—Ä—Ö—É
  */
  
  // –£–î–ê–õ–ï–ù –°–¢–ê–†–´–ô –ö–û–î - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
};

function getFirstPlayerIdx(players: Player[]): number {
  for (let i = 0; i < players.length; i++) {
    if (players[i].isUser) return i;
  }
  return 0;
}

interface GamePageContentProps {
  initialPlayerCount?: number;
  isMultiplayer?: boolean;
  multiplayerData?: {
    roomId: string;
    roomCode: string;
    isHost: boolean;
  };
  onGameEnd?: () => void;
}

function GamePageContentComponent({ 
  initialPlayerCount = 9, 
  isMultiplayer = false, 
  multiplayerData,
  onGameEnd 
}: GamePageContentProps) {
  const { user } = useTelegram();
  const { language } = useLanguage();
  const t = useTranslations(language);
  
  const { 
    isGameActive, gameMode, gameStage, turnPhase, stage2TurnPhase,
    players, currentPlayerId, deck, availableTargets,
    selectedHandCard, revealedDeckCard, tableStack, trumpSuit,
    oneCardDeclarations, oneCardTimers, playersWithOneCard, pendingPenalty,
    penaltyDeck, gameCoins, playedCards,
    showPenaltyCardSelection, penaltyCardSelectionPlayerId,
    startGame, endGame, resetGame,
    drawCard, makeMove, onDeckClick, placeCardOnSelfByRules,
    selectHandCard, playSelectedCard, takeTableCards, showNotification,
    declareOneCard, askHowManyCards, contributePenaltyCard, cancelPenalty
  } = useGameStore();

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase –ë–î
  const [userData, setUserData] = useState<{
    coins: number;
    avatar?: string;
    username?: string;
    telegramId?: string;
  } | null>(null);
  const [isLoadingUserData, setIsLoadingUserData] = useState(true);

  // –¢–µ–∫—É—â–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—è–¥–æ–º —Å –∫–æ–ª–æ–¥–æ–π)
  const [currentCard, setCurrentCard] = useState<string | null>(null);

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
  const [selectedPlayerProfile, setSelectedPlayerProfile] = useState<any>(null);
  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–¥–∞—á–∏ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –∫–∞—Ä—Ç (–£–î–ê–õ–ï–ù–û - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è showPenaltyCardSelection –∏–∑ store)
  // const [showPenaltyModal, setShowPenaltyModal] = useState(false);
  // const [penaltyTargets, setPenaltyTargets] = useState<any[]>([]);
  // const [selectedCards, setSelectedCards] = useState<{[playerId: string]: any}>({});

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
  const generatePlayerProfile = async (player: any) => {
    if (player.isUser) {
      // –†–µ–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ - –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
      try {
        const response = await fetch('/api/auth', {
          credentials: 'include',
        });
        
        if (response.ok) {
          const result = await response.json();
          if (result.success && result.user) {
            return {
              id: player.id,
              name: result.user.username || userData?.username || '–ò–≥—Ä–æ–∫',
              avatar: result.user.avatar_url || userData?.avatar || '',
              isBot: false,
              isUser: true,
              level: Math.floor((result.user.experience || 0) / 1000) + 1,
              rating: result.user.rating || 0,
              gamesPlayed: result.user.games_played || 0,
              winRate: result.user.games_played > 0 
                ? Math.round((result.user.wins / result.user.games_played) * 100) 
                : 0,
              bestStreak: result.user.best_win_streak || 0,
              status: 'üü¢ Online',
              joinedDate: result.user.created_at 
                ? new Date(result.user.created_at).toLocaleDateString('ru-RU')
                : '–ù–µ–¥–∞–≤–Ω–æ',
            };
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      }
      
      // Fallback –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      return {
        id: player.id,
        name: userData?.username || '–ò–≥—Ä–æ–∫',
        avatar: userData?.avatar || '',
        isBot: false,
        isUser: true,
        level: 1,
        rating: 0,
        gamesPlayed: 0,
        winRate: 0,
        bestStreak: 0,
        status: 'üü¢ Online',
        joinedDate: '–°–µ–≥–æ–¥–Ω—è',
      };
    } else {
      // –ë–æ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const seed = player.name.length + player.id.length;
      return {
        id: player.id,
        name: player.name,
        avatar: player.avatar,
        isBot: true,
        isUser: false,
        level: Math.floor(Math.random() * 50) + 1,
        rating: Math.floor(Math.random() * 2000) + 500,
        gamesPlayed: Math.floor(Math.random() * 500) + 50,
        winRate: Math.floor(Math.random() * 40) + 30, // 30-70%
        bestStreak: Math.floor(Math.random() * 15) + 1,
        status: 'ü§ñ AI Bot',
        joinedDate: `${Math.floor(Math.random() * 30) + 1}.${Math.floor(Math.random() * 12) + 1}.2024`,
      };
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞
  const handlePlayerClick = async (player: any) => {
    const profile = await generatePlayerProfile(player);
    setSelectedPlayerProfile(profile);
    setIsProfileModalOpen(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è
  const handleAddFriend = (playerId: string) => {
    console.log('ü§ù –î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è:', playerId);
    alert(`–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)`);
    setIsProfileModalOpen(false);
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º currentCard –∏–∑ revealedDeckCard
  useEffect(() => {
    if (revealedDeckCard && revealedDeckCard.image) {
      setCurrentCard(revealedDeckCard.image);
    } else {
      setCurrentCard(null);
    }
  }, [revealedDeckCard]);

  // –ê–í–ê–¢–ê–†–ö–ò –ò–ì–†–û–ö–û–í
  const [playerAvatars, setPlayerAvatars] = useState<Record<string, string>>({});

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
  useEffect(() => {
    if (players.length > 0) {
      const avatars: Record<string, string> = {};
      players.forEach(player => {
        if (player.avatar) {
          avatars[player.id] = player.avatar;
        }
      });
      setPlayerAvatars(avatars);
    }
  }, [players]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase –ë–î —á–µ—Ä–µ–∑ API
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        setIsLoadingUserData(true);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º telegramId –∏–∑ Telegram WebApp
        const telegramUser = typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
        const telegramId = telegramUser?.id?.toString() || '';
        const username = telegramUser?.username || telegramUser?.first_name || '';
        
        if (!telegramId) {
          console.error('‚ùå Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
          setUserData({ coins: 0, username: '–ò–≥—Ä–æ–∫' });
          setIsLoadingUserData(false);
          return;
        }
        
        console.log('üéÆ [GamePageContent] –ó–∞–≥—Ä—É–∂–∞–µ–º userData –¥–ª—è:', telegramId);
        
        const response = await fetch('/api/user/me', {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
            'x-telegram-id': telegramId,
            'x-username': username
          }
        });
        
        if (!response.ok) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.status);
          // ‚úÖ –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –∏–≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å
          setUserData({ coins: 0, username: username || '–ò–≥—Ä–æ–∫', telegramId });
          return;
        }
        
        const result = await response.json();
        
        if (result.success && result.user) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', result.user);
          setUserData({
            coins: result.user.coins || 0,
            avatar: result.user.avatar_url || '',
            username: result.user.username || result.user.firstName || username || '–ò–≥—Ä–æ–∫',
            telegramId: result.user.telegramId || telegramId
          });
        } else {
          console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          setUserData({ coins: 0, username: username || '–ò–≥—Ä–æ–∫', telegramId });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // ‚úÖ –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const telegramUser = typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
        const username = telegramUser?.username || telegramUser?.first_name || '';
        const telegramId = telegramUser?.id?.toString() || '';
        setUserData({ coins: 0, username: username || '–ò–≥—Ä–æ–∫', telegramId });
      } finally {
        setIsLoadingUserData(false);
      }
    };

    fetchUserData();
  }, []);

  // ‚úÖ –£–î–ê–õ–ï–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ—Ä–º–æ–∑–∏–ª–æ –∏–≥—Ä—É)
  // –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ tableStack —É–±—Ä–∞–Ω - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

  const [playerCount, setPlayerCount] = useState(initialPlayerCount);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  const [winner, setWinner] = useState<{
    name: string;
    isUser: boolean;
    id: string;
  } | null>(null);
  const [showWinnerScreen, setShowWinnerScreen] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å—ã)
  const [multiplayerRoom, setMultiplayerRoom] = useState<{
    id: string;
    code: string;
    isHost: boolean;
  } | null>(multiplayerData ? {
    id: multiplayerData.roomId,
    code: multiplayerData.roomCode,
    isHost: multiplayerData.isHost
  } : null);

  // üé® –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const [generatedTableImage, setGeneratedTableImage] = useState<string | null>(null);
  const [isGeneratingTable, setIsGeneratingTable] = useState(false);
  // playerAvatars —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω –≤—ã—à–µ –Ω–∞ —Å—Ç—Ä–æ–∫–µ 220
  const [isGeneratingAvatars, setIsGeneratingAvatars] = useState(false);

  // –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ—Å–∫–æ—à–Ω—ã–π SVG —Å—Ç–æ–ª
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    if (multiplayerData) {
      setMultiplayerRoom({
        id: multiplayerData.roomId,
        code: multiplayerData.roomCode,
        isHost: multiplayerData.isHost
      });
    }
  }, [multiplayerData]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  useEffect(() => {
    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∞ —Ç–µ–ø–µ—Ä—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
    if (!isGameActive && players.length > 0) {
      console.log('üéÆ [GamePageContent] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏—â–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...');
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –±–µ–∑ –∫–∞—Ä—Ç (–ø–æ–±–µ–¥–∏—Ç–µ–ª—è)
      const gameWinner = players.find(player => {
        const totalCards = player.cards.length + (player.penki?.length || 0);
        return totalCards === 0;
      });
      
      if (gameWinner) {
        console.log('üèÜ –ù–∞–π–¥–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å:', gameWinner.name);
        setWinner({
          name: gameWinner.name,
          isUser: gameWinner.isUser || false,
          id: gameWinner.id
        });
        setShowWinnerScreen(true);
      } else {
        console.log('‚ö†Ô∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏—á—å—è');
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∏—á—å–µ–π
      }
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    if (isMultiplayer && !isGameActive && onGameEnd) {
      console.log('üéÆ [GamePageContent] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ, –≤—ã–∑—ã–≤–∞–µ–º onGameEnd');
      onGameEnd();
    }
  }, [isGameActive, players, isMultiplayer, onGameEnd]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
  useEffect(() => {
    console.log('üîß [GamePageContent] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π:', {
      selectHandCard: !!selectHandCard,
      playSelectedCard: !!playSelectedCard,
      takeTableCards: !!takeTableCards,
      makeMove: !!makeMove,
      onDeckClick: !!onDeckClick
    });
  }, [selectHandCard, playSelectedCard, takeTableCards, makeMove, onDeckClick]);
  const [dealt, setDealt] = useState(false);
  const [gameInitialized, setGameInitialized] = useState(false);
  const [previousGameStage, setPreviousGameStage] = useState(gameStage);

  // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  const seatScale = useMemo(() => {
    const n = players.length || playerCount;
    if (n >= 8) return 0.85;
    if (n >= 6) return 0.9;
    return 1; // 5 –∏ –º–µ–Ω—å—à–µ
  }, [players.length, playerCount]);

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç (–ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–û)
  const currentTurnPlayer = useMemo(() => players.find(p => p.id === currentPlayerId), [players, currentPlayerId]);
  const currentPlayerIndex = useMemo(() => players.findIndex(p => p.id === currentPlayerId), [players, currentPlayerId]);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—á–µ–ª–æ–≤–µ–∫–∞ (–¥–ª—è UI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç) (–ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–û)
  const humanPlayer = useMemo(() => players.find(p => p.isUser), [players]);
  
  // –û–¢–õ–ê–î–ö–ê —É–±—Ä–∞–Ω–∞ - –ª–æ–≥–∏ –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–µ
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ò–ò –¥–ª—è –±–æ—Ç–æ–≤
  const [aiPlayers, setAiPlayers] = useState<Map<number, AIPlayer>>(new Map());
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ AI (race condition protection)
  const aiProcessingRef = useRef<string | null>(null);
  
  // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const [screenInfo, setScreenInfo] = useState({
    isMobile: false,
    isSmallMobile: false,
    isVerySmallMobile: false,
    isLandscape: false,
    isIPhone: false,
    isAndroid: false,
    viewportWidth: 0,
    viewportHeight: 0,
    safeArea: { top: 0, bottom: 0, left: 0, right: 0 }
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
  const [positionKey, setPositionKey] = useState(0);
  
  useEffect(() => {
    const updateScreenInfo = () => {
      if (typeof window === 'undefined') return;
      
      const vw = Math.min(window.innerWidth, document.documentElement.clientWidth);
      const vh = Math.min(window.innerHeight, document.documentElement.clientHeight);
      const isMobile = vw <= 768;
      const isSmallMobile = vw <= 480;
      const isVerySmallMobile = vw <= 375; // iPhone SE –∏ –ø–æ–¥–æ–±–Ω—ã–µ
      const isLandscape = vw > vh;
      
      // –û—Å–æ–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è iPhone
      const isIPhone = typeof navigator !== 'undefined' && /iPhone|iPod/.test(navigator.userAgent);
      const isAndroid = typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º safe areas –¥–ª—è iOS –∏ Android
      const safeAreaTop = 
        window.screen && window.screen.height && window.innerHeight < window.screen.height 
          ? Math.max(0, (window.screen.height - window.innerHeight) / 2) 
          : 0;
      
      const newScreenInfo = {
        isMobile,
        isSmallMobile,
        isVerySmallMobile,
        isLandscape,
        isIPhone,
        isAndroid,
        viewportWidth: vw,
        viewportHeight: vh,
        safeArea: {
          top: safeAreaTop,
          bottom: isVerySmallMobile ? 120 : isSmallMobile ? 100 : isMobile ? 80 : 60, // –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è iPhone
          left: isIPhone ? 10 : 0, // –û—Ç—Å—Ç—É–ø—ã –ø–æ –±–æ–∫–∞–º –¥–ª—è iPhone
          right: isIPhone ? 10 : 0
        }
      };
      
      setScreenInfo(newScreenInfo);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
      setPositionKey(prev => prev + 1);
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    updateScreenInfo();
    
    // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (typeof window !== 'undefined') {
      window.addEventListener('resize', updateScreenInfo);
      window.addEventListener('orientationchange', updateScreenInfo);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (Android)
      let orientationTimeout: NodeJS.Timeout;
      const handleOrientationChange = () => {
        clearTimeout(orientationTimeout);
        orientationTimeout = setTimeout(updateScreenInfo, 500);
      };
      
      window.addEventListener('orientationchange', handleOrientationChange);
      
      // –û—á–∏—Å—Ç–∫–∞
      return () => {
        window.removeEventListener('resize', updateScreenInfo);
        window.removeEventListener('orientationchange', updateScreenInfo);
        window.removeEventListener('orientationchange', handleOrientationChange);
        clearTimeout(orientationTimeout);
      };
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    const newAiPlayers = new Map<number, AIPlayer>();
    players.forEach(player => {
      if (player.isBot) {
        const playerId = typeof player.id === 'string' ? 
          parseInt(player.id.replace('player_', '')) : player.id;
        newAiPlayers.set(playerId, new AIPlayer(playerId, player.difficulty || 'medium'));
      }
    });
    setAiPlayers(newAiPlayers);
  }, [players]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ–Ω—å–∫–æ–≤
  useEffect(() => {
    if (gameStage !== previousGameStage) {
      setPreviousGameStage(gameStage);
    }
  }, [gameStage, previousGameStage]);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –ò–ò
  useEffect(() => {
    const { isGameActive, currentPlayerId, players, gameStage, stage2TurnPhase, deck, availableTargets, revealedDeckCard, trumpSuit, tableStack } = useGameStore.getState();
    
    if (!isGameActive || !currentPlayerId) {
      return;
    }
    
    const currentTurnPlayer = players.find(p => p.id === currentPlayerId);
    if (!currentTurnPlayer) {
      return;
    }
    
    if (!currentTurnPlayer.isBot) {
      return;
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ AI (race condition protection)
    if (aiProcessingRef.current === currentPlayerId) {
      return;
    }
    
    // –°–¢–†–û–ì–ò–ï –ü–†–û–í–ï–†–ö–ò: –ò–ò –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥!
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    if (gameStage === 2 || gameStage === 3) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ò–ò —Ö–æ–¥–∏—Ç—å –≤ —Ñ–∞–∑–∞—Ö 'selecting_card' –∏ 'waiting_beat' –¥–ª—è 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏–π
      if (stage2TurnPhase !== 'selecting_card' && stage2TurnPhase !== 'waiting_beat') {
        return;
      }
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—É—â–∏–º
      if (currentTurnPlayer?.id !== currentPlayerId) {
        return;
      }
    } else if (gameStage === 1) {
      if (turnPhase !== 'analyzing_hand' && turnPhase !== 'waiting_deck_action') {
        return;
      }
    }
    
    const playerIdNum = typeof currentPlayerId === 'string' ? 
      parseInt(currentPlayerId.replace('player_', '')) : currentPlayerId;
    
    const ai = aiPlayers.get(playerIdNum);
    if (!ai) {
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    aiProcessingRef.current = currentPlayerId;
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –ò–ò –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    const makeAIMove = async () => {
      try {
        // –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        if (!currentTurnPlayer || !currentTurnPlayer.isBot || !players.length) {
          aiProcessingRef.current = null;
          return;
        }
        
        const gameState = {
          players,
          currentPlayer: currentPlayerId,
          gameStage,
          deck,
          availableTargets,
          revealedDeckCard,
          tableStack,
          trumpSuit, // –ö–æ–∑—ã—Ä—å –∏–∑ gameStore (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
          stage2TurnPhase // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∑—É 2-–π —Å—Ç–∞–¥–∏–∏ –¥–ª—è AI
        };
        
        const decision = await ai.makeDecisionWithDelay(gameState);
      
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –ò–ò —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã
        if (gameStage === 1) {
        // –í 1-–π —Å—Ç–∞–¥–∏–∏ –ò–ò –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É: –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ ‚Üí –∫–æ–ª–æ–¥–∞ ‚Üí –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
        switch (decision.action) {
          case 'place_on_target':
            if (decision.targetPlayerId !== undefined) {
              const { makeMove } = useGameStore.getState();
              if (makeMove) makeMove(decision.targetPlayerId.toString());
            }
            break;
          case 'draw_card':
            // –í 1-–π —Å—Ç–∞–¥–∏–∏ –ò–ò –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–ª–æ–¥–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –∏–∑ —Ä—É–∫–∏
            const { onDeckClick } = useGameStore.getState();
            if (onDeckClick) onDeckClick();
            break;
          default:
            break;
        }
      } else if (gameStage === 2 || gameStage === 3) {
        // –í–æ 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏—è—Ö AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É selectHandCard + playSelectedCard (–ø—Ä–∞–≤–∏–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
        switch (decision.action) {
          case 'play_card':
            const { selectHandCard, playSelectedCard } = useGameStore.getState();
            if (decision.cardToPlay && selectHandCard && playSelectedCard) {
              // –ù–∞–π–¥–µ–º –∫–∞—Ä—Ç—É –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞ –∏ –≤—ã–±–µ—Ä–µ–º –µ—ë
              if (currentTurnPlayer) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ c.open - —É –±–æ—Ç–æ–≤ –∫–∞—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏!
                const cardInHand = currentTurnPlayer.cards.find(c => 
                  c.image === decision.cardToPlay?.image
                );
                if (cardInHand) {
                  console.log(`ü§ñ [${currentTurnPlayer.name}] AI –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É ${cardInHand.image} –¥–ª—è —Ö–æ–¥–∞`);
                  selectHandCard(cardInHand);
                  // –ò–≥—Ä–∞–µ–º –∫–∞—Ä—Ç—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê)
                  setTimeout(() => {
                    console.log(`ü§ñ [${currentTurnPlayer.name}] AI –∏–≥—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É ${cardInHand.image}`);
                    playSelectedCard();
                  }, 400);
                } else {
                  console.error(`üö® [AI] –ö–∞—Ä—Ç–∞ ${decision.cardToPlay?.image} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä—É–∫–µ ${currentTurnPlayer.name}!`);
                  console.log(`üö® [AI] –ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ:`, currentTurnPlayer.cards.map(c => c.image));
                  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                  aiProcessingRef.current = null;
                }
              }
            }
            break;
          case 'draw_card':
            // –í–æ 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏—è—Ö —ç—Ç–æ –∑–Ω–∞—á–∏—Ç "–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞"
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ö—É–∫–∞
            if (takeTableCards) {
              console.log('üé¥ [BOT] –í—ã–∑—ã–≤–∞–µ–º takeTableCards –¥–ª—è –±–æ—Ç–∞');
              takeTableCards();
            }
            break;
          case 'pass':
            // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤–∞ nextTurn()
            break;
          default:
            break;
        }
      }
        
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
      aiProcessingRef.current = null;
        
    } catch (error) {
      console.error(`üö® [makeAIMove] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ö–æ–¥–µ –ò–ò:`, error);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      aiProcessingRef.current = null;
    }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –ò–ò —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê)
    const delay = (gameStage === 2 || gameStage === 3) ? 250 : 500;
    const timeoutId = setTimeout(makeAIMove, delay);
    
    return () => {
      clearTimeout(timeoutId);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ useEffect
      aiProcessingRef.current = null;
    };
  }, [isGameActive, currentPlayerId, gameStage, stage2TurnPhase, turnPhase]);
  
  // ‚úÖ –£–ë–†–ê–ù –ï–ë–ê–ù–´–ô –ë–ê–ì: –ë–æ–ª—å—à–µ –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –∏–≥—Ä—É –¥–ª—è single player!
  // –≠—Ç–æ—Ç useEffect –£–ë–ò–í–ê–õ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–≥—Ä—É!

  // üé≤ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—Å–∫–æ—à–Ω—ã–π SVG —Å—Ç–æ–ª (—ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ–ª —É–¥–∞–ª–µ–Ω)
  // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ luxury SVG table

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (typeof window !== 'undefined' && !generatedTableImage && !isGeneratingTable) {
      generatePremiumTable('luxury');
    }
  }, [generatedTableImage, isGeneratingTable]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    if (players.length > 0 && Object.keys(playerAvatars).length === 0 && !isGeneratingAvatars) {
      generatePlayersAvatars();
    }
  }, [players.length, playerAvatars, isGeneratingAvatars]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
  useEffect(() => {
    if (isGameActive && !dealt) {
      setDealt(true);
    }
  }, [isGameActive, dealt]);

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  const handleStartGame = async () => {
    console.log('üéÆ [handleStartGame] –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Å –±–æ—Ç–∞–º–∏');
    
    // –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    let actualUsername = userData?.username;
    let actualAvatar = userData?.avatar;
    
    try {
      const response = await fetch('/api/auth', {
        credentials: 'include',
      });
      
      if (response.ok) {
        const result = await response.json();
        if (result.success && result.user) {
          actualUsername = result.user.username || actualUsername;
          actualAvatar = result.user.avatar_url || actualAvatar;
          console.log('‚úÖ [handleStartGame] –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:', {
            username: actualUsername,
            avatar: actualAvatar ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
          });
        }
      }
    } catch (error) {
      console.error('‚ùå [handleStartGame] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    console.log('üë§ [handleStartGame] –ü–µ—Ä–µ–¥–∞–µ–º –≤ startGame:', {
      avatar: actualAvatar,
      username: actualUsername
    });
    
    // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–π
    setDealt(false);
    setGameInitialized(false);
    
    // –û—á–∏—â–∞–µ–º AI
    setAiPlayers(new Map());
    aiProcessingRef.current = null;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
    startGame('multiplayer', playerCount, null, {
      avatar: actualAvatar,
      username: actualUsername || '–ò–≥—Ä–æ–∫' // Fallback –Ω–∞ "–ò–≥—Ä–æ–∫" –≤–º–µ—Å—Ç–æ "–í—ã"
    });
    
    // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    setTimeout(() => {
      setGameInitialized(true);
      console.log('‚úÖ [handleStartGame] –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }, 100);
  };

  // –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞—Ä—Ç
  
  // –ù–û–í–´–ô STATE –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–¥ –∏–≥—Ä–æ–∫–∞–º–∏
  const [playerMessages, setPlayerMessages] = useState<{[playerId: string]: {text: string; type: 'info' | 'warning' | 'success' | 'error'; timestamp: number}}>({});
  
  // STATE –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?"
  const [showAskCardsButton, setShowAskCardsButton] = useState(false);
  const [lastPlayersWithOneCardUpdate, setLastPlayersWithOneCardUpdate] = useState<string[]>([]);

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
  const showPlayerMessage = (playerId: string, text: string, type: 'info' | 'warning' | 'success' | 'error' = 'info', duration: number = 3000) => {
    setPlayerMessages(prev => ({
      ...prev,
      [playerId]: { text, type, timestamp: Date.now() }
    }));
    
    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      setPlayerMessages(prev => {
        const newMessages = { ...prev };
        delete newMessages[playerId];
        return newMessages;
      });
    }, duration);
  };

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è playersWithOneCard –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫
  useEffect(() => {
    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å 1 –∫–∞—Ä—Ç–æ–π –∏–∑–º–µ–Ω–∏–ª—Å—è
    const currentIds = JSON.stringify(playersWithOneCard?.sort() || []);
    const lastIds = JSON.stringify(lastPlayersWithOneCardUpdate.sort());
    
    if (currentIds !== lastIds) {
      setLastPlayersWithOneCardUpdate(playersWithOneCard || []);
      
      // –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∏–≥—Ä–æ–∫–∏ —Å 1 –∫–∞—Ä—Ç–æ–π
      if (playersWithOneCard && playersWithOneCard.length > 0) {
        setShowAskCardsButton(false); // –°–∫—Ä—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –∏–≥—Ä–æ–∫–∞–º–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö 1 –∫–∞—Ä—Ç–∞
        playersWithOneCard.forEach(playerId => {
          const player = players.find(p => p.id === playerId);
          if (player && !player.isUser) {
            showPlayerMessage(playerId, '‚ö†Ô∏è 1 –∫–∞—Ä—Ç–∞!', 'warning', 5000);
          }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setShowAskCardsButton(true);
        }, 2000);
      } else {
        // –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å 1 –∫–∞—Ä—Ç–æ–π - —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        setShowAskCardsButton(false);
      }
    }
  }, [playersWithOneCard, players, lastPlayersWithOneCardUpdate]);

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –≤—Å–µ—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
  const showOpponentsCardCount = () => {
    if (!humanPlayer) return;
    
    console.log('üî¢ [showOpponentsCardCount] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –∏–≥—Ä–æ–∫–æ–º –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–æ—Å–∏–ª
    showPlayerMessage(humanPlayer.id, 'üîç –°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?', 'info', 2000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    const opponentsWithOneCard = players.filter(p => 
      p.id !== humanPlayer.id && 
      playersWithOneCard.includes(p.id)
    );
    
    if (opponentsWithOneCard.length > 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ —Å 1 –∫–∞—Ä—Ç–æ–π, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–µ—Ä–≤–æ–≥–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
      const targetPlayer = opponentsWithOneCard[0];
      console.log(`üéØ [showOpponentsCardCount] –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ç—Ä–∞—Ñ —É ${targetPlayer.name} —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É`);
      askHowManyCards(humanPlayer.id, targetPlayer.id);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å 1 –∫–∞—Ä—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  
      players
        .filter(p => p.id !== humanPlayer.id)
        .forEach((player, index) => {
          const openCards = player.cards.filter(c => c.open).length;
          
          setTimeout(() => {
            showPlayerMessage(
              player.id, 
              `${openCards} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç`, 
              'info', 
              4000
            );
          }, index * 800);
        });
    }
  };

  // –û–±—ä—è–≤–∏—Ç—å —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
  const announceLastCard = () => {
    if (!humanPlayer) return;
    
    const openCards = humanPlayer.cards.filter(c => c.open);
    console.log('1Ô∏è‚É£ [announceLastCard] –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã:', openCards.length);
    
    if (openCards.length === 1) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      declareOneCard(humanPlayer.id);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –∏–≥—Ä–æ–∫–æ–º –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è–≤–∏–ª
      showPlayerMessage(humanPlayer.id, '‚òùÔ∏è –û–î–ù–ê –ö–ê–†–¢–ê!', 'success', 4000);
      
      console.log(`üì¢ [announceLastCard] ${humanPlayer.name} –æ–±—ä—è–≤–∏–ª –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É!`);
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–¥ –∏–≥—Ä–æ–∫–æ–º
      showPlayerMessage(humanPlayer.id, `‚ùå –£ –≤–∞—Å ${openCards.length} –∫–∞—Ä—Ç!`, 'error', 3000);
      showNotification(`–ù–µ–ª—å–∑—è –æ–±—ä—è–≤–ª—è—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" - —É –≤–∞—Å ${openCards.length} –∫–∞—Ä—Ç`, 'error', 3000);
      console.warn(`‚ö†Ô∏è [announceLastCard] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${openCards.length} –∫–∞—Ä—Ç –≤–º–µ—Å—Ç–æ 1`);
    }
  };

  // üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º —Å—Ç–æ–ª–∞
  const generatePremiumTable = async (style: 'luxury' | 'neon' | 'classic' = 'luxury') => {
    if (typeof window === 'undefined') return;
    
    setIsGeneratingTable(true);
    try {
      console.log(`üé≤ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π ${style} —Å—Ç–æ–ª...`);
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç pidr_generators
      const tableImage = await getPremiumTable();
      setGeneratedTableImage(tableImage);
      console.log('‚úÖ –°—Ç–∞—Ç–∏—á–Ω—ã–π —Å—Ç–æ–ª –∑–∞–≥—Ä—É–∂–µ–Ω!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ª–∞:', error);
    } finally {
      setIsGeneratingTable(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Å—Ç–æ–ª–∞ —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ—Å–∫–æ—à–Ω—ã–π SVG —Å—Ç–æ–ª

  // üë• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  const generatePlayersAvatars = async () => {
    if (typeof window === 'undefined' || players.length === 0) return;
    
    setIsGeneratingAvatars(true);
    try {
      console.log('üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã...');
      const avatars: {[playerId: string]: string} = {};
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç pidr_generators
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
      for (const player of players) {
        avatars[player.id] = '/images/default-avatar.png'; // –ó–∞–≥–ª—É—à–∫–∞
        await new Promise(resolve => setTimeout(resolve, 50));
      }
      
      setPlayerAvatars(avatars);
      console.log('‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤:', error);
    } finally {
      setIsGeneratingAvatars(false);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
  useEffect(() => {
    if (!gameInitialized && userData) { // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üéÆ [AUTOSTART] –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...');
      if (isMultiplayer && multiplayerData) {
        // –î–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        startGame('multiplayer', playerCount, null, {
          avatar: userData.avatar,
          username: userData.username
        });
      } else {
        // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã
        startGame('single', playerCount, null, {
          avatar: userData.avatar,
          username: userData.username
        });
      }
      setGameInitialized(true);
    }
  }, [gameInitialized, isMultiplayer, multiplayerData, playerCount, startGame, userData]);

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è UI
  const canDrawCard = turnPhase === 'deck_card_revealed' && currentTurnPlayer?.id === currentPlayerId;
  const canClickDeck = turnPhase === 'showing_deck_hint' && currentTurnPlayer?.id === currentPlayerId;
  const waitingForTarget = turnPhase === 'waiting_target_selection';

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º getRectanglePosition —Å –ø–µ—Ä–µ–¥–∞—á–µ–π gameStage
  const getPlayerPosition = (index: number, totalPlayers: number) => {
    const rectPos = getRectanglePosition(index, totalPlayers, gameStage);
    return {
      x: parseFloat(rectPos.left),
      y: parseFloat(rectPos.top)
    };
  };

  // ‚úÖ –£–ë–†–ê–ù –ó–ê–ì–†–£–ó–û–ß–ù–´–ô –≠–ö–†–ê–ù - –ò–ì–†–ê –ü–û–ö–ê–ó–´–í–ê–ï–¢–°–Ø –°–†–ê–ó–£ –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –ò–ì–†–û–ö–û–í!
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –¢–û–õ–¨–ö–û –µ—Å–ª–∏ userData –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
  if (isLoadingUserData) {
    return (
      <div className={styles.gameContainer} style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        minHeight: '100vh'
        }}>
          <div style={{
          width: '60px',
          height: '60px',
          border: '6px solid rgba(99, 102, 241, 0.3)',
          borderTop: '6px solid #6366f1',
            borderRadius: '50%',
          animation: 'spin 1s linear infinite'
          }}></div>
      </div>
    );
  }

  return (
    <div className={styles.gameContainer}>
      {/* –ó–ê–ì–û–õ–û–í–û–ö –ò–ì–†–´ - –°–¢–ê–î–ò–Ø –ò –ö–û–õ–û–î–ê/–ë–ò–¢–ö–û */}
      {players.length > 0 && (
        <div className={styles.gameHeader}>
          <div className={styles.stageInfo}>
            <span className={styles.trumpIcon}>
              {gameStage === 1 ? 'üé¥' : gameStage === 2 ? 'üÉè' : gameStage === 3 ? 'üéØ' : 'üèÜ'}
            </span>
            –°—Ç–∞–¥–∏—è {gameStage}
            {gameStage >= 2 && trumpSuit && (
              <span style={{ marginLeft: '8px' }}>
                {trumpSuit === 'hearts' ? '‚ô•Ô∏è' : 
                 trumpSuit === 'diamonds' ? '‚ô¶Ô∏è' : 
                 trumpSuit === 'clubs' ? '‚ô£Ô∏è' : 
                 trumpSuit === 'spades' ? '‚ô†Ô∏è' : ''}
              </span>
            )}
          </div>
          <div className={styles.deckInfo}>
            {gameStage === 1 ? (
              <>üé¥ –ö–æ–ª–æ–¥–∞: {deck.length}</>
            ) : (
              <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                <span style={{ fontSize: '12px' }}>üóëÔ∏è</span>
                {/* ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 1 –∫–∞—Ä—Ç—É —Ä—É–±–∞—à–∫–æ–π + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
                {playedCards && playedCards.length > 0 && (
                    <Image
                      src="/img/cards/card_back.png"
                      alt="–ö–∞—Ä—Ç–∞ –≤ –±–∏—Ç–æ"
                    width={12}
                    height={18}
                      style={{ 
                      opacity: 0.9,
                      borderRadius: '2px'
                      }}
                    />
                )}
                <span style={{ fontSize: '11px', fontWeight: 700 }}>√ó{playedCards?.length || 0}</span>
              </div>
            )}
          </div>
        </div>
      )}

      {/* –ë–£–†–ì–ï–† –ú–ï–ù–Æ */}
      {players.length > 0 && (
        <div className={styles.gameControls}>
          <div className={styles.burgerMenu}>
            <button className={styles.burgerButton}>
              <div className={styles.burgerLines}>
                <span></span>
                <span></span>
                <span></span>
              </div>
            </button>
            <div className={styles.burgerDropdown}>
              {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
              <div className={styles.menuUserProfile}>
                <div className={styles.menuUserAvatar}>
                  {userData?.avatar ? (
                    <img 
                      src={userData.avatar} 
                      alt="Avatar" 
                      className={styles.menuAvatarImage}
                    />
                  ) : (
                    <span className={styles.menuAvatarPlaceholder}>üë§</span>
                  )}
                </div>
                <div className={styles.menuUserInfo}>
                  <div className={styles.menuUserName}>{userData?.username || '–ò–≥—Ä–æ–∫'}</div>
                  <div className={styles.menuUserCoins}>
                    <div className={styles.coinAnimated}></div>
                    <span className={styles.menuCoinsValue}>{userData?.coins || 0}</span>
                  </div>
                </div>
              </div>
              
              <div className={styles.menuDivider}></div>
              
              <button className={styles.menuItem} onClick={() => typeof window !== 'undefined' && window.history.back()}>
                üè† –ì–ª–∞–≤–Ω–∞—è
              </button>
              <button className={styles.menuItem} onClick={() => {
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?')) {
                  endGame();
                  typeof window !== 'undefined' && window.history.back();
                }
              }}>
                üö™ –í—ã–π—Ç–∏
              </button>
            </div>
          </div>
        </div>
      )}

      {/* üéÆ –ò–ì–†–û–í–û–ô –°–¢–û–õ –ò –ö–ê–†–¢–´ */}
      {players.length > 0 && (
        <div className={styles.tableWrapper}>
          {/* –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Å—Ç–æ–ª */}
          <div className={styles.rectangularTable}>
            {/* –°–¢–û–ü–ö–ê –ö–ê–†–¢ –ù–ê –°–¢–û–õ–ï (2-—è —Å—Ç–∞–¥–∏—è) - –ó–ê–ú–ï–ù–Ø–ï–¢ –ö–û–õ–û–î–£ */}
            {gameStage >= 2 && tableStack && tableStack.length > 0 && (
              <div style={{
                position: 'absolute',
                left: '50%',
                top: '50%',
                transform: 'translate(-50%, -50%)',
                zIndex: 15,
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                minWidth: '200px',
                minHeight: '120px'
              }}>
                {tableStack.map((card, idx) => {
                  // –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–ê–Ø –°–¢–û–ü–ö–ê: –ö–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ —Å–º–µ—â–∞–µ—Ç—Å—è –í–ü–†–ê–í–û
                  // –õ–µ–≤–∞—è –∫–∞—Ä—Ç–∞ = –Ω–∏–∂–Ω—è—è (–ø–µ—Ä–≤–∞—è), –ø—Ä–∞–≤–∞—è –∫–∞—Ä—Ç–∞ = –≤–µ—Ä—Ö–Ω—è—è (–ø–æ—Å–ª–µ–¥–Ω—è—è)
                  const offset = idx * 25; // 25px —Å–º–µ—â–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ (–ø—Ä–∏–º–µ—Ä–Ω–æ 30% –æ—Ç —à–∏—Ä–∏–Ω—ã –∫–∞—Ä—Ç—ã 74px)
                  const isTopCard = idx === tableStack.length - 1;
                  
                  return (
                    <div 
                      key={`table-${idx}`} 
                      style={{
                        position: 'absolute',
                        left: `${offset}px`, // –°–õ–ï–í–ê –ù–ê–ü–†–ê–í–û!
                        top: '0',
                        background: '#ffffff',
                        borderRadius: '8px',
                        padding: '3px',
                        boxShadow: isTopCard 
                          ? '0 8px 24px rgba(255, 193, 7, 0.6), 0 0 30px rgba(255, 193, 7, 0.4)' 
                          : '0 4px 12px rgba(0,0,0,0.4)',
                        border: isTopCard ? '3px solid rgba(255, 193, 7, 0.8)' : '2px solid rgba(255, 255, 255, 0.3)',
                        zIndex: idx, // –ü—Ä–∞–≤–∞—è –∫–∞—Ä—Ç–∞ (–±–æ–ª—å—à–∏–π idx) –ø–æ–≤–µ—Ä—Ö –ª–µ–≤–æ–π
                        transition: 'all 0.3s ease'
                        // –£–ë–†–ê–ù–ê –ê–ù–ò–ú–ê–¶–ò–Ø pulse - –Ω–µ –º–µ—Ä—Ü–∞–µ—Ç –±–æ–ª—å—à–µ
                      }}
                    >
                      <Image
                        src={`${CARDS_PATH}${card.image || 'card_back.png'}`}
                        alt={`Card ${idx + 1}`}
                        width={74}
                        height={111}
                        style={{ 
                          borderRadius: '6px',
                          display: 'block'
                        }}
                        priority
                      />
                    </div>
                  );
                })}
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç */}
                <div style={{
                  position: 'absolute',
                  bottom: '-35px',
                  left: '50%',
                  transform: 'translateX(-50%)',
                  background: 'rgba(0, 0, 0, 0.8)',
                  color: '#fbbf24',
                  padding: '4px 12px',
                  borderRadius: '12px',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  whiteSpace: 'nowrap',
                  border: '2px solid rgba(255, 193, 7, 0.5)'
                }}>
                  –ù–∞ —Å—Ç–æ–ª–µ: {tableStack.length}
                </div>
              </div>
            )}

            {/* –ö–æ–ª–æ–¥–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ (1-—è —Å—Ç–∞–¥–∏—è) */}
            {deck && deck.length > 0 && gameStage === 1 && (
              <div className={styles.deckStack} style={{
                position: 'absolute',
                left: '50%',
                top: '50%',
                transform: 'translate(-50%, -50%)',
                zIndex: 10,
                display: 'flex',
                gap: '15px',
                alignItems: 'center'
              }}>
                {/* –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã (—Å–ª–µ–≤–∞) - –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–ê–Ø! */}
                {currentCard && revealedDeckCard && (
                  <div 
                    style={{ 
                      position: 'relative',
                      background: '#ffffff',
                      borderRadius: '8px',
                      padding: '2px',
                      boxShadow: turnPhase === 'waiting_deck_action' 
                        ? '0 0 30px rgba(99, 102, 241, 0.8), 0 0 50px rgba(99, 102, 241, 0.5)' 
                        : '0 0 20px rgba(255, 255, 255, 0.3), 0 4px 12px rgba(0,0,0,0.4)',
                      border: '2px solid #e2e8f0',
                      animation: turnPhase === 'waiting_deck_action' ? 'pulse 2s ease-in-out infinite' : 'none',
                      cursor: (turnPhase === 'waiting_deck_action' && availableTargets.length > 0) ? 'pointer' : 'default',
                      transition: 'transform 0.2s ease'
                    }}
                    onClick={() => {
                      const humanPlayer = players.find(p => p.isUser);
                      if (turnPhase === 'waiting_deck_action' && availableTargets.length > 0 && currentPlayerId === humanPlayer?.id) {
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ü–µ–ª—å
                        const targetIndex = availableTargets[0];
                        const targetPlayer = players[targetIndex];
                        console.log(`üé¥ [–ö–õ–ò–ö –ü–û –ö–ê–†–¢–ï –ò–ó –ö–û–õ–û–î–´] –•–æ–¥–∏–º –Ω–∞ ${targetPlayer?.name}`);
                        makeMove(targetPlayer?.id || '');
                      }
                    }}
                    onMouseEnter={(e) => {
                      if (turnPhase === 'waiting_deck_action' && availableTargets.length > 0) {
                        e.currentTarget.style.transform = 'scale(1.1)';
                      }
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'scale(1)';
                    }}
                  >
                    <Image
                      src={`${CARDS_PATH}${currentCard}`}
                      alt="Current Card"
                      width={36}
                      height={54}
                      style={{ 
                        borderRadius: '6px',
                        opacity: 1,
                        filter: 'none',
                        visibility: 'visible',
                        display: 'block'
                      }}
                      priority
                    />
                    {turnPhase === 'waiting_deck_action' && availableTargets.length > 0 && (
                      <div style={{
                        position: 'absolute',
                        top: '-8px',
                        right: '-8px',
                        background: '#10b981',
                        color: 'white',
                        borderRadius: '50%',
                        width: '20px',
                        height: '20px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '12px',
                        fontWeight: 'bold',
                        border: '2px solid white',
                        boxShadow: '0 2px 8px rgba(0,0,0,0.3)'
                      }}>
                        ‚úì
                      </div>
                    )}
                  </div>
                )}
                
                {/* –ö–æ–ª–æ–¥–∞ (—Å–ø—Ä–∞–≤–∞, —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ 60%) */}
                <div 
                  style={{ 
                    position: 'relative',
                    cursor: (currentPlayerId === players.find(p => p.isUser)?.id && (turnPhase === 'showing_deck_hint' || turnPhase === 'waiting_deck_action')) ? 'pointer' : 'default',
                    transition: 'transform 0.2s ease, box-shadow 0.3s ease',
                    borderRadius: '8px',
                    padding: '4px',
                    boxShadow: (currentPlayerId === players.find(p => p.isUser)?.id && turnPhase === 'showing_deck_hint')
                      ? '0 0 30px rgba(255, 193, 7, 0.9), 0 0 50px rgba(255, 193, 7, 0.6), 0 0 70px rgba(255, 193, 7, 0.3)' 
                      : currentPlayerId === players.find(p => p.isUser)?.id 
                      ? '0 0 20px rgba(59, 130, 246, 0.6), 0 0 40px rgba(59, 130, 246, 0.4)' 
                      : 'none',
                    animation: (currentPlayerId === players.find(p => p.isUser)?.id && turnPhase === 'showing_deck_hint')
                      ? 'pulse 1.5s ease-in-out infinite'
                      : 'none',
                  }}
                  onClick={() => {
                    const humanPlayer = players.find(p => p.isUser);
                    if (currentPlayerId === humanPlayer?.id && (turnPhase === 'showing_deck_hint' || turnPhase === 'waiting_deck_action')) {
                      console.log('üé¥ [–ö–õ–ò–ö –ù–ê –ö–û–õ–û–î–£] –ò–≥—Ä–æ–∫ –∫–ª–∏–∫–Ω—É–ª –Ω–∞ –∫–æ–ª–æ–¥—É');
                      onDeckClick();
                    } else if (currentPlayerId !== humanPlayer?.id) {
                      console.log('‚õî [–ö–õ–ò–ö –ù–ê –ö–û–õ–û–î–£] –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥');
                    } else {
                      showNotification('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ö–æ–¥–∏—Ç—å –∏–∑ —Ä—É–∫–∏!', 'warning', 2000);
                    }
                  }}
                  onMouseEnter={(e) => {
                    const humanPlayer = players.find(p => p.isUser);
                    if (currentPlayerId === humanPlayer?.id && (turnPhase === 'showing_deck_hint' || turnPhase === 'waiting_deck_action')) {
                      e.currentTarget.style.transform = 'scale(1.15)';
                    }
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'scale(1)';
                  }}
                >
                  <Image
                    src={`${CARDS_PATH}${CARD_BACK}`}
                    alt="Deck"
                    width={36}
                    height={54}
                    className={styles.deckCard}
                    style={{ 
                      opacity: 1,
                      filter: 'none',
                      visibility: 'visible',
                      display: 'block'
                    }}
                    priority
                  />
                  <div className={styles.deckCount}>{deck.length}</div>
                  
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–æ–ª–æ–¥—É */}
                  {currentPlayerId === players.find(p => p.isUser)?.id && turnPhase === 'showing_deck_hint' && (
                    <div style={{
                      position: 'absolute',
                      top: '-35px',
                      left: '50%',
                      transform: 'translateX(-50%)',
                      fontSize: '24px',
                      animation: 'bounce 1s ease-in-out infinite',
                      filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))',
                    }}>üëÜ</div>
                  )}
                  {currentPlayerId === players.find(p => p.isUser)?.id && turnPhase === 'showing_deck_hint' && (
                    <div style={{
                      position: 'absolute',
                      bottom: '-40px',
                      left: '50%',
                      transform: 'translateX(-50%)',
                      whiteSpace: 'nowrap',
                      background: 'rgba(255, 193, 7, 0.95)',
                      color: '#1e293b',
                      padding: '6px 12px',
                      borderRadius: '8px',
                      fontSize: '12px',
                      fontWeight: '600',
                      boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
                      animation: 'pulse 2s ease-in-out infinite',
                    }}>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–¥—É</div>
                  )}
                </div>
              </div>
            )}
              
            {/* –ò–≥—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ —Å—Ç–æ–ª–∞ */}
            {players.map((player, index) => {
              const position = getPlayerPosition(index, players.length);
              const isCurrentTurn = player.id === currentPlayerId;
              const playerCards = player.cards || []; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º player.cards –∏–∑ gameStore!
              const isHumanPlayer = player.isUser === true; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ isUser –∏–∑ gameStore!

                return (
                  <div
                  key={player.id}
                  className={`${styles.playerSeat} ${isCurrentTurn ? styles.activePlayer : ''}`}
                    style={{
                    left: `${position.x}%`,
                    top: `${position.y}%`,
                  }}
                >
                  {/* –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è */}
                    <div className={styles.avatarWrap}>
                      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –∏–≥—Ä–æ–∫–æ–º (–∫–∞–∫ –≤ —á–∞—Ç–µ) */}
                      {playerMessages[player.id] && (
                        <div style={{
                          position: 'absolute',
                          bottom: '100%',
                          left: '50%',
                          transform: 'translateX(-50%)',
                          marginBottom: '8px',
                          background: playerMessages[player.id].type === 'success' 
                            ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                            : playerMessages[player.id].type === 'error'
                            ? 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)'
                            : playerMessages[player.id].type === 'warning'
                            ? 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)'
                            : 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                          color: 'white',
                          padding: '6px 12px',
                          borderRadius: '12px',
                          fontSize: '11px',
                          fontWeight: '700',
                          whiteSpace: 'nowrap',
                          boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
                          zIndex: 1000,
                          animation: 'fadeInDown 0.3s ease-out',
                          border: '2px solid rgba(255,255,255,0.3)'
                        }}>
                          {playerMessages[player.id].text}
                          {/* –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ */}
                          <div style={{
                            position: 'absolute',
                            bottom: '-6px',
                            left: '50%',
                            transform: 'translateX(-50%)',
                            width: '0',
                            height: '0',
                            borderLeft: '6px solid transparent',
                            borderRight: '6px solid transparent',
                            borderTop: `6px solid ${
                              playerMessages[player.id].type === 'success' ? '#059669'
                              : playerMessages[player.id].type === 'error' ? '#dc2626'
                              : playerMessages[player.id].type === 'warning' ? '#d97706'
                              : '#2563eb'
                            }`
                          }}></div>
                        </div>
                      )}
                      
                      <div 
                        className={styles.avatarContainer}
                        onClick={(e) => {
                          e.stopPropagation();
                          handlePlayerClick(player);
                        }}
                        style={{ cursor: 'pointer' }}
                      >
                          <Image 
                        src={playerAvatars[player.id] || player.avatar || '/images/default-avatar.png'}
                        alt={player.name}
                        width={40}
                        height={40}
                            className={styles.avatar}
                          />
                      {player.isBot && (
                        <div className={styles.botBadge}>ü§ñ</div>
                        )}
                          </div>
                    <span className={styles.playerName}>{player.name}</span>
                    </div>
                    
                  {/* –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ */}
                  {playerCards.length > 0 && (
                    <div className={styles.cardsContainer}>
                      {/* –£–ë–†–ê–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ö–ù–û–ü–ö–ò - –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ */}
                      
                      <div className={styles.activeCardContainer}>
                        {playerCards.map((card: any, cardIndex: number) => {
                          // –ö–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π "7_of_spades.png(open)" –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º {rank, suit, image}
                          const cardImage = typeof card === 'string' 
                            ? card.replace('(open)', '').replace('(closed)', '')
                            : card.image || `${card.rank}_of_${card.suit}.png`;
                          
                          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í 1-–π —Å—Ç–∞–¥–∏–∏ –¢–û–õ–¨–ö–û –í–ï–†–•–ù–Ø–Ø –∫–∞—Ä—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!
                          // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –¢–û–õ–¨–ö–û –°–í–û–ò –ö–ê–†–¢–´ –æ—Ç–∫—Ä—ã—Ç—ã!
                          // –õ–û–ì–ò–ö–ê –î–õ–Ø 1-–ô –°–¢–ê–î–ò–ò: –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å
                          const isTopCard = cardIndex === playerCards.length - 1;
                          const showOpen = isHumanPlayer || (gameStage === 1 && isTopCard);
                          const isMyTurn = player.id === currentPlayerId;
                          const canMakeMove = gameStage === 1 && isMyTurn && isHumanPlayer && turnPhase === 'analyzing_hand' && availableTargets.length > 0;
                          const shouldHighlight = gameStage === 1 && isTopCard && canMakeMove;
                          
                          // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–ª–∏
                          let isAvailableTarget = gameStage === 1 && !isHumanPlayer && availableTargets.includes(index) && turnPhase === 'waiting_target_selection';
                          
                          // –¢–∞–∫–∂–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ü–µ–ª–∏ –¥–ª—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
                          if (gameStage === 1 && !isHumanPlayer && turnPhase === 'waiting_deck_action' && revealedDeckCard) {
                            const state = useGameStore.getState();
                            const deckTargets = state.findAvailableTargetsForDeckCard?.(revealedDeckCard) || [];
                            isAvailableTarget = deckTargets.includes(index);
                          }
                          
                          return (
                            <div 
                              key={cardIndex} 
                              className={styles.cardOnPenki} 
                              style={{
                                marginLeft: cardIndex > 0 ? '-48px' : '0', // 80% –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ (60px * 0.8 = 48px) - –í–ò–î–ù–û 12px –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã!
                                zIndex: cardIndex + 1, // –í–ï–†–•–ù–Ø–Ø –∫–∞—Ä—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è, –±–æ–ª—å—à–∏–π –∏–Ω–¥–µ–∫—Å) –ü–û–í–ï–†–• –≤—Å–µ—Ö! –ü–µ—Ä–≤–∞—è=1, –ø–æ—Å–ª–µ–¥–Ω—è—è=–º–∞–∫—Å
                                cursor: (shouldHighlight || isAvailableTarget) ? 'pointer' : 'default',
                                position: 'relative',
                              }}
                              onClick={() => {
                                if (gameStage === 1) {
                                  if (shouldHighlight && isTopCard) {
                                    // –ö–ª–∏–∫ –ø–æ —Å–≤–æ–µ–π –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–µ - –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ü–µ–ª–∏
                                    console.log(`üé¥ [1-—è —Å—Ç–∞–¥–∏—è] –ö–ª–∏–∫ –ø–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ü–µ–ª–∏`);
                                    makeMove('initiate_move');
                                  } else if (isAvailableTarget) {
                                    // –ö–ª–∏–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–ª–∏ - –¥–µ–ª–∞–µ–º —Ö–æ–¥
                                    console.log(`üé¥ [1-—è —Å—Ç–∞–¥–∏—è] –ö–ª–∏–∫ –ø–æ —Ü–µ–ª–∏: ${player.name}`);
                                    makeMove(player.id);
                                  }
                                }
                              }}
                              onMouseEnter={(e) => {
                                if (isAvailableTarget) {
                                  e.currentTarget.style.transform = 'scale(1.05)';
                                }
                              }}
                              onMouseLeave={(e) => {
                                e.currentTarget.style.transform = 'scale(1)';
                              }}
                            >
                              <Image
                                src={showOpen ? `${CARDS_PATH}${cardImage}` : `${CARDS_PATH}${CARD_BACK}`}
                                alt={showOpen ? cardImage : 'Card'}
                                width={60}
                                height={90}
                                loading="eager"
                                style={{ 
                                  borderRadius: '8px',
                                  background: '#ffffff',
                                  opacity: 1,
                                  filter: shouldHighlight || isAvailableTarget ? 'brightness(1.2)' : 'none',
                                  visibility: 'visible',
                                  display: 'block',
                                  boxShadow: shouldHighlight 
                                    ? '0 0 20px rgba(40, 167, 69, 0.8), 0 0 30px rgba(40, 167, 69, 0.5)' 
                                    : isAvailableTarget 
                                    ? '0 0 20px rgba(59, 130, 246, 0.8), 0 0 30px rgba(59, 130, 246, 0.5)'
                                    : 'none',
                                  transition: 'all 0.3s ease',
                                }}
                                priority
                              />
                              {shouldHighlight && (
                                <div style={{
                                  position: 'absolute',
                                  top: '5px',
                                  right: '5px',
                                  width: '10px',
                                  height: '10px',
                                  background: '#28a745',
                                  borderRadius: '50%',
                                  border: '2px solid white',
                                  animation: 'pulse 1.5s ease-in-out infinite',
                                  zIndex: 10,
                                }}></div>
                              )}
                              {isAvailableTarget && (
                                <div style={{
                                  position: 'absolute',
                                  top: '-10px',
                                  left: '50%',
                                  transform: 'translateX(-50%)',
                                  fontSize: '20px',
                                  animation: 'bounce 1s ease-in-out infinite',
                                }}>‚¨áÔ∏è</div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}
                  </div>
                );
              })}
            </div>
          </div>
      )}

      {/* –ü–ê–ù–ï–õ–¨ –ö–ù–û–ü–û–ö –î–ï–ô–°–¢–í–ò–ô - –£–ë–†–ê–ù–ê, –ö–ù–û–ü–ö–ê –ü–ï–†–ï–ù–ï–°–ï–ù–ê –í –†–£–ö–£ –ò–ì–†–û–ö–ê */}

      {/* –†—É–∫–∞ –∏–≥—Ä–æ–∫–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ - –¢–û–õ–¨–ö–û –°–û 2-–ô –°–¢–ê–î–ò–ò! */}
      {players.length > 0 && gameStage >= 2 && humanPlayer && humanPlayer.cards && humanPlayer.cards.length > 0 && (
        <div className={styles.playerHand}>
          {/* –ö–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ –Ω–∞–¥ –∫–∞—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞ */}
          <div style={{
            display: 'flex',
            gap: '6px',
            justifyContent: 'center',
            marginBottom: '8px',
            flexWrap: 'wrap',
          }}>
            {/* –ö–Ω–æ–ø–∫–∞ "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!" */}
            {humanPlayer.cards.length === 1 && !oneCardDeclarations[humanPlayer.id] && (
              <button
                onClick={() => {
                  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ —Å—á–∏—Ç–∞–µ–º –í–°–ï –∫–∞—Ä—Ç—ã, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ!
                  const totalCards = humanPlayer.cards.length;
                  
                  if (totalCards === 1) {
                    declareOneCard(humanPlayer.id);
                    showPlayerMessage(humanPlayer.id, '‚òùÔ∏è –û–î–ù–ê –ö–ê–†–¢–ê!', 'success', 4000);
                  } else {
                    showPlayerMessage(humanPlayer.id, `‚ùå –£ –≤–∞—Å ${totalCards} ${totalCards === 1 ? '–∫–∞—Ä—Ç–∞' : totalCards < 5 ? '–∫–∞—Ä—Ç—ã' : '–∫–∞—Ä—Ç'}!`, 'error', 3000);
                    showNotification(`–ù–µ–ª—å–∑—è –æ–±—ä—è–≤–ª—è—Ç—å "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞" - —É –≤–∞—Å ${totalCards} ${totalCards === 1 ? '–∫–∞—Ä—Ç–∞' : totalCards < 5 ? '–∫–∞—Ä—Ç—ã' : '–∫–∞—Ä—Ç'}`, 'error', 3000);
                  }
                }}
                style={{
                  background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  padding: '6px 12px',
                  fontSize: '11px',
                  fontWeight: '700',
                  cursor: 'pointer',
                  boxShadow: '0 2px 8px rgba(16, 185, 129, 0.4)',
                  whiteSpace: 'nowrap',
                  animation: 'pulse 2s ease-in-out infinite'
                }}
              >
                ‚òùÔ∏è –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!
              </button>
            )}
            
            {/* –ö–Ω–æ–ø–∫–∞ "–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?" - –ü–û–ö–ê–ó–´–í–ê–ï–¢–°–Ø –¢–û–õ–¨–ö–û –î–õ–Ø –ù–ï –û–ë–™–Ø–í–ò–í–®–ò–• */}
            {(() => {
              // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –ù–ï –æ–±—ä—è–≤–∏–ª "–æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
              const targetsNotDeclared = players.filter(p => 
                playersWithOneCard.includes(p.id) && 
                p.id !== humanPlayer.id &&
                !oneCardDeclarations[p.id] // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –æ–±—ä—è–≤–∏–ª!
              );
              
              if (!showAskCardsButton || targetsNotDeclared.length === 0) {
                return null; // ‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –≤—Å–µ –æ–±—ä—è–≤–∏–ª–∏
              }
              
              return (
              <button
                onClick={() => {
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ —Å–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º
                  showPlayerMessage(humanPlayer.id, '‚ùì –°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?', 'info', 2000);
                  
                  const targets = targetsNotDeclared;
                  
                  if (targets.length === 1) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ —Ü–µ–ª—å—é
                    showPlayerMessage(targets[0].id, 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞...', 'warning', 3000);
                    askHowManyCards(humanPlayer.id, targets[0].id);
                  } else if (targets.length > 1) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–¥ –≤—Å–µ–º–∏ —Ü–µ–ª—è–º–∏
                    targets.forEach(t => {
                      showPlayerMessage(t.id, 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å', 'warning', 3000);
                    });
                    // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–±—Ä–∞–Ω–∞ - —Ç–µ–ø–µ—Ä—å –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ store
                    // setPenaltyTargets(targets);
                    // setSelectedCards({});
                    // setShowPenaltyModal(true);
                  } else {
                    showNotification('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'warning', 2000);
                  }
                }}
                style={{
                  background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  padding: '6px 12px',
                  fontSize: '11px',
                  fontWeight: '700',
                  cursor: 'pointer',
                  boxShadow: '0 2px 8px rgba(59, 130, 246, 0.4)',
                  whiteSpace: 'nowrap',
                  animation: 'pulse 2s ease-in-out infinite'
                }}
              >
                ‚ùì –°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç?
              </button>
              );
            })()}
            
            {/* –ö–Ω–æ–ø–∫–∞ "–°–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ" */}
            {!!pendingPenalty && pendingPenalty.contributorsNeeded.includes(humanPlayer.id) && (
              <button
                onClick={() => {
                  if (!pendingPenalty) return;
                  
                  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¢–û–õ–¨–ö–û –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
                  useGameStore.setState({
                    showPenaltyCardSelection: true,
                    penaltyCardSelectionPlayerId: humanPlayer.id
                  });
                }}
                style={{
                  background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  padding: '6px 12px',
                  fontSize: '11px',
                  fontWeight: '700',
                  cursor: 'pointer',
                  boxShadow: '0 2px 8px rgba(239, 68, 68, 0.4)',
                  whiteSpace: 'nowrap'
                }}
              >
                ‚ö†Ô∏è –°–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ
              </button>
            )}
            
            {/* ‚úÖ –ö–ù–û–ü–ö–ê "–í–ó–Ø–¢–¨ –ù–ò–ñ–ù–Æ–Æ –ö–ê–†–¢–£" - –¢–û–õ–¨–ö–û –í –¢–í–û–ô –•–û–î */}
            {gameStage >= 2 && 
             tableStack && 
             tableStack.length > 0 && 
             humanPlayer.id === currentPlayerId && (
              <button
                onClick={() => {
                  takeTableCards();
                }}
                style={{
                  background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                  color: 'white',
                  border: '2px solid #f59e0b',
                  borderRadius: '6px',
                  padding: '8px 16px',
                  fontSize: '13px',
                  fontWeight: '700',
                  cursor: 'pointer',
                  boxShadow: '0 4px 12px rgba(245, 158, 11, 0.6)',
                  whiteSpace: 'nowrap',
                  animation: 'pulse 2s ease-in-out infinite'
                }}
              >
                ‚¨áÔ∏è –í–∑—è—Ç—å –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É ({tableStack.length})
              </button>
            )}
          </div>
          
          <div className={styles.handCards}>
            {humanPlayer.cards.map((card: any, index: number) => {
              // –ö–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π "7_of_spades.png(open)" –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º {rank, suit, image}
              const cardImage = typeof card === 'string' 
                ? card.replace('(open)', '').replace('(closed)', '')
                : card.image || `${card.rank}_of_${card.suit}.png`;
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ —Å—ã–≥—Ä–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É
              const isMyTurn = humanPlayer.id === currentPlayerId;
              const isSelected = selectedHandCard?.id === card.id || selectedHandCard?.image === cardImage;
              
              // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏: –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ —ç—Ç–æ –≤–∞—à —Ö–æ–¥ –∏ –ª–∏–±–æ —Å—Ç–æ–ª –ø—É—Å—Ç–æ–π, –ª–∏–±–æ –∫–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é
              let canPlay = false;
              if (isMyTurn && stage2TurnPhase === 'selecting_card') {
                if (tableStack.length === 0) {
                  canPlay = true; // –ú–æ–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –ª—é–±—É—é –∫–∞—Ä—Ç—É –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª
                } else {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –ø–æ–±–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ
                  const topCard = tableStack[tableStack.length - 1];
                  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ gameStore
                  const cardObj = typeof card === 'string' ? { image: cardImage, open: true } : card;
                  const state = useGameStore.getState();
                  if (state.canBeatCard && topCard && trumpSuit) {
                    canPlay = state.canBeatCard(topCard, cardObj, trumpSuit);
                  }
                }
              }
              
              return (
                <div
                  key={`hand-${index}-${cardImage}`}
                  className={`${styles.handCard} ${isSelected ? styles.selected : ''} ${canPlay ? styles.playable : ''} ${!isMyTurn ? styles.disabled : ''}`}
                  style={{
                    marginLeft: index > 0 ? '-24px' : '0', // 40% –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Ä—É–∫–∏ (60px * 0.4 = 24px)
                    zIndex: isSelected ? 100 : index + 1, // –ü—Ä–∞–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–≤–µ—Ä—Ö –ª–µ–≤–æ–π
                    cursor: isMyTurn ? 'pointer' : 'not-allowed',
                    position: 'relative',
                  }}
                  onClick={() => {
                    if (!isMyTurn) {
                      showNotification('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!', 'warning', 2000);
                      return;
                    }
                    
                    // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ - –≤—ã–±–∏—Ä–∞–µ–º –µ—ë —á–µ—Ä–µ–∑ gameStore
                    const cardObj = typeof card === 'string' 
                      ? { image: cardImage, open: true, id: `card-${index}` }
                      : { ...card, id: card.id || `card-${index}` };
                    
                    console.log(`üé¥ [–ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ] –ò–≥—Ä–æ–∫ –∫–ª–∏–∫–Ω—É–ª –Ω–∞ –∫–∞—Ä—Ç—É:`, cardObj);
                    selectHandCard(cardObj);
                  }}
                >
                  <Image
                    src={`${CARDS_PATH}${cardImage}`}
                    alt={cardImage}
                    width={70}
                    height={105}
                    loading="eager"
                    style={{ 
                      borderRadius: '8px',
                      background: '#ffffff',
                      opacity: 1,
                      filter: canPlay ? 'brightness(1.1)' : 'none',
                      visibility: 'visible',
                      display: 'block',
                      transform: isSelected ? 'translateY(-20px) scale(1.1)' : 'none',
                      transition: 'all 0.3s ease',
                      boxShadow: canPlay ? '0 0 20px rgba(40, 167, 69, 0.6), 0 0 40px rgba(40, 167, 69, 0.3)' : 'none',
                    }}
                    priority
                  />
                  {canPlay && (
                    <div style={{
                      position: 'absolute',
                      top: '5px',
                      right: '5px',
                      width: '12px',
                      height: '12px',
                      background: '#28a745',
                      borderRadius: '50%',
                      border: '2px solid white',
                      animation: 'pulse 1.5s ease-in-out infinite',
                      zIndex: 10,
                    }}></div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
      {isMultiplayer && multiplayerRoom && (
        <MultiplayerGame
          roomId={multiplayerRoom.id}
          roomCode={multiplayerRoom.code}
          isHost={multiplayerRoom.isHost}
          onGameStateUpdate={(gameState) => {
            console.log('üîÑ [Multiplayer] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', gameState);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
          }}
        />
      )}
      
      {/* –≠–∫—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
      {winner && (
        <WinnerScreen
          winner={winner}
          isVisible={showWinnerScreen}
          onClose={() => {
            setShowWinnerScreen(false);
            setWinner(null);
          }}
          onPlayAgain={() => {
            setShowWinnerScreen(false);
            setWinner(null);
            handleStartGame();
          }}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ */}
      <PlayerProfileModal
        isOpen={isProfileModalOpen}
        onClose={() => setIsProfileModalOpen(false)}
        playerData={selectedPlayerProfile}
        onAddFriend={handleAddFriend}
      />

      {/* –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –í–´–ë–û–†–ê –ö–ê–†–¢–´ –î–õ–Ø –®–¢–†–ê–§–ê */}
      <PenaltyCardSelector />
    </div>
  );
}

export default function GamePageContentWrapper(props: GamePageContentProps) {
  return (
    <ErrorBoundary>
      <GamePageContentComponent {...props} />
    </ErrorBoundary>
  );
}