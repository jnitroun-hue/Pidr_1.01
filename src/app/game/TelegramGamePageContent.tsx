'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useSearchParams } from 'next/navigation';
import TelegramGameTable from '../../components/TelegramGameTable';
import { useGameStore } from '../../store/gameStore';
import { useTelegramWebApp } from '../../hooks/useTelegramWebApp';
import { Card as StoreCard } from '../../store/gameStore';
import '../../styles/telegram-optimized.css';

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç –∏–∑ gameStore –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const convertStoreCardToGameCard = (storeCard: StoreCard) => ({
  suit: storeCard.suit || 'hearts',
  rank: storeCard.rank?.toString() || '2'
});

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ gameStore –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞  
const convertStorePlayerToGamePlayer = (storePlayer: any, index: number) => ({
  id: storePlayer.id,
  name: storePlayer.name,
  hand: storePlayer.cards?.filter((c: StoreCard) => c.open).map(convertStoreCardToGameCard) || [],
  isUser: storePlayer.isUser || false,
  avatar: storePlayer.avatar,
  coins: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º gameCoins –∏–∑ store –æ—Ç–¥–µ–ª—å–Ω–æ
  status: storePlayer.isBot ? 'ready' : 'thinking'
});

const TelegramGamePageContent: React.FC = () => {
  const searchParams = useSearchParams();
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ gameStore
  const { 
    isGameActive, 
    gameStage, 
    players, 
    currentPlayerId, 
    deck, 
    tableStack,
    selectedHandCard,
    gameCoins,
    trumpSuit,
    stage2TurnPhase,
    // –ú–µ—Ç–æ–¥—ã
    startGame,
    makeMove,
    selectHandCard,
    playSelectedCard,
    takeTableCards,
    onDeckClick,
    declareOneCard,
    askHowManyCards,
    showNotification
  } = useGameStore();

  const { hapticFeedback, mainButton, backButton, utils } = useTelegramWebApp();
  const [selectedCardIndex, setSelectedCardIndex] = useState<number | null>(null);

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ gameStore –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const gameData = {
    players: players.map(convertStorePlayerToGamePlayer),
    currentPlayerId,
    gameStage: gameStage as 1 | 2 | 3,
    playedCards: tableStack?.map(convertStoreCardToGameCard) || [],
    deckCount: deck.length,
    selectedCardIndex
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    if (!isGameActive && players.length === 0) {
      const playerCount = parseInt(searchParams.get('players') || '4');
      startGame('single', playerCount);
    }
  }, [isGameActive, players.length, searchParams, startGame]);

  // Initialize Telegram WebApp
  useEffect(() => {
    utils.setHeaderColor('#17212b');
    utils.setBackgroundColor('#17212b');
    utils.expand();
    
    // Handle back button
    backButton.show(() => {
      window.history.back();
    });

    return () => {
      backButton.hide();
    };
  }, [utils, backButton]);

  // Game logic handlers - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ gameStore
  const handleCardSelect = useCallback((index: number) => {
    hapticFeedback.light();
    setSelectedCardIndex(index === -1 ? null : index);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ä—É–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    const currentPlayer = players.find(p => p.isUser);
    if (currentPlayer && index >= 0 && index < currentPlayer.cards.length) {
      const card = currentPlayer.cards[index];
      if (card.open) {
        selectHandCard(card);
      }
    }
  }, [hapticFeedback, selectHandCard, players]);

  const handleCardPlay = useCallback((index: number) => {
    const currentPlayer = players.find(p => p.isUser);
    if (!currentPlayer || !currentPlayer.isUser) return;
    
    hapticFeedback.medium();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
    if (gameStage === 1) {
      // –í –ø–µ—Ä–≤–æ–π —Å—Ç–∞–¥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º makeMove
      const card = currentPlayer.cards[index];
      if (card) {
        makeMove(card.id);
      }
    } else if (gameStage === 2 || gameStage === 3) {
      // –í–æ –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–∞–¥–∏—è—Ö –∏–≥—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
      playSelectedCard();
    }
    
    setSelectedCardIndex(null);
  }, [hapticFeedback, players, gameStage, makeMove, playSelectedCard]);

  const handleDeckClick = useCallback(() => {
    hapticFeedback.medium();
    onDeckClick();
  }, [hapticFeedback, onDeckClick]);

  const handlePassTurn = useCallback(() => {
    hapticFeedback.light();
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã
    if (gameStage === 2 && tableStack && tableStack.length > 0) {
      takeTableCards(); // –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏ "–ø–∞—Å" = –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã
    }
  }, [hapticFeedback, gameStage, tableStack, takeTableCards]);

  const handleDeclareOneCard = useCallback(() => {
    const currentPlayer = players.find(p => p.isUser);
    if (currentPlayer) {
      hapticFeedback.heavy();
      declareOneCard(currentPlayer.id);
    }
  }, [hapticFeedback, players, declareOneCard]);

  const canPlayCard = useCallback((card: any, index: number): boolean => {
    const currentPlayer = players.find(p => p.isUser);
    if (!currentPlayer || currentPlayer.id !== currentPlayerId) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞–¥–∏—è–º –∏–≥—Ä—ã
    if (gameStage === 1) {
      return true; // –í –ø–µ—Ä–≤–æ–π —Å—Ç–∞–¥–∏–∏ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
    } else if (gameStage === 2) {
      return stage2TurnPhase === 'selecting_card'; // –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏ —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–µ –≤—ã–±–æ—Ä–∞
    } else {
      return currentPlayer.cards[index]?.open || false; // –í —Ç—Ä–µ—Ç—å–µ–π —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
    }
  }, [players, currentPlayerId, gameStage, stage2TurnPhase]);

  const handlePlayerClick = useCallback((playerId: string) => {
    hapticFeedback.light();
    console.log('Clicked player:', playerId);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏
  }, [hapticFeedback]);

  if (!isGameActive || gameData.players.length === 0) {
    return (
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
        background: 'var(--tg-theme-bg-color)',
        color: 'var(--tg-theme-text-color)'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '32px', marginBottom: '16px' }}>üéÆ</div>
          <div style={{ fontSize: '18px', fontWeight: '600' }}>–ó–∞–≥—Ä—É–∑–∫–∞ P.I.D.R. –∏–≥—Ä—ã...</div>
          <div style={{ fontSize: '14px', opacity: 0.7, marginTop: '8px' }}>
            –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è Telegram WebApp
          </div>
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ */}
          <div style={{
            marginTop: '20px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '8px',
            background: 'linear-gradient(135deg, var(--game-gold) 0%, #f5a623 100%)',
            color: '#0f172a',
            padding: '8px 16px',
            borderRadius: '20px',
            fontSize: '14px',
            fontWeight: '700'
          }}>
            ü™ô {gameCoins.toLocaleString()} –º–æ–Ω–µ—Ç
          </div>
        </div>
      </div>
    );
  }

  return (
    <TelegramGameTable
      players={gameData.players}
      currentPlayerId={gameData.currentPlayerId}
      gameStage={gameData.gameStage}
      playedCards={gameData.playedCards}
      deckCount={gameData.deckCount}
      selectedCardIndex={gameData.selectedCardIndex}
      onPlayerClick={handlePlayerClick}
      onCardSelect={handleCardSelect}
      onCardPlay={handleCardPlay}
      onDeckClick={handleDeckClick}
      canPlayCard={canPlayCard}
      gameActions={{
        onTakeFromDeck: handleDeckClick,
        onPassTurn: handlePassTurn,
        onDeclareOneCard: handleDeclareOneCard
      }}
    />
  );
};

export default TelegramGamePageContent;
