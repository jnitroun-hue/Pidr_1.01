import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

/**
 * POST /api/marketplace/create
 * 
 * –í—ã—Å—Ç–∞–≤–∏—Ç—å NFT –∫–∞—Ä—Ç—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
 * 
 * Body:
 * {
 *   nft_card_id: number,
 *   price_coins?: number,
 *   price_crypto?: number,
 *   crypto_currency?: 'TON' | 'SOL' | 'USDT'
 * }
 * 
 * Headers:
 * - x-telegram-id: telegram user ID
 */
export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ headers
    const telegramIdHeader = request.headers.get('x-telegram-id');
    
    if (!telegramIdHeader) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è x-telegram-id header' },
        { status: 401 }
      );
    }
    
    const userId = parseInt(telegramIdHeader, 10);
    
    if (isNaN(userId)) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id' },
        { status: 400 }
      );
    }
    
    // –ü–∞—Ä—Å–∏–º body
    const body = await request.json();
    const { nft_card_id, price_coins, price_crypto, crypto_currency } = body;
    
    console.log('üè∑Ô∏è [Marketplace Create] –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞:', { 
      userId, 
      nft_card_id, 
      price_coins, 
      price_crypto, 
      crypto_currency 
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!nft_card_id) {
      return NextResponse.json(
        { success: false, error: 'nft_card_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    if (!price_coins && !price_crypto) {
      return NextResponse.json(
        { success: false, error: '–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–Ω—É (price_coins –∏–ª–∏ price_crypto)' },
        { status: 400 }
      );
    }
    
    if (price_crypto && !crypto_currency) {
      return NextResponse.json(
        { success: false, error: '–ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ price_crypto —Ç—Ä–µ–±—É–µ—Ç—Å—è crypto_currency' },
        { status: 400 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ NFT –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: nftCard, error: nftError } = await supabase
      .from('_pidr_nft_cards')
      .select('id, user_id')
      .eq('id', nft_card_id)
      .single();
    
    if (nftError || !nftCard) {
      console.error('‚ùå [Marketplace Create] NFT –Ω–µ –Ω–∞–π–¥–µ–Ω:', nftError);
      return NextResponse.json(
        { success: false, error: 'NFT –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }
    
    if (nftCard.user_id !== userId) {
      return NextResponse.json(
        { success: false, error: '–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç' },
        { status: 403 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    const { data: existingListing } = await supabase
      .from('_pidr_nft_marketplace_listings')
      .select('id')
      .eq('nft_card_id', nft_card_id)
      .eq('status', 'active')
      .single();
    
    if (existingListing) {
      return NextResponse.json(
        { success: false, error: '–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É' },
        { status: 400 }
      );
    }
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ—Ç
    const { data: listing, error: insertError } = await supabase
      .from('_pidr_nft_marketplace_listings')
      .insert({
        nft_card_id,
        seller_user_id: userId,
        price_coins: price_coins || null,
        price_crypto: price_crypto || null,
        crypto_currency: crypto_currency || null,
        status: 'active'
      })
      .select()
      .single();
    
    if (insertError) {
      console.error('‚ùå [Marketplace Create] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞:', insertError);
      return NextResponse.json(
        { success: false, error: insertError.message },
        { status: 500 }
      );
    }
    
    console.log('‚úÖ [Marketplace Create] –õ–æ—Ç —Å–æ–∑–¥–∞–Ω:', listing.id);
    
    return NextResponse.json({
      success: true,
      listing
    });
    
  } catch (error: any) {
    console.error('‚ùå [Marketplace Create] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    );
  }
}

