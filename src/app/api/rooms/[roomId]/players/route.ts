import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { requireAuth } from '@/lib/auth-utils';

// GET /api/rooms/[roomId]/players - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
export async function GET(req: NextRequest, { params }: { params: { roomId: string } }) {
  try {
    const auth = requireAuth(req);
    if (auth.error) {
      return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
    }

    const { roomId } = params;
    
    if (!roomId) {
      return NextResponse.json({ success: false, message: 'Room ID required' }, { status: 400 });
    }

    console.log(`üîç [GET /api/rooms/${roomId}/players] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã`);

    // –£–ü–†–û–©–ï–ù–ù–´–ô –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ JOIN
    const { data: players, error } = await supabase
      .from('_pidr_room_players')
      .select('user_id, username, position, is_ready, joined_at')
      .eq('room_id', roomId)
      .order('position', { ascending: true });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤: ' + error.message 
      }, { status: 500 });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    const formattedPlayers = players.map(player => ({
      user_id: player.user_id,
      username: player.username || '–ò–≥—Ä–æ–∫',
      position: player.position,
      is_ready: player.is_ready,
      joined_at: player.joined_at,
      avatar_url: null // –ü–æ–∫–∞ –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–æ–≤
    }));

    console.log(`‚úÖ [GET /api/rooms/${roomId}/players] –ù–∞–π–¥–µ–Ω–æ ${formattedPlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);

    return NextResponse.json({
      success: true,
      players: formattedPlayers
    });

  } catch (error: any) {
    console.error('‚ùå Room players GET error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}
