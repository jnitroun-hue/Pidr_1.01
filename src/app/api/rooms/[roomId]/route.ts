import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { requireAuth } from '@/lib/auth-utils';

// DELETE /api/rooms/[roomId] - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
export async function DELETE(req: NextRequest, { params }: { params: { roomId: string } }) {
  try {
    const auth = requireAuth(req);
    if (auth.error) {
      return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
    }

    const userId = auth.userId as string;
    const { roomId } = params;
    
    if (!roomId) {
      return NextResponse.json({ success: false, message: 'Room ID required' }, { status: 400 });
    }

    console.log(`üóëÔ∏è [DELETE /api/rooms/${roomId}] –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ö–æ—Å—Ç
    const { data: room, error: roomError } = await supabase
      .from('_pidr_rooms')
      .select('id, host_id, name')
      .eq('id', roomId)
      .single();

    if (roomError || !room) {
      return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ö–æ—Å—Ç
    if (room.host_id !== userId) {
      return NextResponse.json({ 
        success: false, 
        message: '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É' 
      }, { status: 403 });
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    const { error: playersError } = await supabase
      .from('_pidr_room_players')
      .delete()
      .eq('room_id', roomId);

    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: ' + playersError.message 
      }, { status: 500 });
    }

    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–Ω–∞—Ç—É
    const { error: deleteError } = await supabase
      .from('_pidr_rooms')
      .delete()
      .eq('id', roomId);

    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', deleteError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ' + deleteError.message 
      }, { status: 500 });
    }

    console.log(`‚úÖ [DELETE /api/rooms/${roomId}] –ö–æ–º–Ω–∞—Ç–∞ "${room.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);

    return NextResponse.json({
      success: true,
      message: `–ö–æ–º–Ω–∞—Ç–∞ "${room.name}" —É–¥–∞–ª–µ–Ω–∞`
    });

  } catch (error: any) {
    console.error('‚ùå Room DELETE error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}
