import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

// ‚úÖ SSE ENDPOINT –î–õ–Ø REAL-TIME –û–ë–ù–û–í–õ–ï–ù–ò–ô –ö–û–ú–ù–ê–¢–´
export async function GET(
  request: NextRequest,
  context: { params: Promise<{ roomId: string }> }
) {
  const { roomId } = await context.params;
  
  console.log(`üîå [SSE] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
  
  // ‚úÖ –°–û–ó–î–ê–Å–ú SSE STREAM
  const encoder = new TextEncoder();
  let intervalId: NodeJS.Timeout;
  
  const stream = new ReadableStream({
    async start(controller) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      controller.enqueue(encoder.encode(`data: ${JSON.stringify({ type: 'connected', roomId })}\n\n`));
      
      // ‚úÖ –ü–û–î–ü–ò–°–´–í–ê–ï–ú–°–Ø –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ö–û–ú–ù–ê–¢–ï
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase Realtime –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const channel = supabase
        .channel(`room_${roomId}`)
        .on(
          'postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: '_pidr_room_players',
            filter: `room_id=eq.${roomId}`
          },
          async (payload) => {
            console.log(`üì° [SSE] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, payload.eventType);
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            const { data: players, error } = await supabase
              .from('_pidr_room_players')
              .select('*')
              .eq('room_id', roomId)
              .order('position', { ascending: true });
            
            if (error) {
              console.error(`‚ùå [SSE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:`, error);
              return;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            const update = {
              type: 'room_update',
              roomId,
              players: players || [],
              timestamp: new Date().toISOString()
            };
            
            try {
              controller.enqueue(encoder.encode(`data: ${JSON.stringify(update)}\n\n`));
            } catch (err) {
              console.error(`‚ùå [SSE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, err);
            }
          }
        )
        .subscribe((status) => {
          console.log(`üì° [SSE] –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, status);
        });
      
      // ‚úÖ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò –û–¢–ü–†–ê–í–õ–Ø–ï–ú HEARTBEAT
      intervalId = setInterval(() => {
        try {
          controller.enqueue(encoder.encode(': heartbeat\n\n'));
        } catch (err) {
          console.error(`‚ùå [SSE] –û—à–∏–±–∫–∞ heartbeat:`, err);
          clearInterval(intervalId);
          supabase.removeChannel(channel);
        }
      }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      
      // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø
      request.signal.addEventListener('abort', () => {
        console.log(`üîå [SSE] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
        clearInterval(intervalId);
        supabase.removeChannel(channel);
        try {
          controller.close();
        } catch (err) {
          // –£–∂–µ –∑–∞–∫—Ä—ã—Ç
        }
      });
    },
    cancel() {
      console.log(`üîå [SSE] –ü–æ—Ç–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
      clearInterval(intervalId);
    }
  });
  
  return new NextResponse(stream, {
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache, no-transform',
      'Connection': 'keep-alive',
      'X-Accel-Buffering': 'no', // –î–ª—è nginx
    },
  });
}

