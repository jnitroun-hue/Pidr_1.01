import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { requireAuth } from '@/lib/auth-utils';

// ü§ñ API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–û–¢–ê–ú–ò –í –ö–û–ú–ù–ê–¢–ï
export async function POST(
  request: NextRequest,
  context: { params: Promise<{ roomId: string }> }
) {
  try {
    const params = await context.params;
    // –ü–†–û–í–ï–†–Ø–ï–ú –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ
    const auth = await requireAuth(request);
    if (auth.error) {
      return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
    }

    const telegramId = auth.userId as string; // ‚úÖ –≠—Ç–æ telegram_id!
    const roomId = params.roomId;
    const body = await request.json();
    const { action } = body; // 'add' –∏–ª–∏ 'remove'

    console.log(`ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏: telegramId=${telegramId}, roomId=${roomId}, action=${action}`);

    // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú UUID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û TELEGRAM_ID
    const { data: userData, error: userError } = await supabase
      .from('_pidr_users')
      .select('id')
      .eq('telegram_id', telegramId)
      .single();
    
    if (userError || !userData) {
      console.error(`‚ùå [BOTS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:`, userError);
      return NextResponse.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }
    
    const userUUID = userData.id;
    console.log(`üë§ [BOTS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: UUID=${userUUID}, telegram_id=${telegramId}`);

    // –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï –ö–û–ú–ù–ê–¢–´ –ò –ü–†–ê–í–ê –•–û–°–¢–ê
    const { data: room, error: roomError } = await supabase
      .from('_pidr_rooms')
      .select('*')
      .eq('id', roomId)
      .single();

    if (roomError || !room) {
      return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }

    // –ü–†–û–í–ï–†–Ø–ï–ú –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –•–û–°–¢–û–ú (–°–†–ê–í–ù–ò–í–ê–ï–ú UUID –° UUID!)
    console.log(`üîç [BOTS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–∞:`, {
      'room.host_id (UUID)': room.host_id,
      'userUUID (UUID)': userUUID,
      'are_equal': room.host_id === userUUID,
      'telegramId (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)': telegramId
    });
    
    if (room.host_id !== userUUID) {
      console.error(`‚ùå [BOTS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} (UUID: ${userUUID}) –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã (—Ö–æ—Å—Ç UUID: ${room.host_id})`);
      return NextResponse.json({ success: false, message: '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–∞–º–∏' }, { status: 403 });
    }
    
    console.log(`‚úÖ [BOTS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} (UUID: ${userUUID}) —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);

    if (action === 'add') {
      // –î–û–ë–ê–í–õ–Ø–ï–ú –ë–û–¢–ê
      
      // –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–£–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ì–†–û–ö–û–í
      const { data: currentPlayers, error: playersError } = await supabase
        .from('_pidr_room_players')
        .select('position')
        .eq('room_id', roomId)
        .order('position', { ascending: false });

      if (playersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: ' + playersError.message 
        }, { status: 500 });
      }

      // –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï –ü–†–ï–í–´–®–ï–ù –õ–ò –õ–ò–ú–ò–¢
      if (currentPlayers.length >= room.max_players) {
        return NextResponse.json({ 
          success: false, 
          message: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: ${room.max_players}` 
        }, { status: 400 });
      }

      // –ì–ï–ù–ï–†–ò–†–£–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ô ID –î–õ–Ø –ë–û–¢–ê (–û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ô)
      const botId = -(Date.now() + Math.floor(Math.random() * 1000));
      const maxPosition = currentPlayers[0]?.position || 0;
      const nextPosition = maxPosition + 1;

      // –°–ü–ò–°–û–ö –ò–ú–ï–ù –ë–û–¢–û–í
      const botNames = [
        '–ê–Ω–¥—Ä–µ–π_–ë–û–¢', '–ú–∞–∫—Å–∏–º_–ë–û–¢', '–î–º–∏—Ç—Ä–∏–π_–ë–û–¢', '–ê–ª–µ–∫—Å–µ–π_–ë–û–¢', 
        '–°–µ—Ä–≥–µ–π_–ë–û–¢', '–í–ª–∞–¥–∏–º–∏—Ä_–ë–û–¢', '–ù–∏–∫–æ–ª–∞–π_–ë–û–¢', '–ò–≥–æ—Ä—å_–ë–û–¢'
      ];
      
      const usedNames = currentPlayers.map((p: any) => p.username).filter((name: string) => name?.includes('_–ë–û–¢'));
      const availableNames = botNames.filter(name => !usedNames.includes(name));
      const botName = availableNames[0] || `–ë–û–¢_${nextPosition}`;

      console.log(`ü§ñ –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞: id=${botId}, name=${botName}, position=${nextPosition}`);

      // –î–û–ë–ê–í–õ–Ø–ï–ú –ë–û–¢–ê –í –ë–ê–ó–£
      const { error: botError } = await supabase
        .from('_pidr_room_players')
        .insert({
          room_id: roomId,
          user_id: botId.toString(), // –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ô ID –ö–ê–ö –°–¢–†–û–ö–ê
          username: botName,
          position: nextPosition,
          is_ready: true, // –ë–û–¢–´ –í–°–ï–ì–î–ê –ì–û–¢–û–í–´
          avatar_url: null
        });

      if (botError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', botError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: ' + botError.message 
        }, { status: 500 });
      }

      // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö –ò–ì–†–û–ö–û–í
      const { error: updateError } = await supabase
        .from('_pidr_rooms')
        .update({ current_players: room.current_players + 1 })
        .eq('id', roomId);

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', updateError);
      }

      console.log(`‚úÖ –ë–æ—Ç ${botName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);

      return NextResponse.json({ 
        success: true, 
        message: `–ë–æ—Ç ${botName} –¥–æ–±–∞–≤–ª–µ–Ω`,
        bot: {
          id: botId,
          name: botName,
          position: nextPosition
        }
      });

    } else if (action === 'remove') {
      // –£–î–ê–õ–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ï–ì–û –ë–û–¢–ê
      
      const { data: bots, error: botsError } = await supabase
        .from('_pidr_room_players')
        .select('*')
        .eq('room_id', roomId)
        .lt('user_id', '0') // –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï ID = –ë–û–¢–´
        .order('position', { ascending: false })
        .limit(1);

      if (botsError || !bots || bots.length === 0) {
        return NextResponse.json({ 
          success: false, 
          message: '–ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' 
        }, { status: 400 });
      }

      const botToRemove = bots[0];
      console.log(`ü§ñ –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞: ${botToRemove.username}`);

      // –£–î–ê–õ–Ø–ï–ú –ë–û–¢–ê
      const { error: removeError } = await supabase
        .from('_pidr_room_players')
        .delete()
        .eq('id', botToRemove.id);

      if (removeError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞:', removeError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: ' + removeError.message 
        }, { status: 500 });
      }

      // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö –ò–ì–†–û–ö–û–í
      const { error: updateError } = await supabase
        .from('_pidr_rooms')
        .update({ current_players: room.current_players - 1 })
        .eq('id', roomId);

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', updateError);
      }

      console.log(`‚úÖ –ë–æ—Ç ${botToRemove.username} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);

      return NextResponse.json({ 
        success: true, 
        message: `–ë–æ—Ç ${botToRemove.username} —É–¥–∞–ª–µ–Ω`
      });

    } else {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "add" –∏–ª–∏ "remove"' 
      }, { status: 400 });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –±–æ—Ç–æ–≤:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
