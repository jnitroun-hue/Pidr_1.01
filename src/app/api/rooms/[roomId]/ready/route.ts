import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { requireAuth } from '@/lib/auth-utils';

// üî¥ API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–û–¢–û–í–ù–û–°–¢–¨–Æ –ò–ì–†–û–ö–û–í
export async function POST(
  request: NextRequest,
  { params }: { params: { roomId: string } }
) {
  try {
    // –ü–†–û–í–ï–†–Ø–ï–ú –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ
    const auth = await requireAuth(request);
    if (auth.error) {
      return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
    }

    const userId = auth.userId as string;
    const roomId = params.roomId;
    const body = await request.json();
    const { isReady } = body;

    console.log(`üî¥ –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: userId=${userId}, roomId=${roomId}, isReady=${isReady}`);

    // –û–ë–ù–û–í–õ–Ø–ï–ú –ì–û–¢–û–í–ù–û–°–¢–¨ –ò–ì–†–û–ö–ê
    const { error } = await supabase
      .from('_pidr_room_players')
      .update({ is_ready: isReady })
      .eq('room_id', roomId)
      .eq('user_id', userId);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ' + error.message 
      }, { status: 500 });
    }

    // –ü–û–õ–£–ß–ê–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –ò–ì–†–û–ö–û–í
    const { data: players, error: playersError } = await supabase
      .from('_pidr_room_players')
      .select('user_id, username, position, is_ready, avatar_url')
      .eq('room_id', roomId)
      .order('position');

    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: ' + playersError.message 
      }, { status: 500 });
    }

    console.log(`‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò–≥—Ä–æ–∫–æ–≤: ${players?.length || 0}`);

    return NextResponse.json({ 
      success: true, 
      players: players || []
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}

// üîç –ü–û–õ–£–ß–ò–¢–¨ –°–¢–ê–¢–£–° –ì–û–¢–û–í–ù–û–°–¢–ò –í–°–ï–• –ò–ì–†–û–ö–û–í
export async function GET(
  request: NextRequest,
  { params }: { params: { roomId: string } }
) {
  try {
    const roomId = params.roomId;

    // –ü–û–õ–£–ß–ê–ï–ú –í–°–ï–• –ò–ì–†–û–ö–û–í –° –ò–• –ì–û–¢–û–í–ù–û–°–¢–¨–Æ
    const { data: players, error } = await supabase
      .from('_pidr_room_players')
      .select('user_id, username, position, is_ready, avatar_url')
      .eq('room_id', roomId)
      .order('position');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ' + error.message 
      }, { status: 500 });
    }

    const readyCount = players?.filter(p => p.is_ready).length || 0;
    const totalCount = players?.length || 0;
    const allReady = readyCount === totalCount && totalCount > 1;

    console.log(`üîç –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${readyCount}/${totalCount}, allReady=${allReady}`);

    return NextResponse.json({ 
      success: true, 
      players: players || [],
      readyCount,
      totalCount,
      allReady
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
