/**
 * ============================================================
 * PROFESSIONAL MULTIPLAYER ROOMS API
 * ============================================================
 * API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
 * –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: Redis + PostgreSQL
 * 
 * –ì–∞—Ä–∞–Ω—Ç–∏–∏:
 * - –û–¥–∏–Ω –∏–≥—Ä–æ–∫ = –æ–¥–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ (—Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
 * - –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å distributed locks
 * - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
 */

import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import { requireAuth } from '../../../lib/auth-utils';
import {
  atomicJoinRoom,
  atomicLeaveRoom,
  canPlayerJoinRoom,
  getPlayerRoom,
  removePlayerFromAllRooms,
  getRoomDetails,
  healthCheck,
} from '../../../lib/multiplayer/player-state-manager';

// ============================================================
// UTILITY FUNCTIONS
// ============================================================

function generateRoomCode(): string {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  let code = '';
  for (let i = 0; i < 6; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

// ============================================================
// GET /api/rooms - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
// ============================================================

export async function GET(req: NextRequest) {
  console.log('üîç GET /api/rooms - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { searchParams } = new URL(req.url);
    const type = searchParams.get('type') || 'public';
    
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    let query = supabase
      .from('_pidr_rooms')
      .select('*')
      .in('status', ['waiting', 'playing'])
      .order('created_at', { ascending: false })
      .limit(50);
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    if (type === 'public') {
      query = query.eq('is_private', false);
    }
    
    const { data: rooms, error } = await query;
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç: ' + error.message 
      }, { status: 500 });
    }
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ—Å—Ç–∞—Ö
    const roomsWithHosts = await Promise.all((rooms || []).map(async (room: any) => {
      const { data: hostUser } = await supabase
        .from('_pidr_users')
        .select('username, avatar_url')
        .eq('id', room.host_id)
        .single();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Redis
      const roomDetails = await getRoomDetails(room.id);
      const actualPlayerCount = roomDetails?.playerCount || room.current_players;
      
      return {
        id: room.id,
        room_code: room.room_code,
        name: room.name,
        max_players: room.max_players,
        current_players: actualPlayerCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ Redis
        status: room.status,
        is_private: room.is_private,
        created_at: room.created_at,
        users: { 
          username: hostUser?.username || '–•–æ—Å—Ç', 
          avatar: hostUser?.avatar_url || null 
        },
      };
    }));
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: ${roomsWithHosts.length}`);
    
    return NextResponse.json({ 
      success: true, 
      rooms: roomsWithHosts
    });
    
  } catch (error: any) {
    console.error('‚ùå Rooms GET error:', error);
    return NextResponse.json({ 
      success: false, 
      message: 'Internal server error' 
    }, { status: 500 });
  }
}

// ============================================================
// POST /api/rooms - –°–æ–∑–¥–∞–Ω–∏–µ / –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ / –í—ã—Ö–æ–¥
// ============================================================

export async function POST(req: NextRequest) {
  console.log('üè† POST /api/rooms');
  
  try {
    const auth = requireAuth(req);
    if (auth.error) {
      return NextResponse.json({ 
        success: false, 
        message: auth.error 
      }, { status: 401 });
    }
    
    const userId = auth.userId as string;
    const body = await req.json();
    const { action } = body;
    
    console.log(`üìã Action: ${action}, User: ${userId}`);
    
    // ============================================================
    // ACTION: CREATE - –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    // ============================================================
    
    if (action === 'create') {
      const { name, maxPlayers, gameMode, hasPassword, password, isPrivate } = body;
      
      console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã...');
      
      // 1. –ü–†–û–í–ï–†–Ø–ï–ú –ú–û–ñ–ï–¢ –õ–ò –ò–ì–†–û–ö –°–û–ó–î–ê–¢–¨ –ö–û–ú–ù–ê–¢–£
      const currentRoomId = await getPlayerRoom(userId);
      
      if (currentRoomId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –≤ –ë–î
        const { data: existingRoom } = await supabase
          .from('_pidr_rooms')
          .select('id, name, room_code')
          .eq('id', currentRoomId)
          .eq('host_id', userId)
          .in('status', ['waiting', 'playing'])
          .single();
        
        if (existingRoom) {
          return NextResponse.json({ 
            success: false, 
            message: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ "${existingRoom.name}" (${existingRoom.room_code}). –ó–∞–∫—Ä–æ–π—Ç–µ –µ—ë —Å–Ω–∞—á–∞–ª–∞.`,
            currentRoom: existingRoom
          }, { status: 400 });
        } else {
          // –ö–æ–º–Ω–∞—Ç–∞ –µ—Å—Ç—å –≤ Redis –Ω–æ –Ω–µ –≤ –ë–î - –æ—á–∏—â–∞–µ–º Redis
          await removePlayerFromAllRooms(userId);
        }
      }
      
      // 2. –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      const { data: userData, error: userError } = await supabase
        .from('_pidr_users')
        .select('username')
        .eq('id', userId)
        .single();
      
      if (userError || !userData?.username) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
        }, { status: 500 });
      }
      
      // 3. –°–û–ó–î–ê–ï–ú –ö–û–ú–ù–ê–¢–£ –í –ë–î
      const roomCode = generateRoomCode();
      const roomSettings = {
        gameMode: gameMode || 'casual',
        isRanked: gameMode === 'ranked',
        allowBots: true,
        maxPlayers: maxPlayers || 6,
        hasPassword: hasPassword || false
      };
      
      const { data: room, error: roomError } = await supabase
        .from('_pidr_rooms')
        .insert({
          room_code: roomCode,
          name: name || '–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
          host_id: userId,
          max_players: maxPlayers || 6,
          current_players: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ atomicJoinRoom
          status: 'waiting',
          is_private: isPrivate || false,
          password: hasPassword ? password : null,
          settings: roomSettings,
          created_at: new Date().toISOString()
        })
        .select()
        .single();
      
      if (roomError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', roomError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ' + roomError.message 
        }, { status: 500 });
      }
      
      // 4. –ê–¢–û–ú–ê–†–ù–û –î–û–ë–ê–í–õ–Ø–ï–ú –•–û–°–¢–ê –í –ö–û–ú–ù–ê–¢–£
      const joinResult = await atomicJoinRoom({
        userId,
        username: userData.username,
        roomId: room.id,
        roomCode,
        maxPlayers: maxPlayers || 6,
        isHost: true, // –°–æ–∑–¥–∞—Ç–µ–ª—å = —Ö–æ—Å—Ç
      });
      
      if (!joinResult.success) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        await supabase.from('_pidr_rooms').delete().eq('id', room.id);
        
        return NextResponse.json({ 
          success: false, 
          message: joinResult.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É' 
        }, { status: 500 });
      }
      
      console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomCode}, —Ö–æ—Å—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${joinResult.position}`);
      
      return NextResponse.json({ 
        success: true, 
        room: {
          id: room.id,
          roomCode,
          name: room.name,
          status: room.status,
          position: joinResult.position,
          isHost: true
        }
      });
    }
    
    // ============================================================
    // ACTION: JOIN - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    // ============================================================
    
    if (action === 'join') {
      const { roomCode, password } = body;
      
      if (!roomCode) {
        return NextResponse.json({ 
          success: false, 
          message: '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        }, { status: 400 });
      }
      
      console.log(`üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ: ${roomCode}`);
      
      // 1. –ù–ê–•–û–î–ò–ú –ö–û–ú–ù–ê–¢–£ –í –ë–î
      const { data: room, error: roomError } = await supabase
        .from('_pidr_rooms')
        .select('*')
        .eq('room_code', roomCode.toUpperCase())
        .in('status', ['waiting', 'playing'])
        .single();
      
      if (roomError || !room) {
        console.error('‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', roomError);
        return NextResponse.json({ 
          success: false, 
          message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞' 
        }, { status: 404 });
      }
      
      // 2. –ü–†–û–í–ï–†–Ø–ï–ú –ü–ê–†–û–õ–¨
      if (room.password && room.password !== password) {
        return NextResponse.json({ 
          success: false, 
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
        }, { status: 403 });
      }
      
      // 3. –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      const { data: userData, error: userError } = await supabase
        .from('_pidr_users')
        .select('username')
        .eq('id', userId)
        .single();
      
      if (userError || !userData?.username) {
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
        }, { status: 500 });
      }
      
      // 4. –ü–†–û–í–ï–†–Ø–ï–ú –ú–û–ñ–ï–¢ –õ–ò –ò–ì–†–û–ö –ü–†–ò–°–û–ï–î–ò–ù–ò–¢–¨–°–Ø
      const canJoin = await canPlayerJoinRoom(userId, room.id);
      
      if (!canJoin.canJoin && canJoin.currentRoomId !== room.id) {
        // –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ
        const { data: currentRoom } = await supabase
          .from('_pidr_rooms')
          .select('name, room_code')
          .eq('id', canJoin.currentRoomId)
          .single();
        
        return NextResponse.json({ 
          success: false, 
          message: `–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ "${currentRoom?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}" (${currentRoom?.room_code || '?'}). –ü–æ–∫–∏–Ω—å—Ç–µ –µ—ë —Å–Ω–∞—á–∞–ª–∞.`,
          currentRoomId: canJoin.currentRoomId
        }, { status: 400 });
      }
      
      // 5. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –ò–ì–†–û–ö –•–û–°–¢–û–ú
      const isHost = room.host_id === userId;
      
      // 6. –ê–¢–û–ú–ê–†–ù–û –ü–†–ò–°–û–ï–î–ò–ù–Ø–ï–ú–°–Ø –ö –ö–û–ú–ù–ê–¢–ï
      const joinResult = await atomicJoinRoom({
        userId,
        username: userData.username,
        roomId: room.id,
        roomCode: room.room_code,
        maxPlayers: room.max_players,
        isHost,
      });
      
      if (!joinResult.success) {
        return NextResponse.json({ 
          success: false, 
          message: joinResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ',
          currentRoomId: joinResult.currentRoomId
        }, { status: 400 });
      }
      
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${room.room_code} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${joinResult.position}`);
      
      return NextResponse.json({ 
        success: true, 
        room: {
          id: room.id,
          roomCode: room.room_code,
          name: room.name,
          position: joinResult.position,
          isHost
        }
      });
    }
    
    // ============================================================
    // ACTION: LEAVE - –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    // ============================================================
    
    if (action === 'leave') {
      const { roomId } = body;
      
      if (!roomId) {
        return NextResponse.json({ 
          success: false, 
          message: 'ID –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        }, { status: 400 });
      }
      
      console.log(`üö∂ –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
      
      // –ê–¢–û–ú–ê–†–ù–û –í–´–•–û–î–ò–ú –ò–ó –ö–û–ú–ù–ê–¢–´
      const leaveResult = await atomicLeaveRoom({
        userId,
        roomId,
      });
      
      if (!leaveResult.success) {
        return NextResponse.json({ 
          success: false, 
          message: leaveResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã' 
        }, { status: 500 });
      }
      
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${userId} –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É (–µ—Å–ª–∏ —Ö–æ—Å—Ç –≤—ã—à–µ–ª –∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è)
      const { data: room } = await supabase
        .from('_pidr_rooms')
        .select('host_id, current_players')
        .eq('id', roomId)
        .single();
      
      if (room && room.host_id === userId && room.current_players === 0) {
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É —Ö–æ—Å—Ç–∞ ${roomId}`);
        await supabase
          .from('_pidr_rooms')
          .delete()
          .eq('id', roomId);
      }
      
      return NextResponse.json({ 
        success: true, 
        message: '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã' 
      });
    }
    
    // ============================================================
    // ACTION: HEALTH - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    // ============================================================
    
    if (action === 'health') {
      const health = await healthCheck();
      
      return NextResponse.json({
        success: health.redis && health.database,
        health,
        timestamp: new Date().toISOString()
      });
    }
    
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ' + action 
    }, { status: 400 });
    
  } catch (error: any) {
    console.error('‚ùå Rooms POST error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}

// ============================================================
// DELETE /api/rooms - –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç)
// ============================================================

export async function DELETE(req: NextRequest) {
  try {
    const auth = requireAuth(req);
    if (auth.error) {
      return NextResponse.json({ 
        success: false, 
        message: auth.error 
      }, { status: 401 });
    }
    
    const userId = auth.userId as string;
    const { searchParams } = new URL(req.url);
    const roomId = searchParams.get('roomId');
    
    if (!roomId) {
      return NextResponse.json({ 
        success: false, 
        message: 'Room ID required' 
      }, { status: 400 });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ö–æ—Å—Ç –∫–æ–º–Ω–∞—Ç—ã
    const { data: room } = await supabase
      .from('_pidr_rooms')
      .select('host_id')
      .eq('id', roomId)
      .single();
    
    if (!room) {
      return NextResponse.json({ 
        success: false, 
        message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      }, { status: 404 });
    }
    
    if (room.host_id !== userId) {
      return NextResponse.json({ 
        success: false, 
        message: '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É' 
      }, { status: 403 });
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
    const { error: deleteError } = await supabase
      .from('_pidr_rooms')
      .delete()
      .eq('id', roomId);
    
    if (deleteError) {
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ' + deleteError.message 
      }, { status: 500 });
    }
    
    console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞ —Ö–æ—Å—Ç–æ–º ${userId}`);
    
    return NextResponse.json({ 
      success: true, 
      message: '–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞' 
    });
    
  } catch (error: any) {
    console.error('‚ùå Rooms DELETE error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
