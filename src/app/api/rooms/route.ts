import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import { checkRateLimit, getRateLimitId } from '../../../lib/ratelimit';
import { getUserIdFromRequest, requireAuth } from '../../../lib/auth-utils';

function generateRoomCode(): string {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  let code = '';
  for (let i = 0; i < 6; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

// GET /api/rooms - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
export async function GET(req: NextRequest) {
  console.log('üîç GET /api/rooms - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã');
  
  try {
    const { searchParams } = new URL(req.url);
    const type = searchParams.get('type') || 'public';
    
    console.log('üìã –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–Ω–∞—Ç:', type);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫');
      return NextResponse.json({ 
        success: true, 
        rooms: [],
        message: 'Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∏–≥—Ä–æ–∫–æ–≤
    let query = supabase
      .from('_pidr_rooms')
      .select(`
        id, 
        room_code, 
        name, 
        max_players, 
        current_players, 
        status, 
        is_private, 
        created_at,
        _pidr_users!_pidr_rooms_host_id_fkey (
          username, 
          first_name,
          photo_url
        ),
        _pidr_room_players (
          user_id,
          position,
          is_ready,
          _pidr_users (
            username,
            first_name
          )
        )
      `);

    // –§–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (type === 'joinable') {
      query = query
        .eq('status', 'waiting')
        .eq('is_private', false)
        .lt('current_players', 'max_players');
    } else if (type === 'playing') {
      query = query.eq('status', 'playing');
    } else {
      // public - –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
      query = query
        .eq('is_private', false)
        .in('status', ['waiting', 'playing']);
    }

    const { data: rooms, error } = await query
      .order('created_at', { ascending: false })
      .limit(50);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç: ' + error.message 
      }, { status: 500 });
    }

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rooms?.length || 0} –∫–æ–º–Ω–∞—Ç`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º –∏–≥—Ä–æ–∫–æ–≤
    const formattedRooms = (rooms || []).map((room: any) => {
      // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã _pidr_room_players
      const actualPlayerCount = room._pidr_room_players?.length || 0;
      
      console.log(`üéÆ –ö–æ–º–Ω–∞—Ç–∞ ${room.room_code}: ${actualPlayerCount} –∏–≥—Ä–æ–∫–æ–≤ (–±—ã–ª–æ ${room.current_players})`);

      return {
        id: room.id,
        room_code: room.room_code,
        name: room.name,
        max_players: room.max_players,
        current_players: actualPlayerCount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        status: room.status,
        is_private: room.is_private,
        created_at: room.created_at,
        users: room._pidr_users ? {
          username: room._pidr_users.username || room._pidr_users.first_name || '–ò–≥—Ä–æ–∫',
          avatar: room._pidr_users.photo_url || null
        } : null,
        players: room._pidr_room_players?.map((player: any) => ({
          userId: player.user_id,
          position: player.position,
          isReady: player.is_ready,
          username: player._pidr_users?.username || player._pidr_users?.first_name || '–ò–≥—Ä–æ–∫'
        })) || []
      };
    });

    return NextResponse.json({ 
      success: true, 
      rooms: formattedRooms
    });

  } catch (error) {
    console.error('‚ùå Rooms GET error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error as Error).message
    }, { status: 500 });
  }
}

// Original authenticated function (renamed to avoid conflicts)
async function getAuthenticatedRooms(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { searchParams } = new URL(req.url);
    const type = searchParams.get('type') || 'public'; // public, my, joinable

    if (type === 'my') {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–¥–µ –æ–Ω —Ö–æ—Å—Ç –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
      const { data: rooms, error } = await supabase
        .from('_pidr_rooms')
        .select(`
          id, room_code, name, max_players, current_players, status, is_private, created_at,
          _pidr_users!_pidr_rooms_host_id_fkey (username, avatar),
          _pidr_room_players (
            user_id, position, is_ready,
            _pidr_users (username, avatar)
          )
        `)
        .or(`host_id.eq.${userId},id.in.(${await getUserRoomIds(userId)})`)
        .order('created_at', { ascending: false });

      if (error) throw error;

      return NextResponse.json({ success: true, rooms: rooms || [] });
    }

    if (type === 'joinable') {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
      const { data: rooms, error } = await supabase
        .from('_pidr_rooms')
        .select(`
          id, room_code, name, max_players, current_players, status, is_private, created_at,
          _pidr_users!_pidr_rooms_host_id_fkey (username, avatar)
        `)
        .eq('status', 'waiting')
        .eq('is_private', false)
        .lt('current_players', 9) // –ú–∞–∫—Å–∏–º—É–º 9 –∏–≥—Ä–æ–∫–æ–≤
        .neq('host_id', userId) // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–∏ –∫–æ–º–Ω–∞—Ç—ã
        .order('created_at', { ascending: false })
        .limit(20);

      if (error) throw error;

      return NextResponse.json({ success: true, rooms: rooms || [] });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã (type === 'public')
    const { data: rooms, error } = await supabase
      .from('_pidr_rooms')
      .select(`
        id, room_code, name, max_players, current_players, status, created_at,
        _pidr_users!_pidr_rooms_host_id_fkey (username, avatar)
      `)
      .eq('is_private', false)
      .in('status', ['waiting', 'playing'])
      .order('created_at', { ascending: false })
      .limit(50);

    if (error) throw error;

    return NextResponse.json({ success: true, rooms: rooms || [] });

  } catch (error) {
    console.error('Rooms GET error:', error);
    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });
  }
}

// POST /api/rooms - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
export async function POST(req: NextRequest) {
  console.log('üè† POST /api/rooms - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
  
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const auth = requireAuth(req);
    if (auth.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', auth.error);
      return NextResponse.json({ success: false, message: `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${auth.error}` }, { status: 401 });
    }
    
    // –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ auth.error, userId –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const userId = auth.userId as string;
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', userId);

    // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SUPABASE
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return NextResponse.json({ 
        success: false, 
        message: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      }, { status: 503 });
    }

    // Rate limiting (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    try {
      const id = getRateLimitId(req);
      const { success } = await checkRateLimit(`rooms:${id}`);
      if (!success) {
        console.warn('‚ö†Ô∏è Rate limit exceeded, but allowing request');
        // return NextResponse.json({ success: false, message: 'Too many requests' }, { status: 429 });
      }
    } catch (rateLimitError) {
      console.warn('‚ö†Ô∏è Rate limit check failed:', rateLimitError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ rate limiting
    }

    const { action, roomCode, roomName, maxPlayers, isPrivate, password } = await req.json();
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', { action, roomCode, roomName, maxPlayers, isPrivate });

    // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–ê–ó–ï
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id, username, telegram_id')
      .eq('id', userId)
      .single();

    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', userError);
      return NextResponse.json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.' 
      }, { status: 404 });
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.username || user.telegram_id);

    if (action === 'create') {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
      let uniqueCode = '';
      let attempts = 0;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
      do {
        uniqueCode = generateRoomCode();
        attempts++;
        if (attempts > 10) throw new Error('Failed to generate unique room code');
        
        const { data: existing } = await supabase
          .from('_pidr_rooms')
          .select('id')
          .eq('room_code', uniqueCode)
          .single();
          
        if (!existing) break;
      } while (true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –∫–∞–∫ —Ö–æ—Å—Ç–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Ö–æ—Å—Ç–∞...');
      const { data: existingHostRoom, error: hostRoomError } = await supabase
        .from('_pidr_rooms')
        .select('id, name')
        .eq('host_id', userId)
        .in('status', ['waiting', 'playing'])
        .single();

      if (hostRoomError && hostRoomError.code !== 'PGRST116') {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–Ω–∞—Ç —Ö–æ—Å—Ç–∞:', hostRoomError);
        throw new Error(`Database error: ${hostRoomError.message}`);
      }

      if (existingHostRoom) {
        return NextResponse.json({ 
          success: false, 
          message: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ "${existingHostRoom.name}". –ó–∞–∫—Ä–æ–π—Ç–µ –µ—ë –∏–ª–∏ –ø–æ–∫–∏–Ω—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞.` 
        }, { status: 400 });
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö...');
      
      const { data: existingParticipation, error: participationError } = await supabase
        .from('_pidr_room_players')
        .select(`
          id,
          room_id,
          position,
          is_ready,
          _pidr_rooms!inner(
            id,
            name,
            status,
            room_code
          )
        `)
        .eq('user_id', userId)
        .in('_pidr_rooms.status', ['waiting', 'playing']);

      if (participationError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è:', participationError);
      }

      if (existingParticipation && existingParticipation.length > 0) {
        const activeRooms = existingParticipation.map((p: any) => ({
          name: p._pidr_rooms?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
          code: p._pidr_rooms?.room_code || 'UNKNOWN',
          status: p._pidr_rooms?.status || 'unknown'
        }));
        
        console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö:', activeRooms);
        
        return NextResponse.json({ 
          success: false, 
          message: `–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ "${activeRooms[0].name}" (${activeRooms[0].code}). –ü–æ–∫–∏–Ω—å—Ç–µ –µ—ë —Å–Ω–∞—á–∞–ª–∞.`,
          activeRooms
        }, { status: 400 });
      }
      
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
      console.log('üèóÔ∏è –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É:', {
        room_code: uniqueCode,
        name: roomName || 'P.I.D.R. –ò–≥—Ä–∞',
        host_id: userId,
        max_players: Math.min(Math.max(maxPlayers || 4, 2), 9),
        is_private: isPrivate || false
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º game_settings –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Supabase
      const { data: room, error: roomError } = await supabase
        .from('_pidr_rooms')
        .insert({
          room_code: uniqueCode,
          name: roomName || 'P.I.D.R. –ò–≥—Ä–∞',
          host_id: userId,
          max_players: Math.min(Math.max(maxPlayers || 4, 2), 9),
          current_players: 1,
          is_private: isPrivate || false,
          password: password || null
          // game_settings –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω–æ - –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –≤ Supabase Dashboard
        })
        .select()
        .single();

      if (roomError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –≤ –ë–î:', roomError);
        throw roomError;
      }

      console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', room.id, room.room_code);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É
      console.log('üë§ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      const { data: userData, error: userError } = await supabase
        .from('_pidr_users')
        .select('username, first_name')
        .eq('id', userId)
        .single();

      if (userError || !userData) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const username = userData.username || userData.first_name || '–ò–≥—Ä–æ–∫';
      console.log('üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      console.log('üë§ –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É:', { room_id: room.id, user_id: userId, username });
      const { error: playerError } = await supabase
        .from('_pidr_room_players')
        .insert({
          room_id: room.id,
          user_id: userId,
          username: username, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º username
          position: 0,
          is_ready: true
        });

      if (playerError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É:', playerError);
        throw playerError;
      }

      console.log('‚úÖ –•–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        if (room?.id && userId) {
          await updateUserStatus(userId, 'in_game', room.id.toString());
          console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
      } catch (statusError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', statusError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å
      }

      return NextResponse.json({ 
        success: true, 
        room: {
          id: room.id,
          roomCode: room.room_code,
          name: room.name,
          status: room.status
        }
      });
    }

    if (action === 'join') {
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
      if (!roomCode) {
        return NextResponse.json({ success: false, message: 'Room code required' }, { status: 400 });
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É
      const { data: room, error: roomError } = await supabase
        .from('_pidr_rooms')
        .select('id, name, max_players, current_players, status, is_private, password, host_id')
        .eq('room_code', roomCode.toUpperCase())
        .single();

      if (roomError || !room) {
        return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
      }

      if (room.status !== 'waiting') {
        return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' }, { status: 400 });
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–æ–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ö–æ—Å—Ç–∞ - —Ö–æ—Å—Ç –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É
      if (room.host_id === userId) {
        console.log('üëë –•–æ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É:', roomCode);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ö–æ—Å—Ç —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        const { data: existingPlayer } = await supabase
          .from('_pidr_room_players')
          .select('id, position, is_ready')
          .eq('room_id', room.id)
          .eq('user_id', userId)
          .single();

        if (existingPlayer) {
          console.log('üëë –•–æ—Å—Ç —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å ready');
          
          // –•–æ—Å—Ç —É–∂–µ –µ—Å—Ç—å - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ ready
          await supabase
            .from('_pidr_room_players')
            .update({ is_ready: true })
            .eq('id', existingPlayer.id);
            
          return NextResponse.json({ 
            success: true, 
            room: {
              id: room.id,
              roomCode,
              name: room.name,
              position: existingPlayer.position
            },
            message: '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, —Ö–æ—Å—Ç! üëë'
          });
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –•–æ—Å—Ç–∞ –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        console.log('üëë –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É –≤–ø–µ—Ä–≤—ã–µ');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: userData, error: userError } = await supabase
          .from('_pidr_users')
          .select('username, first_name')
          .eq('id', userId)
          .single();

        const username = userData?.username || userData?.first_name || '–ò–≥—Ä–æ–∫';
        
        const { error: hostJoinError } = await supabase
          .from('_pidr_room_players')
          .insert({
            room_id: room.id,
            user_id: userId,
            username: username, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º username
            position: 0, // –•–æ—Å—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 0
            is_ready: true
          });

        if (hostJoinError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É:', hostJoinError);
          return NextResponse.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É' 
          }, { status: 500 });
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã
        const { data: allPlayers } = await supabase
          .from('_pidr_room_players')
          .select('id')
          .eq('room_id', room.id);

        const actualPlayerCount = allPlayers?.length || 1;
        console.log(`üìä –•–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ ${actualPlayerCount}`);
        
        await supabase
          .from('_pidr_rooms')
          .update({ current_players: actualPlayerCount })
          .eq('id', room.id);

        return NextResponse.json({ 
          success: true, 
          room: {
            id: room.id,
            roomCode,
            name: room.name,
            position: 0
          },
          message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à—É –∫–æ–º–Ω–∞—Ç—É, —Ö–æ—Å—Ç! üëë'
        });
      }

      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å
      if (room.current_players >= room.max_players) {
        return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' }, { status: 400 });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
      if (room.is_private && room.password && room.password !== password) {
        return NextResponse.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }, { status: 403 });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
      const { data: userInAnyRoom } = await supabase
        .from('_pidr_room_players')
        .select(`
          id,
          room_id,
          _pidr_rooms (
            id, name, status
          )
        `)
        .eq('user_id', userId);

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
      if (userInAnyRoom && userInAnyRoom.length > 0) {
        for (const playerRecord of userInAnyRoom) {
          const roomData = playerRecord._pidr_rooms as any;
          
          if (roomData.status === 'waiting' || roomData.status === 'playing') {
            if (roomData.id === room.id) {
              return NextResponse.json({ 
                success: false, 
                message: '–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ' 
              }, { status: 400 });
            } else {
              return NextResponse.json({ 
                success: false, 
                message: `–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ "${roomData.name}". –ü–æ–∫–∏–Ω—å—Ç–µ –µ—ë —Å–Ω–∞—á–∞–ª–∞.` 
              }, { status: 400 });
            }
          } else {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
            await supabase
              .from('_pidr_room_players')
              .delete()
              .eq('id', playerRecord.id);
          }
        }
      }

      // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      const { data: occupiedPositions } = await supabase
        .from('_pidr_room_players')
        .select('position')
        .eq('room_id', room.id);

      const occupied = occupiedPositions?.map((p: any) => p.position) || [];
      let freePosition = 0;
      for (let i = 0; i < room.max_players; i++) {
        if (!occupied.includes(i)) {
          freePosition = i;
          break;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É
      const { data: userData, error: userError } = await supabase
        .from('_pidr_users')
        .select('username, first_name')
        .eq('id', userId)
        .single();

      const username = userData?.username || userData?.first_name || '–ò–≥—Ä–æ–∫';

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
      const { error: playerError } = await supabase
        .from('_pidr_room_players')
        .insert({
          room_id: room.id,
          user_id: userId,
          username: username, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º username
          position: freePosition,
          is_ready: false
        });

      if (playerError) throw playerError;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const { error: updateError } = await supabase
        .from('_pidr_rooms')
        .update({ current_players: room.current_players + 1 })
        .eq('id', room.id);

      if (updateError) throw updateError;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (room?.id && userId) {
        await updateUserStatus(userId, 'in_game', room.id.toString());
      }

      return NextResponse.json({ 
        success: true, 
        room: {
          id: room.id,
          roomCode,
          name: room.name,
          position: freePosition
        }
      });
    }

    return NextResponse.json({ success: false, message: 'Unknown action' }, { status: 400 });

  } catch (error: any) {
    console.error('‚ùå Rooms POST error:', error);
    return NextResponse.json({ 
      success: false, 
      message: `Internal server error: ${error?.message || 'Unknown error'}` 
    }, { status: 500 });
  }
}

// DELETE /api/rooms - –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
export async function DELETE(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { searchParams } = new URL(req.url);
    const roomId = searchParams.get('roomId');
    const action = searchParams.get('action') || 'leave'; // leave, delete

    if (!roomId) {
      return NextResponse.json({ success: false, message: 'Room ID required' }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    const { data: room, error: roomError } = await supabase
      .from('_pidr_rooms')
      .select('id, host_id, current_players, status')
      .eq('id', roomId)
      .single();

    if (roomError || !room) {
      return NextResponse.json({ success: false, message: 'Room not found' }, { status: 404 });
    }

    if (action === 'delete' && room.host_id === userId) {
      // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç)
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const { data: allPlayers } = await supabase
        .from('_pidr_room_players')
        .select('user_id')
        .eq('room_id', roomId);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ cancelled –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      await supabase
        .from('_pidr_rooms')
        .update({ 
          status: 'cancelled',
          finished_at: new Date().toISOString()
        })
        .eq('id', roomId);

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
      await supabase
        .from('_pidr_room_players')
        .delete()
        .eq('room_id', roomId);

      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
      const { error: deleteError } = await supabase
        .from('_pidr_rooms')
        .delete()
        .eq('id', roomId);

      if (deleteError) throw deleteError;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ online
      if (allPlayers && allPlayers.length > 0) {
        const playerIds = allPlayers.map((p: any) => p.user_id);
        for (const playerId of playerIds) {
          await updateUserStatus(playerId, 'online', null);
        }
      }

      return NextResponse.json({ success: true, message: '–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞' });
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ —Ö–æ—Å—Ç–∞
    if (room.host_id === userId) {
      console.log('üëë –•–æ—Å—Ç –ø–æ–∫–∏–¥–∞–µ—Ç —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É, –ù–ï —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ absent');
      
      // –î–ª—è —Ö–æ—Å—Ç–∞: –ù–ï —É–¥–∞–ª—è–µ–º –∏–∑ room_players, –∞ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ "absent" 
      // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
      const { error: hostAbsentError } = await supabase
        .from('_pidr_room_players')
        .update({ 
          is_ready: false,
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ö–æ—Å—Ç–∞ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã)
        })
        .eq('room_id', roomId)
        .eq('user_id', userId);

      if (hostAbsentError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–∞:', hostAbsentError);
        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        await supabase
          .from('_pidr_room_players')
          .delete()
          .eq('room_id', roomId)
          .eq('user_id', userId);
      }

      console.log('üëë –•–æ—Å—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ absent, –Ω–æ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è');
      
    } else {
      // –û–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫ - —É–¥–∞–ª—è–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
      const { error: leaveError } = await supabase
        .from('_pidr_room_players')
        .delete()
        .eq('room_id', roomId)
        .eq('user_id', userId);

      if (leaveError) throw leaveError;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã (–Ω–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ old current_players)
    const { data: actualPlayers, error: countError } = await supabase
      .from('_pidr_room_players')
      .select('id')
      .eq('room_id', roomId);

    if (!countError && actualPlayers) {
      const actualPlayerCount = actualPlayers.length;
      console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫: –±—ã–ª–æ ${room.current_players}, —Å—Ç–∞–ª–æ ${actualPlayerCount}`);
      
      const { error: updateError } = await supabase
        .from('_pidr_rooms')
        .update({ current_players: actualPlayerCount })
        .eq('id', roomId);

      if (updateError) throw updateError;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await updateUserStatus(userId, 'online', null);

    // –ï—Å–ª–∏ —Ö–æ—Å—Ç –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É, –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    if (room.host_id === userId) {
      const { data: remainingPlayers } = await supabase
        .from('_pidr_room_players')
        .select('user_id, joined_at')
        .eq('room_id', roomId)
        .order('joined_at', { ascending: true });

      if (remainingPlayers && remainingPlayers.length > 0) {
        // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∞ —Ö–æ—Å—Ç–∞ —Å–∞–º–æ–º—É —Å—Ç–∞—Ä—à–µ–º—É –∏–≥—Ä–æ–∫—É
        const newHostId = remainingPlayers[0].user_id;
        await supabase
          .from('_pidr_rooms')
          .update({ host_id: newHostId })
          .eq('id', roomId);
      } else {
        // –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –ø–æ–º–µ—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏ —É–¥–∞–ª—è–µ–º –µ—ë
        await supabase
          .from('_pidr_rooms')
          .update({ 
            status: 'cancelled',
            finished_at: new Date().toISOString()
          })
          .eq('id', roomId);
          
        // –ú–æ–∂–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –±–∞–∑–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, –ª–∏–±–æ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        // –î–ª—è –¥–µ–º–æ —É–¥–∞–ª–∏–º —Å—Ä–∞–∑—É
        setTimeout(async () => {
          await supabase
            .from('_pidr_rooms')
            .delete()
            .eq('id', roomId);
        }, 5000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      }
    }

    return NextResponse.json({ success: true, message: '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É' });

  } catch (error) {
    console.error('Rooms DELETE error:', error);
    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function getUserRoomIds(userId: string): Promise<string> {
  const { data } = await supabase
    .from('_pidr_room_players')
    .select('room_id')
    .eq('user_id', userId);
  
  return data?.map((p: any) => p.room_id).join(',') || '';
}

async function updateUserStatus(userId: string, status: string, roomId: string | null) {
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É _pidr_users
    await supabase
      .from('_pidr_users')
      .update({
        last_seen: new Date().toISOString(),
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ _pidr_users
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);
      
    console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ _pidr_users');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
}
