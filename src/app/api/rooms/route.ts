// –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô API –ë–ï–ó –í–°–ï–• –°–õ–û–ñ–ù–û–°–¢–ï–ô - –¢–û–õ–¨–ö–û –†–ê–ë–û–¢–ê–Æ–©–ò–ô –ö–û–î
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import { requireAuth } from '../../../lib/auth-utils';

function generateRoomCode(): string {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  let code = '';
  for (let i = 0; i < 6; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

// GET /api/rooms - –ü–†–û–°–¢–ï–ô–®–ò–ô –ó–ê–ü–†–û–°
export async function GET(req: NextRequest) {
  console.log('üîç GET /api/rooms - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã');
  
  try {
    // –ü–†–û–°–¢–ï–ô–®–ò–ô –ó–ê–ü–†–û–° –ë–ï–ó –î–ñ–û–ô–ù–û–í
    const { data: rooms, error } = await supabase
      .from('_pidr_rooms')
      .select('*')
      .eq('is_private', false)
      .in('status', ['waiting', 'playing'])
      .order('created_at', { ascending: false })
      .limit(50);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç: ' + error.message 
      }, { status: 500 });
    }

    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–Ω–∞—Ç:', rooms?.length || 0);

    // –ü–û–õ–£–ß–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –ò–ú–ï–ù–ê –•–û–°–¢–û–í
    const roomsWithHosts = await Promise.all((rooms || []).map(async (room: any) => {
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ö–æ—Å—Ç–∞
      const { data: hostUser } = await supabase
        .from('_pidr_users')
        .select('username, avatar_url')
        .eq('id', room.host_id)
        .single();

      return {
        id: room.id,
        room_code: room.room_code,
        name: room.name,
        max_players: room.max_players,
        current_players: room.current_players,
        status: room.status,
        is_private: room.is_private,
        created_at: room.created_at,
        users: { 
          username: hostUser?.username || '–•–æ—Å—Ç', 
          avatar: hostUser?.avatar_url || null 
        },
        players: []
      };
    }));

    return NextResponse.json({ 
      success: true, 
      rooms: roomsWithHosts
    });

  } catch (error) {
    console.error('‚ùå Rooms GET error:', error);
    return NextResponse.json({ 
      success: false, 
      message: 'Internal server error' 
    }, { status: 500 });
  }
}

// POST /api/rooms - –ü–†–û–°–¢–ï–ô–®–ï–ï –°–û–ó–î–ê–ù–ò–ï
export async function POST(req: NextRequest) {
  console.log('üè† POST /api/rooms - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã');

  try {
    const auth = requireAuth(req);
    if (auth.error) {
      return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
    }

    const userId = auth.userId as string;
    const body = await req.json();
    const { action, name, maxPlayers, gameMode, hasPassword, password, isPrivate } = body;

    console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', { action, name, maxPlayers, gameMode });

    if (action === 'create') {
      console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã...');

      // –ü–†–û–°–¢–ï–ô–®–ê–Ø –ü–†–û–í–ï–†–ö–ê
      const { data: existingRoom } = await supabase
        .from('_pidr_rooms')
        .select('id, name')
        .eq('host_id', userId)
        .eq('status', 'waiting')
        .single();

      if (existingRoom) {
        return NextResponse.json({ 
          success: false, 
          message: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ "${existingRoom.name}". –ó–∞–∫—Ä–æ–π—Ç–µ –µ—ë —Å–Ω–∞—á–∞–ª–∞.` 
        }, { status: 400 });
      }

      // –°–û–ó–î–ê–ï–ú –ö–û–ú–ù–ê–¢–£ –ë–ï–ó –õ–ò–®–ù–ò–• –ü–û–õ–ï–ô
      const roomCode = generateRoomCode();
      const { data: room, error: roomError } = await supabase
        .from('_pidr_rooms')
        .insert({
          room_code: roomCode,
          name: name || '–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
          host_id: userId,
          max_players: maxPlayers || 6,
          current_players: 0, // –ù–∞—á–∏–Ω–∞–µ–º —Å 0, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º —Ö–æ—Å—Ç–∞
          status: 'waiting',
          is_private: isPrivate || false,
          password: hasPassword ? password : null,
          created_at: new Date().toISOString()
        })
        .select()
        .single();

      if (roomError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', roomError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ' + roomError.message 
        }, { status: 500 });
      }

      // –î–û–ë–ê–í–õ–Ø–ï–ú –•–û–°–¢–ê –ò –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö
      const { error: playerError } = await supabase
        .from('_pidr_room_players')
        .insert({
          room_id: room.id,
          user_id: userId,
          username: '–•–æ—Å—Ç',
          position: 0,
          is_ready: true
        });

      if (playerError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞:', playerError);
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Å—Ç–∞
        await supabase.from('_pidr_rooms').delete().eq('id', room.id);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ' + playerError.message 
        }, { status: 500 });
      }

      // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö –ò–ì–†–û–ö–û–í
      await supabase
        .from('_pidr_rooms')
        .update({ current_players: 1 })
        .eq('id', room.id);

      console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', roomCode);
      return NextResponse.json({ 
        success: true, 
        room: {
          id: room.id,
          roomCode,
          name: room.name,
          status: room.status
        }
      });
    }

    if (action === 'join') {
      // –ü–†–û–°–¢–ï–ô–®–ï–ï –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï
      const { roomCode } = body;
      
      if (!roomCode) {
        return NextResponse.json({ success: false, message: '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
      }

      const { data: room, error: roomError } = await supabase
        .from('_pidr_rooms')
        .select('*')
        .eq('room_code', (roomCode || '').toUpperCase())
        .single();

      if (roomError || !room) {
        return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
      }

      // –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–¢ –õ–ò –£–ñ–ï –≠–¢–û–ì–û –ò–ì–†–û–ö–ê –í –ö–û–ú–ù–ê–¢–ï
      const { data: existingPlayer } = await supabase
        .from('_pidr_room_players')
        .select('id, position')
        .eq('room_id', room.id)
        .eq('user_id', userId)
        .single();

      if (existingPlayer) {
        console.log('‚úÖ –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é');
        return NextResponse.json({ 
          success: true, 
          room: {
            id: room.id,
            roomCode: room.room_code,
            name: room.name,
            position: existingPlayer.position // –í–û–ó–í–†–ê–©–ê–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ
          }
        });
      }

      // –ü–û–õ–£–ß–ê–ï–ú –†–ï–ê–õ–¨–ù–û–ï –ò–ú–Ø –ò–ì–†–û–ö–ê
      const { data: userData } = await supabase
        .from('_pidr_users')
        .select('username')
        .eq('id', userId)
        .single();

      // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ì–†–û–ö–ê –¢–û–õ–¨–ö–û –ï–°–õ–ò –ï–ì–û –ï–©–ï –ù–ï–¢
      const { error: playerError } = await supabase
        .from('_pidr_room_players')
        .insert({
          room_id: room.id,
          user_id: userId,
          username: userData?.username || '–ò–≥—Ä–æ–∫',
          position: room.current_players + 1, // –ù–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø
          is_ready: false
        });

      if (playerError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', playerError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + playerError.message 
        }, { status: 500 });
      }

      // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö
      await supabase
        .from('_pidr_rooms')
        .update({ current_players: room.current_players + 1 })
        .eq('id', room.id);

      return NextResponse.json({ 
        success: true, 
        room: {
          id: room.id,
          roomCode: room.room_code,
          name: room.name,
          position: room.current_players + 1 // –ù–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø
        }
      });
    }

    if (action === 'leave') {
      // –í–´–•–û–î –ò–ó –ö–û–ú–ù–ê–¢–´
      const { roomId } = body;
      
      if (!roomId) {
        return NextResponse.json({ success: false, message: 'ID –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
      }

      // –£–î–ê–õ–Ø–ï–ú –ò–ì–†–û–ö–ê –ò–ó –ö–û–ú–ù–ê–¢–´
      const { error: leaveError } = await supabase
        .from('_pidr_room_players')
        .delete()
        .eq('room_id', roomId)
        .eq('user_id', userId);

      if (leaveError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', leaveError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã: ' + leaveError.message 
        }, { status: 500 });
      }

      // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö –ò–ì–†–û–ö–û–í
      const { data: room } = await supabase
        .from('_pidr_rooms')
        .select('current_players')
        .eq('id', roomId)
        .single();

      if (room && room.current_players > 0) {
        await supabase
          .from('_pidr_rooms')
          .update({ current_players: room.current_players - 1 })
          .eq('id', roomId);
      }

      return NextResponse.json({ 
        success: true, 
        message: '–í—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã' 
      });
    }

    return NextResponse.json({ success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' }, { status: 400 });

  } catch (error: any) {
    console.error('‚ùå Rooms POST error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}

// DELETE - –ü–†–û–°–¢–ï–ô–®–ò–ô –í–´–•–û–î
export async function DELETE(req: NextRequest) {
  try {
    const auth = requireAuth(req);
    if (auth.error) {
      return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
    }

    const userId = auth.userId as string;
    const { searchParams } = new URL(req.url);
    const roomId = searchParams.get('roomId');

    if (!roomId) {
      return NextResponse.json({ success: false, message: 'Room ID required' }, { status: 400 });
    }

    // –£–î–ê–õ–Ø–ï–ú –ò–ì–†–û–ö–ê
    await supabase
      .from('_pidr_room_players')
      .delete()
      .eq('room_id', roomId)
      .eq('user_id', userId);

    return NextResponse.json({ success: true, message: '–í—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã' });

  } catch (error: any) {
    console.error('‚ùå Rooms DELETE error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
