// –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô API –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import { checkRateLimit, getRateLimitId } from '../../../lib/ratelimit';
import { getUserIdFromRequest, requireAuth } from '../../../lib/auth-utils';

function generateRoomCode(): string {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  let code = '';
  for (let i = 0; i < 6; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

// GET /api/rooms - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
export async function GET(req: NextRequest) {
  console.log('üîç GET /api/rooms - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã');
  
  try {
    const { searchParams } = new URL(req.url);
    const type = searchParams.get('type') || 'public';
    
    let query = supabase
      .from('_pidr_rooms')
      .select(`
        id, 
        room_code, 
        name, 
        max_players, 
        current_players, 
        status, 
        is_private, 
        created_at,
        _pidr_users!_pidr_rooms_host_id_fkey (
          username, 
          first_name,
          avatar_url
        ),
        _pidr_room_players (
          user_id,
          position,
          is_ready,
          username,
          _pidr_users (
            username,
            first_name
          )
        )
      `);

    if (type === 'joinable') {
      query = query
        .eq('status', 'waiting')
        .eq('is_private', false)
        .lt('current_players', 'max_players');
    } else if (type === 'playing') {
      query = query.eq('status', 'playing');
    } else {
      query = query
        .eq('is_private', false)
        .in('status', ['waiting', 'playing']);
    }

    const { data: rooms, error } = await query
      .order('created_at', { ascending: false })
      .limit(50);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç: ' + error.message 
      }, { status: 500 });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º –∏–≥—Ä–æ–∫–æ–≤
    const formattedRooms = (rooms || []).map((room: any) => {
      const actualPlayerCount = room._pidr_room_players?.length || 0;
      
      return {
        id: room.id,
        room_code: room.room_code,
        name: room.name,
        max_players: room.max_players,
        current_players: actualPlayerCount, // –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ë–î
        status: room.status,
        is_private: room.is_private,
        created_at: room.created_at,
        users: room._pidr_users ? {
          username: room._pidr_users.username || room._pidr_users.first_name || '–•–æ—Å—Ç',
          avatar: room._pidr_users.avatar_url || null
        } : null,
        players: room._pidr_room_players?.map((player: any) => ({
          userId: player.user_id,
          position: player.position,
          isReady: player.is_ready,
          username: player.username || player._pidr_users?.username || player._pidr_users?.first_name || '–ò–≥—Ä–æ–∫'
        })) || []
      };
    });

    return NextResponse.json({ 
      success: true, 
      rooms: formattedRooms
    });

  } catch (error) {
    console.error('‚ùå Rooms GET error:', error);
    return NextResponse.json({ 
      success: false, 
      message: 'Internal server error' 
    }, { status: 500 });
  }
}

// POST /api/rooms - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º
export async function POST(req: NextRequest) {
  console.log('üè† POST /api/rooms - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');

  const auth = requireAuth(req);
  if (auth.error) {
    return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
  }

  const userId = auth.userId as string;

  try {
    const body = await req.json();
    const { action, name, maxPlayers, gameMode, hasPassword, password, isPrivate, roomCode } = body;

    console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', { action, name, maxPlayers, gameMode, roomCode });

    if (action === 'create') {
      console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–æ–º–Ω–∞—Ç—É
      const { data: existingRoom } = await supabase
        .from('_pidr_rooms')
        .select('id, name, room_code')
        .eq('host_id', userId)
        .in('status', ['waiting', 'playing'])
        .single();

      if (existingRoom) {
        return NextResponse.json({ 
          success: false, 
          message: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ "${existingRoom.name}". –ó–∞–∫—Ä–æ–π—Ç–µ –µ—ë –∏–ª–∏ –ø–æ–∫–∏–Ω—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞.` 
        }, { status: 400 });
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
      const roomCode = generateRoomCode();
      const { data: room, error: roomError } = await supabase
        .from('_pidr_rooms')
        .insert({
          room_code: roomCode,
          name: name || '–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
          host_id: userId,
          max_players: maxPlayers || 6,
          current_players: 0, // –ù–∞—á–∏–Ω–∞–µ–º —Å 0, –¥–æ–±–∞–≤–∏–º —Ö–æ—Å—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
          status: 'waiting',
          is_private: isPrivate || false,
          password: hasPassword ? password : null,
          game_mode: gameMode || 'casual',
          created_at: new Date().toISOString()
        })
        .select()
        .single();

      if (roomError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', roomError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' 
        }, { status: 500 });
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData } = await supabase
        .from('_pidr_users')
        .select('username, first_name')
        .eq('id', userId)
        .single();

      const username = userData?.username || userData?.first_name || '–•–æ—Å—Ç';

      // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      const { error: playerError } = await supabase
        .from('_pidr_room_players')
        .insert({
          room_id: room.id,
          user_id: userId,
          username: username,
          position: 0,
          is_ready: true
        });

      if (playerError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞:', playerError);
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Å—Ç–∞
        await supabase.from('_pidr_rooms').delete().eq('id', room.id);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' 
        }, { status: 500 });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
      await supabase
        .from('_pidr_rooms')
        .update({ current_players: 1 })
        .eq('id', room.id);

      console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', roomCode);
      return NextResponse.json({ 
        success: true, 
        room: {
          id: room.id,
          roomCode,
          name: room.name,
          status: room.status
        }
      });
    }

    if (action === 'join') {
      console.log('üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomCode);

      if (!roomCode) {
        return NextResponse.json({ success: false, message: '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É
      const { data: room, error: roomError } = await supabase
        .from('_pidr_rooms')
        .select('id, name, max_players, current_players, status, is_private, password, host_id')
        .eq('room_code', roomCode.toUpperCase())
        .single();

      if (roomError || !room) {
        return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
      }

      if (room.status !== 'waiting') {
        return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' }, { status: 400 });
      }

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –î–û –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const { data: existingPlayer } = await supabase
        .from('_pidr_room_players')
        .select('id, position, is_ready')
        .eq('room_id', room.id)
        .eq('user_id', userId)
        .single();

      if (existingPlayer) {
        console.log('‚ö†Ô∏è –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º ready');
        
        await supabase
          .from('_pidr_room_players')
          .update({ is_ready: true })
          .eq('id', existingPlayer.id);
          
        return NextResponse.json({ 
          success: true, 
          room: {
            id: room.id,
            roomCode,
            name: room.name,
            position: existingPlayer.position
          },
          message: room.host_id === userId ? '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, —Ö–æ—Å—Ç! üëë' : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      if (room.is_private && room.password && password !== room.password) {
        return NextResponse.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }, { status: 403 });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
      const { data: currentPlayers } = await supabase
        .from('_pidr_room_players')
        .select('id, position')
        .eq('room_id', room.id);

      const actualPlayerCount = currentPlayers?.length || 0;
      
      if (actualPlayerCount >= room.max_players) {
        return NextResponse.json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' }, { status: 400 });
      }

      // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      const occupied = currentPlayers?.map((p: any) => p.position) || [];
      let freePosition = 0;
      for (let i = 0; i < room.max_players; i++) {
        if (!occupied.includes(i)) {
          freePosition = i;
          break;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData } = await supabase
        .from('_pidr_users')
        .select('username, first_name')
        .eq('id', userId)
        .single();

      const username = userData?.username || userData?.first_name || '–ò–≥—Ä–æ–∫';

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
      const { error: playerError } = await supabase
        .from('_pidr_room_players')
        .insert({
          room_id: room.id,
          user_id: userId,
          username: username,
          position: freePosition,
          is_ready: false
        });

      if (playerError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', playerError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' 
        }, { status: 500 });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
      await supabase
        .from('_pidr_rooms')
        .update({ current_players: actualPlayerCount + 1 })
        .eq('id', room.id);

      console.log('‚úÖ –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
      return NextResponse.json({ 
        success: true, 
        room: {
          id: room.id,
          roomCode,
          name: room.name,
          position: freePosition
        }
      });
    }

    return NextResponse.json({ success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' }, { status: 400 });

  } catch (error: any) {
    console.error('‚ùå Rooms POST error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}

// DELETE /api/rooms - –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
export async function DELETE(req: NextRequest) {
  const auth = requireAuth(req);
  if (auth.error) {
    return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
  }

  const userId = auth.userId as string;

  try {
    const { searchParams } = new URL(req.url);
    const roomId = searchParams.get('roomId');
    const action = searchParams.get('action');

    if (!roomId) {
      return NextResponse.json({ success: false, message: 'Room ID required' }, { status: 400 });
    }

    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    const { error: leaveError } = await supabase
      .from('_pidr_room_players')
      .delete()
      .eq('room_id', roomId)
      .eq('user_id', userId);

    if (leaveError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', leaveError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã' 
      }, { status: 500 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
    const { data: remainingPlayers } = await supabase
      .from('_pidr_room_players')
      .select('id')
      .eq('room_id', roomId);

    const remainingCount = remainingPlayers?.length || 0;

    if (remainingCount === 0) {
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
      await supabase
        .from('_pidr_rooms')
        .delete()
        .eq('id', roomId);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
      await supabase
        .from('_pidr_rooms')
        .update({ current_players: remainingCount })
        .eq('id', roomId);
    }

    return NextResponse.json({ success: true, message: '–í—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã' });

  } catch (error: any) {
    console.error('‚ùå Rooms DELETE error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
