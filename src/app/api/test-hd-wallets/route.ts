import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';

export async function GET(req: NextRequest) {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º HD –∫–æ—à–µ–ª—å–∫–∏...');

    const testUserId = 'test_user_hd_' + Date.now();
    const supportedCoins = ['USDT', 'TON', 'BTC', 'ETH', 'SOL'];
    const results: any[] = [];

    for (const coin of supportedCoins) {
      try {
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ${coin} –∞–¥—Ä–µ—Å–∞...`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ API
        const response = await fetch(
          new URL('/api/wallet/hd-addresses', req.url).toString(),
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              coin: coin,
              userId: testUserId 
            })
          }
        );

        const data = await response.json();

        if (data.success) {
          results.push({
            coin: coin,
            status: 'success',
            address: data.address,
            details: data.details || data.address
          });
          console.log(`‚úÖ ${coin}: ${data.address}`);
        } else {
          results.push({
            coin: coin,
            status: 'error',
            error: data.message
          });
          console.error(`‚ùå ${coin}: ${data.message}`);
        }

      } catch (coinError: any) {
        results.push({
          coin: coin,
          status: 'error',
          error: coinError.message
        });
        console.error(`‚ùå ${coin} error:`, coinError);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
    const { data: savedAddresses, error: dbError } = await supabase
      .from('_pidr_hd_wallets')
      .select('*')
      .eq('user_id', testUserId);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${savedAddresses?.length || 0} –∞–¥—Ä–µ—Å–æ–≤ –≤ –ë–î`);

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await supabase
      .from('_pidr_hd_wallets')
      .delete()
      .eq('user_id', testUserId);

    return NextResponse.json({
      success: true,
      message: 'HD –∫–æ—à–µ–ª—å–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã',
      testUserId: testUserId,
      results: results,
      savedInDB: savedAddresses?.length || 0,
      dbError: dbError?.message || null,
      summary: {
        total: supportedCoins.length,
        successful: results.filter((r: any) => r.status === 'success').length,
        failed: results.filter((r: any) => r.status === 'error').length
      }
    });

  } catch (error: any) {
    console.error('‚ùå Test HD wallets error:', error);
    return NextResponse.json({
      success: false,
      message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`,
      error: error.message
    }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    const { userId, coins } = await req.json();
    
    if (!userId) {
      return NextResponse.json({
        success: false,
        message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }, { status: 400 });
    }

    const coinsToTest = coins || ['USDT', 'TON', 'ETH', 'SOL'];
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º HD –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –º–æ–Ω–µ—Ç—ã: ${coinsToTest.join(', ')}`);

    const results: any[] = [];

    for (const coin of coinsToTest) {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        const response = await fetch(
          new URL('/api/wallet/hd-addresses', req.url).toString(),
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              coin: coin,
              userId: userId 
            })
          }
        );

        const data = await response.json();
        results.push({
          coin: coin,
          success: data.success,
          address: data.address,
          existing: data.existing || false,
          error: data.message || null
        });

      } catch (error: any) {
        results.push({
          coin: coin,
          success: false,
          error: error.message
        });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const { data: userAddresses, error: dbError } = await supabase
      .from('_pidr_hd_wallets')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: true });

    return NextResponse.json({
      success: true,
      message: `HD –∫–æ—à–µ–ª—å–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
      userId: userId,
      results: results,
      userAddresses: userAddresses || [],
      dbError: dbError?.message || null,
      summary: {
        tested: coinsToTest.length,
        successful: results.filter((r: any) => r.success).length,
        existing: results.filter((r: any) => r.existing).length,
        totalInDB: userAddresses?.length || 0
      }
    });

  } catch (error: any) {
    console.error('‚ùå Test user HD wallets error:', error);
    return NextResponse.json({
      success: false,
      message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`
    }, { status: 500 });
  }
}
