import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import { requireAuth } from '../../../../lib/auth-utils';

// POST /api/shop/purchase - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ
export async function POST(req: NextRequest) {
  console.log('üõí POST /api/shop/purchase - –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞...');
  
  try {
    const userId = await requireAuth(req);
    console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
    
    const body = await req.json();
    const { item_id, item_type, item_name, price, metadata = {} } = body;
    
    if (!item_id || !item_type || !item_name || !price) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' 
      }, { status: 400 });
    }
    
    console.log(`üõí –ü–æ–∫—É–ø–∫–∞: ${item_name} (${item_type}) –∑–∞ ${price} –º–æ–Ω–µ—Ç`);
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ë–î –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    const { data, error } = await supabase.rpc('buy_shop_item', {
      p_user_id: userId,
      p_item_id: item_id,
      p_item_type: item_type,
      p_item_name: item_name,
      p_price: price,
      p_metadata: metadata
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏' 
      }, { status: 500 });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if (data && typeof data === 'object') {
      if (data.success === false) {
        console.log(`‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${data.message}`);
        return NextResponse.json(data, { status: 400 });
      }
      
      console.log(`‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${data.new_balance}`);
      return NextResponse.json(data);
    }
    
    return NextResponse.json({ 
      success: true,
      message: '–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞'
    });
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: `–û—à–∏–±–∫–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
    }, { status: 500 });
  }
}
