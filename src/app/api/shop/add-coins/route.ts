import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;

function getUserIdFromRequest(req: NextRequest): string | null {
  if (!JWT_SECRET) return null;
  
  const token = req.cookies.get('auth_token')?.value;
  if (!token) return null;
  
  try {
    const payload = jwt.verify(token, JWT_SECRET) as any;
    return payload.userId;
  } catch {
    return null;
  }
}

// POST /api/shop/add-coins - –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ—Å–ª–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
export async function POST(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { amount, cryptoCurrency, cryptoAmount, transactionHash, packageName } = await req.json();

    if (!amount || amount <= 0) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞' 
      }, { status: 400 });
    }

    console.log(`üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞ ${cryptoAmount} ${cryptoCurrency}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id, coins')
      .eq('id', userId)
      .single();

    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return NextResponse.json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    const newBalance = user.coins + amount;

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase
      .from('_pidr_users')
      .update({ 
        coins: newBalance,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' 
      }, { status: 500 });
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactionDescription = `–ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç: ${packageName || '–ü–∞–∫–µ—Ç –º–æ–Ω–µ—Ç'} –∑–∞ ${cryptoAmount} ${cryptoCurrency}`;
    
    const { error: transactionError } = await supabase
      .from('_pidr_coin_transactions')
      .insert({
        user_id: userId,
        amount: amount,
        transaction_type: 'crypto_purchase',
        description: transactionDescription,
        balance_before: user.coins,
        balance_after: newBalance,
        created_at: new Date().toISOString()
      });

    if (transactionError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`üíé –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂: ${cryptoAmount} ${cryptoCurrency} -> ${amount} –º–æ–Ω–µ—Ç`);
    if (transactionHash) {
      console.log(`üîó Transaction hash: ${transactionHash}`);
    }

    console.log(`‚úÖ –ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);

    return NextResponse.json({ 
      success: true, 
      message: '–ú–æ–Ω–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã',
      coinsAdded: amount,
      newBalance: newBalance,
      cryptoPayment: {
        currency: cryptoCurrency,
        amount: cryptoAmount,
        transactionHash: transactionHash
      }
    });

  } catch (error: any) {
    console.error('‚ùå Add coins error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
