import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;

function getUserIdFromRequest(req: NextRequest): string | null {
  if (!JWT_SECRET) return null;
  const auth = req.headers.get('authorization');
  if (!auth) return null;
  const token = auth.replace('Bearer ', '');
  try {
    const payload = jwt.verify(token, JWT_SECRET) as any;
    return payload.userId;
  } catch {
    return null;
  }
}

// GET /api/wallet/hd-addresses - –ü–æ–ª—É—á–∏—Ç—å HD –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  try {
    console.log(`üí≥ –ü–æ–ª—É—á–∞–µ–º HD –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    const { data: hdAddresses, error } = await supabase
      .from('_pidr_hd_wallets')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: true });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HD –∞–¥—Ä–µ—Å–æ–≤:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤' 
      }, { status: 500 });
    }

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
    if (!hdAddresses || hdAddresses.length === 0) {
      console.log('üí≥ HD –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º...');
      
      try {
        const { HDWalletService } = await import('../../../../lib/wallets/hd-wallet-service');
        const walletService = new HDWalletService();
        
        const supportedCoins = ['TON', 'BTC', 'ETH', 'USDT_TRC20', 'SOL'];
        const newAddresses = [];

        for (const coin of supportedCoins) {
          try {
            const hdAddress = await walletService.generateUserAddress(userId, coin);
            if (hdAddress) {
              console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ${coin} –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
              
              const { data: savedAddress, error: saveError } = await supabase
                .from('_pidr_hd_wallets')
                .insert({
                  user_id: userId,
                  coin: hdAddress.coin,
                  address: hdAddress.address,
                  derivation_path: hdAddress.derivationPath,
                  address_index: hdAddress.index,
                  created_at: new Date().toISOString()
                })
                .select()
                .single();

              if (!saveError && savedAddress) {
                newAddresses.push(savedAddress);
              }
            }
          } catch (coinError) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${coin} –∞–¥—Ä–µ—Å:`, coinError);
          }
        }

        return NextResponse.json({ 
          success: true, 
          addresses: newAddresses,
          message: 'HD –∞–¥—Ä–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã'
        });

      } catch (walletError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HD –∞–¥—Ä–µ—Å–æ–≤:', walletError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤' 
        }, { status: 500 });
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedAddresses = hdAddresses.map((addr: any) => ({
      coin: addr.coin,
      address: addr.address,
      derivationPath: addr.derivation_path,
      index: addr.address_index,
      createdAt: addr.created_at
    }));

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${hdAddresses.length} HD –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);

    return NextResponse.json({ 
      success: true, 
      addresses: formattedAddresses
    });

  } catch (error) {
    console.error('‚ùå HD addresses GET error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}

// POST /api/wallet/hd-addresses - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
export async function POST(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { coin } = await req.json();

    if (!coin) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞' 
      }, { status: 400 });
    }

    console.log(`üí≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ${coin} –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥—Ä–µ—Å –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
    const { data: existingAddress } = await supabase
      .from('_pidr_hd_wallets')
      .select('id')
      .eq('user_id', userId)
      .eq('coin', coin)
      .single();

    if (existingAddress) {
      return NextResponse.json({ 
        success: false, 
        message: `–ê–¥—Ä–µ—Å –¥–ª—è ${coin} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç` 
      }, { status: 400 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
    const { HDWalletService } = await import('../../../../lib/wallets/hd-wallet-service');
    const walletService = new HDWalletService();
    
    const hdAddress = await walletService.generateUserAddress(userId, coin);
    if (!hdAddress) {
      return NextResponse.json({ 
        success: false, 
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è ${coin}` 
      }, { status: 500 });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { data: savedAddress, error: saveError } = await supabase
      .from('_pidr_hd_wallets')
      .insert({
        user_id: userId,
        coin: hdAddress.coin,
        address: hdAddress.address,
        derivation_path: hdAddress.derivationPath,
        address_index: hdAddress.index,
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (saveError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HD –∞–¥—Ä–µ—Å–∞:', saveError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞' 
      }, { status: 500 });
    }

    console.log(`‚úÖ –ù–æ–≤—ã–π ${coin} –∞–¥—Ä–µ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);

    return NextResponse.json({ 
      success: true, 
      address: {
        coin: savedAddress.coin,
        address: savedAddress.address,
        derivationPath: savedAddress.derivation_path,
        index: savedAddress.address_index,
        createdAt: savedAddress.created_at
      }
    });

  } catch (error) {
    console.error('‚ùå HD addresses POST error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
