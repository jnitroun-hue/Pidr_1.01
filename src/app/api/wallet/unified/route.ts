/**
 * üè¶ UNIFIED MASTER WALLET API
 * –ï–¥–∏–Ω—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Master –∫–æ—à–µ–ª—å–∫–∞–º–∏
 * 
 * Endpoints:
 * GET /api/wallet/unified - –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * POST /api/wallet/unified - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
 * PUT /api/wallet/unified - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 * DELETE /api/wallet/unified - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å
 */

import { NextRequest, NextResponse } from 'next/server';
import { masterWallet, SupportedNetwork, SUPPORTED_NETWORKS } from '../../../../lib/wallets/unified-master-wallet';
import { supabase } from '../../../../lib/supabase';

// üîê –ü–æ–ª—É—á–µ–Ω–∏–µ userId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
function getUserIdFromRequest(req: NextRequest): string | null {
  // –ò–∑ headers (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
  const authHeader = req.headers.get('authorization');
  if (authHeader) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è userId –∏–∑ JWT
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
  }
  
  // –ò–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const url = new URL(req.url);
  const userId = url.searchParams.get('userId');
  if (userId) return userId;
  
  // –ò–∑ cookies (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è)
  const sessionCookie = req.cookies.get('pidr_session');
  if (sessionCookie) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è userId –∏–∑ —Å–µ—Å—Å–∏–∏
  }
  
  return null;
}

/**
 * GET /api/wallet/unified
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
 */
export async function GET(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const action = url.searchParams.get('action') || 'get_addresses';
    const userId = getUserIdFromRequest(req);
    const networks = url.searchParams.get('networks')?.split(',') as SupportedNetwork[] || [];

    console.log(`üîç GET /api/wallet/unified - action: ${action}, userId: ${userId}`);

    switch (action) {
      case 'get_addresses': {
        if (!userId) {
          return NextResponse.json({
            success: false,
            message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤'
          }, { status: 400 });
        }

        const addresses = [];
        const requestedNetworks = networks.length > 0 ? networks : Object.keys(SUPPORTED_NETWORKS) as SupportedNetwork[];

        for (const network of requestedNetworks) {
          try {
            const address = await masterWallet.getUserAddress(userId, network);
            if (address) {
              addresses.push({
                network: address.network,
                address: address.address,
                derivationIndex: address.derivationIndex,
                isActive: address.isActive,
                balance: address.balance || '0',
                createdAt: address.createdAt
              });
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ${network} –∞–¥—Ä–µ—Å–∞:`, error);
          }
        }

        return NextResponse.json({
          success: true,
          addresses,
          totalNetworks: requestedNetworks.length,
          foundAddresses: addresses.length,
          userId
        });
      }

      case 'get_stats': {
        const stats = await masterWallet.getMasterWalletStats();
        const validation = masterWallet.validateConfiguration();

        return NextResponse.json({
          success: true,
          stats,
          configuration: validation,
          supportedNetworks: Object.keys(SUPPORTED_NETWORKS)
        });
      }

      case 'validate_config': {
        const validation = masterWallet.validateConfiguration();
        
        return NextResponse.json({
          success: validation.isValid,
          validation,
          supportedNetworks: SUPPORTED_NETWORKS
        });
      }

      default:
        return NextResponse.json({
          success: false,
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`
        }, { status: 400 });
    }

  } catch (error: any) {
    console.error('‚ùå GET /api/wallet/unified error:', error);
    return NextResponse.json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    }, { status: 500 });
  }
}

/**
 * POST /api/wallet/unified
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { network, userId: bodyUserId, memo } = body;
    
    const userId = getUserIdFromRequest(req) || bodyUserId;
    
    if (!userId || !network) {
      return NextResponse.json({
        success: false,
        message: 'userId –∏ network –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å —Å–µ—Ç–∏
    if (!SUPPORTED_NETWORKS[network as SupportedNetwork]) {
      return NextResponse.json({
        success: false,
        message: `–°–µ—Ç—å ${network} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
        supportedNetworks: Object.keys(SUPPORTED_NETWORKS)
      }, { status: 400 });
    }

    console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${network} –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
    const address = await masterWallet.generateUserAddress(userId, network as SupportedNetwork);

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    let paymentDetails = null;
    if (body.createPayment) {
      const amount = body.amount || '0';
      paymentDetails = await masterWallet.createPaymentDetails(userId, network as SupportedNetwork, amount, memo);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await supabase.from('_pidr_wallet_logs').insert({
      user_id: userId,
      action: 'generate_address',
      details: {
        network,
        address: address.address,
        derivationIndex: address.derivationIndex,
        isNew: true
      }
    });

    return NextResponse.json({
      success: true,
      address: {
        network: address.network,
        address: address.address,
        derivationIndex: address.derivationIndex,
        isActive: address.isActive,
        createdAt: address.createdAt
      },
      paymentDetails,
      message: `${network} –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`
    });

  } catch (error: any) {
    console.error('‚ùå POST /api/wallet/unified error:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞',
      error: error.message
    }, { status: 500 });
  }
}

/**
 * PUT /api/wallet/unified
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å–∞
 */
export async function PUT(req: NextRequest) {
  try {
    const body = await req.json();
    const { action, userId: bodyUserId, network, ...updateData } = body;
    
    const userId = getUserIdFromRequest(req) || bodyUserId;
    
    if (!userId || !action) {
      return NextResponse.json({
        success: false,
        message: 'userId –∏ action –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    console.log(`üîÑ PUT /api/wallet/unified - action: ${action}, userId: ${userId}`);

    switch (action) {
      case 'update_balance': {
        if (!network || updateData.balance === undefined) {
          return NextResponse.json({
            success: false,
            message: 'network –∏ balance –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞'
          }, { status: 400 });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
        const { error } = await supabase
          .from('_pidr_user_wallet_addresses')
          .update({
            balance: updateData.balance,
            last_checked_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .eq('user_id', userId)
          .eq('network', network);

        if (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await supabase.from('_pidr_wallet_logs').insert({
          user_id: userId,
          action: 'update_balance',
          details: {
            network,
            newBalance: updateData.balance,
            previousBalance: updateData.previousBalance || null
          }
        });

        return NextResponse.json({
          success: true,
          message: `–ë–∞–ª–∞–Ω—Å ${network} –æ–±–Ω–æ–≤–ª–µ–Ω`,
          newBalance: updateData.balance
        });
      }

      case 'deactivate_address': {
        if (!network) {
          return NextResponse.json({
            success: false,
            message: 'network –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞'
          }, { status: 400 });
        }

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        const { error } = await supabase
          .from('_pidr_user_wallet_addresses')
          .update({
            is_active: false,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', userId)
          .eq('network', network);

        if (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: ${error.message}`);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await supabase.from('_pidr_wallet_logs').insert({
          user_id: userId,
          action: 'deactivate_address',
          details: { network }
        });

        return NextResponse.json({
          success: true,
          message: `–ê–¥—Ä–µ—Å ${network} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`
        });
      }

      default:
        return NextResponse.json({
          success: false,
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`
        }, { status: 400 });
    }

  } catch (error: any) {
    console.error('‚ùå PUT /api/wallet/unified error:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      error: error.message
    }, { status: 500 });
  }
}

/**
 * DELETE /api/wallet/unified
 * –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
 */
export async function DELETE(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const network = url.searchParams.get('network');
    const userId = getUserIdFromRequest(req);
    const force = url.searchParams.get('force') === 'true';
    
    if (!userId || !network) {
      return NextResponse.json({
        success: false,
        message: 'userId –∏ network –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    console.log(`üóëÔ∏è DELETE /api/wallet/unified - network: ${network}, userId: ${userId}, force: ${force}`);

    if (force) {
      // –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
      const { error } = await supabase
        .from('_pidr_user_wallet_addresses')
        .delete()
        .eq('user_id', userId)
        .eq('network', network);

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      await supabase.from('_pidr_wallet_logs').insert({
        user_id: userId,
        action: 'delete_address',
        details: { network, force: true }
      });

      return NextResponse.json({
        success: true,
        message: `–ê–¥—Ä–µ—Å ${network} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω`
      });
    } else {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
      const { error } = await supabase
        .from('_pidr_user_wallet_addresses')
        .update({
          is_active: false,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId)
        .eq('network', network);

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: ${error.message}`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      await supabase.from('_pidr_wallet_logs').insert({
        user_id: userId,
        action: 'deactivate_address',
        details: { network }
      });

      return NextResponse.json({
        success: true,
        message: `–ê–¥—Ä–µ—Å ${network} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`
      });
    }

  } catch (error: any) {
    console.error('‚ùå DELETE /api/wallet/unified error:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞',
      error: error.message
    }, { status: 500 });
  }
}
