/**
 * ============================================================
 * TON CHECK PAYMENTS API
 * ============================================================
 * Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö TON –ø–ª–∞—Ç–µ–∂–µ–π
 * –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ cron
 */

import { NextRequest, NextResponse } from 'next/server';
import { tonPaymentService } from '@/lib/wallets/ton-payment-service';

export async function POST(req: NextRequest) {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É TON –ø–ª–∞—Ç–µ–∂–µ–π...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    const result = await tonPaymentService.checkAndProcessPayments();

    if (!result.success) {
      return NextResponse.json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π'
      }, { status: 500 });
    }

    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.processed} –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);

    return NextResponse.json({
      success: true,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.processed} –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`,
      data: {
        processed: result.processed,
        newPayments: result.newPayments
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: ' + error.message
    }, { status: 500 });
  }
}

// –î–ª—è cron jobs (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–æ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º)
export async function GET(req: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è cron
    const authHeader = req.headers.get('authorization');
    const cronSecret = process.env.CRON_SECRET || 'change_me_in_production';

    if (authHeader !== `Bearer ${cronSecret}`) {
      return NextResponse.json({
        success: false,
        message: 'Unauthorized: Invalid cron secret'
      }, { status: 401 });
    }

    console.log('üîç [CRON] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É TON –ø–ª–∞—Ç–µ–∂–µ–π...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    const result = await tonPaymentService.checkAndProcessPayments();

    return NextResponse.json({
      success: true,
      message: `[CRON] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.processed} –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`,
      data: {
        processed: result.processed,
        newPayments: result.newPayments
      }
    });

  } catch (error: any) {
    console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞: ' + error.message
    }, { status: 500 });
  }
}

