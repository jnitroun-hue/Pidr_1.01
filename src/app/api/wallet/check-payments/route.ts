import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;

function getUserIdFromRequest(req: NextRequest): string | null {
  if (!JWT_SECRET) return null;
  const auth = req.headers.get('authorization');
  if (!auth) return null;
  const token = auth.replace('Bearer ', '');
  try {
    const payload = jwt.verify(token, JWT_SECRET) as any;
    return payload.userId;
  } catch {
    return null;
  }
}

// –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
const EXCHANGE_RATES = {
  TON: 1000,      // 1 TON = 1000 –º–æ–Ω–µ—Ç
  BTC: 50000000,  // 1 BTC = 50M –º–æ–Ω–µ—Ç
  ETH: 2500000,   // 1 ETH = 2.5M –º–æ–Ω–µ—Ç
  USDT_TRC20: 1000, // 1 USDT = 1000 –º–æ–Ω–µ—Ç
  USDT_ERC20: 1000, // 1 USDT = 1000 –º–æ–Ω–µ—Ç
  SOL: 100000,    // 1 SOL = 100k –º–æ–Ω–µ—Ç
};

// POST /api/wallet/check-payments - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
export async function POST(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  try {
    console.log(`üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ HD –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: hdAddresses, error: addressError } = await supabase
      .from('_pidr_hd_wallets')
      .select('*')
      .eq('user_id', userId);

    if (addressError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HD –∞–¥—Ä–µ—Å–æ–≤:', addressError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤' 
      }, { status: 500 });
    }

    if (!hdAddresses || hdAddresses.length === 0) {
      return NextResponse.json({
        success: true,
        message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç HD –∞–¥—Ä–µ—Å–æ–≤',
        newPayments: []
      });
    }

    console.log(`üìç –ù–∞–π–¥–µ–Ω–æ ${hdAddresses.length} HD –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–¥—Ä–µ—Å—É
    const newPayments = [];
    
    for (const hdAddress of hdAddresses) {
      try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç API –≤—ã–∑–æ–≤—ã –∫ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç—è–º
        const payments = await checkAddressPayments(hdAddress);
        newPayments.push(...payments);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞ ${hdAddress.address}:`, error);
      }
    }

    console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${newPayments.length}`);

    // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    let totalGameCoins = 0;
    let newBalance = 0;

    if (newPayments.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: currentUser, error: userError } = await supabase
        .from('_pidr_users')
        .select('coins')
        .eq('id', userId)
        .single();

      if (userError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
        }, { status: 500 });
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ –≤ –∏–≥—Ä–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
      for (const payment of newPayments) {
        const rate = EXCHANGE_RATES[payment.coin as keyof typeof EXCHANGE_RATES] || 1000;
        const gameCoins = Math.floor(payment.amount * rate);
        totalGameCoins += gameCoins;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await supabase
          .from('_pidr_coin_transactions')
          .insert({
            user_id: userId,
            type: 'deposit',
            amount: gameCoins,
            crypto_amount: payment.amount,
            crypto_currency: payment.coin,
            tx_hash: payment.txHash,
            address: payment.address,
            status: 'completed',
            description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${payment.amount} ${payment.coin}`,
            created_at: new Date().toISOString()
          });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      newBalance = (currentUser.coins || 0) + totalGameCoins;
      
      const { error: updateError } = await supabase
        .from('_pidr_users')
        .update({ 
          coins: newBalance,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' 
        }, { status: 500 });
      }

      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: +${totalGameCoins} –º–æ–Ω–µ—Ç, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
    }

    return NextResponse.json({
      success: true,
      message: `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${hdAddresses.length} –∞–¥—Ä–µ—Å–æ–≤`,
      newPayments,
      totalGameCoins,
      newBalance: newPayments.length > 0 ? newBalance : null
    });

  } catch (error) {
    console.error('‚ùå Check payments error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π' 
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥—Ä–µ—Å—É
async function checkAddressPayments(hdAddress: any): Promise<any[]> {
  const { coin, address } = hdAddress;
  
  try {
    // DEMO: –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–∑–æ–≤—ã –∫ API –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç–µ–π
    
    if (Math.random() < 0.1) { // 10% —à–∞–Ω—Å –Ω–∞–π—Ç–∏ "–Ω–æ–≤—ã–π" –ø–ª–∞—Ç–µ–∂ –¥–ª—è –¥–µ–º–æ
      const demoPayment = {
        coin,
        address,
        amount: Math.random() * 0.01 + 0.001, // –°–ª—É—á–∞–π–Ω–∞—è —Å—É–º–º–∞
        txHash: `demo_${coin.toLowerCase()}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        blockHeight: Math.floor(Math.random() * 1000000),
        confirmations: 6,
        timestamp: Date.now()
      };

      console.log(`üéØ DEMO: –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ ${address}: ${demoPayment.amount} ${coin}`);
      return [demoPayment];
    }

    // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
    switch (coin.toUpperCase()) {
      case 'TON':
        return await checkTONPayments(address);
      case 'BTC':
        return await checkBTCPayments(address);
      case 'ETH':
        return await checkETHPayments(address);
      case 'USDT_TRC20':
        return await checkTRC20Payments(address);
      case 'SOL':
        return await checkSOLPayments(address);
      default:
        return [];
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${coin} –∞–¥—Ä–µ—Å–∞ ${address}:`, error);
    return [];
  }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async function checkTONPayments(address: string): Promise<any[]> {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ TON API
  return [];
}

async function checkBTCPayments(address: string): Promise<any[]> {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Bitcoin API
  return [];
}

async function checkETHPayments(address: string): Promise<any[]> {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Ethereum API
  return [];
}

async function checkTRC20Payments(address: string): Promise<any[]> {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ TRON API
  return [];
}

async function checkSOLPayments(address: string): Promise<any[]> {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Solana API
  return [];
}
