/**
 * ============================================================
 * AUTOMATIC ROOM CLEANUP CRON JOB
 * ============================================================
 * Automatic cleanup of inactive rooms and stuck states
 * 
 * Recommended to run every 5-10 minutes
 * Vercel Cron: every 5 minutes
 * 
 * Performs:
 * - Delete inactive rooms (30+ minutes without activity)
 * - Sync Redis and PostgreSQL
 * - Cleanup stuck locks
 * - Update player counters
 */

import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import { 
  getRoomPlayers, 
  removePlayerFromRoom,
  setPlayerRoom,
  getRoomDetails
} from '../../../../lib/multiplayer/player-state-manager';
import { Redis } from '@upstash/redis';

const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL || '',
  token: process.env.UPSTASH_REDIS_REST_TOKEN || '',
});

/**
 * GET /api/cron/cleanup-rooms
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
 */
export async function GET(req: NextRequest) {
  const startTime = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è cron (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  const authHeader = req.headers.get('authorization');
  const cronSecret = process.env.CRON_SECRET;
  
  if (cronSecret && authHeader !== `Bearer ${cronSecret}`) {
    console.warn('‚ö†Ô∏è [CLEANUP] Unauthorized cron request');
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
    // return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }
  
  console.log('üßπ [CLEANUP] –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...');
  
  const stats = {
    inactiveRoomsDeleted: 0,
    emptyRoomsDeleted: 0,
    playersRemoved: 0,
    syncedRooms: 0,
    errors: [] as string[],
  };
  
  try {
    // ============================================================
    // 1. –£–î–ê–õ–ï–ù–ò–ï –ù–ï–ê–ö–¢–ò–í–ù–´–• –ö–û–ú–ù–ê–¢ (30+ –º–∏–Ω—É—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ waiting)
    // ============================================================
    
    const inactiveTimeout = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    const inactiveThreshold = new Date(Date.now() - inactiveTimeout).toISOString();
    
    const { data: inactiveRooms, error: inactiveError } = await supabase
      .from('_pidr_rooms')
      .select('id, room_code, name, created_at')
      .eq('status', 'waiting')
      .lt('created_at', inactiveThreshold);
    
    if (!inactiveError && inactiveRooms) {
      for (const room of inactiveRooms) {
        try {
          // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Redis
          const players = await getRoomPlayers(room.id);
          for (const playerId of players) {
            await removePlayerFromRoom(room.id, playerId);
            await setPlayerRoom(playerId, null);
            stats.playersRemoved++;
          }
          
          // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ –ë–î
          await supabase.from('_pidr_rooms').delete().eq('id', room.id);
          
          stats.inactiveRoomsDeleted++;
          console.log(`üóëÔ∏è [CLEANUP] –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${room.room_code} (${room.name})`);
        } catch (error: any) {
          stats.errors.push(`Failed to delete inactive room ${room.room_code}: ${error.message}`);
        }
      }
    }
    
    // ============================================================
    // 2. –£–î–ê–õ–ï–ù–ò–ï –ü–£–°–¢–´–• –ö–û–ú–ù–ê–¢
    // ============================================================
    
    const { data: emptyRooms, error: emptyError } = await supabase
      .from('_pidr_rooms')
      .select('id, room_code, name, current_players')
      .eq('current_players', 0)
      .eq('status', 'waiting');
    
    if (!emptyError && emptyRooms) {
      for (const room of emptyRooms) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–∞—è –≤ Redis
          const redisPlayers = await getRoomPlayers(room.id);
          
          if (redisPlayers.length === 0) {
            await supabase.from('_pidr_rooms').delete().eq('id', room.id);
            stats.emptyRoomsDeleted++;
            console.log(`üóëÔ∏è [CLEANUP] –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${room.room_code}`);
          }
        } catch (error: any) {
          stats.errors.push(`Failed to delete empty room ${room.room_code}: ${error.message}`);
        }
      }
    }
    
    // ============================================================
    // 3. –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–ß–ï–¢–ß–ò–ö–û–í REDIS ‚Üî POSTGRESQL
    // ============================================================
    
    const { data: activeRooms, error: activeError } = await supabase
      .from('_pidr_rooms')
      .select('id, room_code, current_players')
      .in('status', ['waiting', 'playing'])
      .limit(100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    if (!activeError && activeRooms) {
      for (const room of activeRooms) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ Redis
          const redisPlayers = await getRoomPlayers(room.id);
          const redisCount = redisPlayers.length;
          
          // –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
          if (redisCount !== room.current_players) {
            await supabase
              .from('_pidr_rooms')
              .update({ current_players: redisCount })
              .eq('id', room.id);
            
            stats.syncedRooms++;
            console.log(`üîÑ [CLEANUP] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–Ω–∞—Ç—ã ${room.room_code}: ${room.current_players} ‚Üí ${redisCount}`);
          }
          
          // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Redis, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ë–î
          const { data: dbPlayers } = await supabase
            .from('_pidr_room_players')
            .select('user_id')
            .eq('room_id', room.id);
          
          const dbPlayerIds = new Set((dbPlayers || []).map((p: any) => p.user_id));
          
          for (const redisPlayerId of redisPlayers) {
            if (!dbPlayerIds.has(redisPlayerId)) {
              await removePlayerFromRoom(room.id, redisPlayerId);
              await setPlayerRoom(redisPlayerId, null);
              stats.playersRemoved++;
              console.log(`üßπ [CLEANUP] –£–¥–∞–ª–µ–Ω –∑–∞–≤–∏—Å—à–∏–π –∏–≥—Ä–æ–∫ ${redisPlayerId} –∏–∑ Redis –∫–æ–º–Ω–∞—Ç—ã ${room.room_code}`);
            }
          }
        } catch (error: any) {
          stats.errors.push(`Failed to sync room ${room.room_code}: ${error.message}`);
        }
      }
    }
    
    // ============================================================
    // 4. –û–ß–ò–°–¢–ö–ê –ó–ê–í–ò–°–®–ò–• –ë–õ–û–ö–ò–†–û–í–û–ö –í REDIS
    // ============================================================
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ TTL, –Ω–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
    // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ç—Ä–∞—Ç–Ω–æ
    // –ü–æ–∫–∞ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ
    
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ [CLEANUP] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms`);
    console.log(`üìä [CLEANUP] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, stats);
    
    return NextResponse.json({
      success: true,
      stats,
      duration: `${duration}ms`,
      timestamp: new Date().toISOString()
    });
    
  } catch (error: any) {
    console.error('‚ùå [CLEANUP] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      message: error.message,
      stats,
      duration: `${Date.now() - startTime}ms`,
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

/**
 * POST /api/cron/cleanup-rooms
 * –¢–æ –∂–µ —Å–∞–º–æ–µ —á–µ—Ä–µ–∑ POST (–¥–ª—è Vercel Cron)
 */
export async function POST(req: NextRequest) {
  return GET(req);
}

