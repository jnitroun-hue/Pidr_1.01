import { NextRequest, NextResponse } from 'next/server';
import { cardQueue } from '../../../../lib/nft/card-queue';
import { createClient } from '@supabase/supabase-js';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.warn('‚ö†Ô∏è Supabase credentials not found for cron job');
}

const supabase = supabaseUrl && supabaseKey 
  ? createClient(supabaseUrl, supabaseKey)
  : null;

/**
 * GET /api/cron/process-card-queue
 * Cron job –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT –∫–∞—Ä—Ç
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —á–µ—Ä–µ–∑ Vercel Cron
 */
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Supabase
    if (!supabase) {
      return NextResponse.json(
        { error: 'Supabase not configured' },
        { status: 500 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è cron
    const authHeader = request.headers.get('authorization');
    if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.log('üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ NFT –∫–∞—Ä—Ç...');

    let processed = 0;
    const maxBatchSize = 5; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 5 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑

    for (let i = 0; i < maxBatchSize; i++) {
      const job = await cardQueue.getNextJob();
      if (!job) {
        break; // –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
      }

      console.log(`üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: ${job.id}`);

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await cardQueue.updateJobProgress(job.id, 25);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        const imageUrl = await generateCardImage(job);
        await cardQueue.updateJobProgress(job.id, 50);

        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const metadata = {
          name: `P.I.D.R Card - ${job.rank} of ${job.suit}`,
          description: `NFT –∫–∞—Ä—Ç–∞ –∏–∑ –∏–≥—Ä—ã P.I.D.R. –†–µ–¥–∫–æ—Å—Ç—å: ${job.rarity}`,
          image: imageUrl,
          attributes: [
            { trait_type: 'Rank', value: job.rank },
            { trait_type: 'Suit', value: job.suit },
            { trait_type: 'Rarity', value: job.rarity },
            { trait_type: 'Mint Type', value: job.mintType }
          ]
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ Supabase Storage
        const metadataUrl = await uploadMetadata(job.id, metadata);
        await cardQueue.updateJobProgress(job.id, 75);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { data: nftData, error: nftError } = await supabase
          .from('_pidr_nft_cards')
          .insert({
            rank: job.rank,
            suit: job.suit,
            rarity: job.rarity,
            image_url: imageUrl,
            metadata_url: metadataUrl
          })
          .select()
          .single();

        if (nftError) throw nftError;

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–ª–∞–¥–µ–Ω–∏—è
        const { error: ownershipError } = await supabase
          .from('_pidr_nft_ownership')
          .insert({
            user_id: parseInt(job.userId),
            card_id: nftData.id,
            mint_type: job.mintType,
            custom_style: job.customStyle,
            custom_image_url: job.customImage
          });

        if (ownershipError) throw ownershipError;

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        await cardQueue.completeJob(job.id, {
          imageUrl,
          metadataUrl,
          nftId: nftData.id
        });

        processed++;
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ ${job.id}:`, error);
        await cardQueue.failJob(job.id, error instanceof Error ? error.message : 'Unknown error');
      }
    }

    const queueLength = await cardQueue.getQueueLength();

    return NextResponse.json({
      success: true,
      processed,
      remainingInQueue: queueLength,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ cron job:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏' },
      { status: 500 }
    );
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
 */
async function generateCardImage(job: any): Promise<string> {
  // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–ª–∏ Canvas –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–æ–≤–æ–π –∫–∞—Ä—Ç–µ
  const fileName = `${job.suit}_${job.rank}_${job.rarity}_${Date.now()}.png`;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
  if (job.customImage) {
    const { data, error } = await supabase.storage
      .from('nft-cards')
      .upload(`generated/${fileName}`, job.customImage, {
        contentType: 'image/png'
      });

    if (error) throw error;

    const { data: publicUrlData } = supabase.storage
      .from('nft-cards')
      .getPublicUrl(`generated/${fileName}`);

    return publicUrlData.publicUrl;
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –±–∞–∑–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  const { data: publicUrlData } = supabase.storage
    .from('nft-cards')
    .getPublicUrl(`base-cards/${job.suit}/${job.rank}.png`);

  return publicUrlData.publicUrl;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ Supabase Storage
 */
async function uploadMetadata(jobId: string, metadata: any): Promise<string> {
  const fileName = `metadata_${jobId}.json`;
  const metadataBlob = new Blob([JSON.stringify(metadata, null, 2)], {
    type: 'application/json'
  });

  const { data, error } = await supabase.storage
    .from('nft-cards')
    .upload(`metadata/${fileName}`, metadataBlob, {
      contentType: 'application/json'
    });

  if (error) throw error;

  const { data: publicUrlData } = supabase.storage
    .from('nft-cards')
    .getPublicUrl(`metadata/${fileName}`);

  return publicUrlData.publicUrl;
}

