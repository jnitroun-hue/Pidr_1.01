import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import { createPidrTables, checkDatabaseStatus } from '../../../lib/database/create-tables';

export async function GET(req: NextRequest) {
  console.log('üîç P.I.D.R. Database API - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      return NextResponse.json({
        success: false,
        message: 'Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        tables: {},
        hasSupabase: false
      });
    }

    console.log('‚úÖ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã...');

    // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü P.I.D.R.
    const pidrTables = [
      '_pidr_users',
      '_pidr_rooms', 
      '_pidr_room_players',
      '_pidr_games',
      '_pidr_game_results',
      '_pidr_coin_transactions',
      '_pidr_friends',
      '_pidr_achievements',
      '_pidr_user_achievements',
      '_pidr_user_settings',
      '_pidr_hd_wallets'
    ];

    const tableStatus: Record<string, any> = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const tableName of pidrTables) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const { data, error, count } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });

        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${error.message}`);
          tableStatus[tableName] = {
            exists: false,
            error: error.message,
            count: 0
          };
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
          tableStatus[tableName] = {
            exists: true,
            count: count || 0,
            error: null
          };
        }
      } catch (err: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${tableName}:`, err.message);
        tableStatus[tableName] = {
          exists: false,
          error: err.message,
          count: 0
        };
      }
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalTables = pidrTables.length;
    const existingTables = Object.values(tableStatus).filter((t: any) => t.exists).length;
    const missingTables = totalTables - existingTables;

    return NextResponse.json({
      success: true,
      message: `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${totalTables} —Ç–∞–±–ª–∏—Ü P.I.D.R.`,
      hasSupabase: true,
      tables: tableStatus,
      summary: {
        total: totalTables,
        existing: existingTables,
        missing: missingTables,
        ready: missingTables === 0
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ P.I.D.R. Database API:', error);
    return NextResponse.json({
      success: false,
      message: error.message,
      hasSupabase: false,
      tables: {}
    }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  console.log('üèóÔ∏è P.I.D.R. Database API - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü');
  
  try {
    const body = await req.json();
    const { action, userId, amount, transactionType, description } = body;
    
    // –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
    if (action === 'get_user_balance') {
      return await getUserBalance(userId);
    }
    
    if (action === 'get_user_transactions') {
      return await getUserTransactions(userId);
    }
    
    if (action === 'create_transaction') {
      return await createTransaction(userId, amount, transactionType, description);
    }
    
    if (action === 'update_user_balance') {
      return await updateUserBalance(userId, amount);
    }

    // HD Wallet actions
    if (action === 'save_hd_address') {
      return await saveHDAddress(body);
    }

    if (action === 'get_user_hd_address') {
      return await getUserHDAddress(userId, body.coin);
    }

    if (action === 'get_all_user_hd_addresses') {
      return await getAllUserHDAddresses(userId);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    if (action === 'create_all_tables') {
      return await handleCreateTables();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ë–î
    if (action === 'check_database') {
      return await handleCheckDatabase();
    }
    
    if (action === 'create-tables') {
      // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
      const fs = require('fs');
      const path = require('path');
      const schemaPath = path.join(process.cwd(), 'src/lib/database/pidr-schema.sql');
      
      if (!fs.existsSync(schemaPath)) {
        return NextResponse.json({
          success: false,
          message: '–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }, { status: 404 });
      }

      const schemaSql: string = fs.readFileSync(schemaPath, 'utf8');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      const commands: string[] = schemaSql
        .split(';')
        .map((cmd: string) => cmd.trim())
        .filter((cmd: string) => cmd.length > 0 && !cmd.startsWith('--'));

      console.log(`üìù –í—ã–ø–æ–ª–Ω—è–µ–º ${commands.length} SQL –∫–æ–º–∞–Ω–¥...`);

      const results = [];
      let successCount = 0;
      let errorCount = 0;

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
      for (let i = 0; i < commands.length; i++) {
        const command = commands[i];
        
        try {
          const { error } = await supabase.rpc('exec_sql', { sql_query: command });
          
          if (error) {
            console.log(`‚ùå –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: ${error.message}`);
            results.push({
              command: i + 1,
              success: false,
              error: error.message,
              sql: command.substring(0, 100) + '...'
            });
            errorCount++;
          } else {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
            results.push({
              command: i + 1,
              success: true,
              error: null
            });
            successCount++;
          }
        } catch (err: any) {
          console.log(`‚ùå –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: ${err.message}`);
          results.push({
            command: i + 1,
            success: false,
            error: err.message,
            sql: command.substring(0, 100) + '...'
          });
          errorCount++;
        }
      }

      return NextResponse.json({
        success: errorCount === 0,
        message: `–í—ã–ø–æ–ª–Ω–µ–Ω–æ ${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥`,
        results,
        summary: {
          total: commands.length,
          success: successCount,
          errors: errorCount
        }
      });
    }

    if (action === 'test-insert') {
      // –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const testUser = {
        telegram_id: '12345678',
        username: 'test_user',
        first_name: 'Test',
        last_name: 'User',
        coins: 1000,
        rating: 0
      };

      const { data, error } = await supabase
        .from('_pidr_users')
        .insert(testUser)
        .select()
        .single();

      if (error) {
        return NextResponse.json({
          success: false,
          message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏',
          error: error.message
        }, { status: 500 });
      }

      return NextResponse.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω',
        data
      });
    }

    if (action === 'test-room') {
      // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
      const testRoom = {
        room_code: 'TEST' + Math.random().toString(36).substring(2, 8).toUpperCase(),
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
        max_players: 4,
        current_players: 1,
        status: 'waiting'
      };

      const { data, error } = await supabase
        .from('_pidr_rooms')
        .insert(testRoom)
        .select()
        .single();

      if (error) {
        return NextResponse.json({
          success: false,
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã',
          error: error.message
        }, { status: 500 });
      }

      return NextResponse.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞',
        data
      });
    }

    return NextResponse.json({
      success: false,
      message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    }, { status: 400 });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ P.I.D.R. Database POST:', error);
    return NextResponse.json({
      success: false,
      message: error.message
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–æ–º
async function getUserBalance(userId: string) {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const { data: user, error } = await supabase
      .from('_pidr_users')
      .select('id, coins, rating, games_played, games_won, username, first_name')
      .eq('telegram_id', userId)
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return NextResponse.json({ success: false, error: error.message });
    }

    if (!user) {
      return NextResponse.json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    return NextResponse.json({ 
      success: true, 
      balance: user.coins || 0,
      user: user 
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getUserBalance:', error);
    return NextResponse.json({ success: false, error: error.message });
  }
}

async function getUserTransactions(userId: string) {
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id')
      .eq('telegram_id', userId)
      .single();

    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return NextResponse.json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const { data: transactions, error } = await supabase
      .from('_pidr_coin_transactions')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(20);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return NextResponse.json({ success: false, error: error.message });
    }

    return NextResponse.json({ 
      success: true, 
      transactions: transactions || [] 
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getUserTransactions:', error);
    return NextResponse.json({ success: false, error: error.message });
  }
}

async function createTransaction(userId: string, amount: number, transactionType: string, description: string) {
  try {
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', { userId, amount, transactionType, description });
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id, coins')
      .eq('telegram_id', userId)
      .single();

    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return NextResponse.json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const oldBalance = user.coins || 0;
    const newBalance = Math.max(0, oldBalance + amount);

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { data: transaction, error: transactionError } = await supabase
      .from('_pidr_coin_transactions')
      .insert([{
        user_id: user.id,
        amount: amount,
        transaction_type: transactionType,
        description: description,
        balance_before: oldBalance,
        balance_after: newBalance
      }])
      .select()
      .single();

    if (transactionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
      return NextResponse.json({ success: false, error: transactionError.message });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase
      .from('_pidr_users')
      .update({ coins: newBalance })
      .eq('id', user.id);

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
      return NextResponse.json({ success: false, error: updateError.message });
    }

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    return NextResponse.json({ 
      success: true, 
      transaction: transaction,
      newBalance: newBalance,
      oldBalance: oldBalance 
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ createTransaction:', error);
    return NextResponse.json({ success: false, error: error.message });
  }
}

async function updateUserBalance(userId: string, newBalance: number) {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, newBalance });
    
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id')
      .eq('telegram_id', userId)
      .single();

    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return NextResponse.json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const { error } = await supabase
      .from('_pidr_users')
      .update({ coins: Math.max(0, newBalance) })
      .eq('id', user.id);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return NextResponse.json({ success: false, error: error.message });
    }

    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    return NextResponse.json({ success: true, balance: Math.max(0, newBalance) });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ updateUserBalance:', error);
    return NextResponse.json({ success: false, error: error.message });
  }
}

// HD Wallet functions
async function saveHDAddress(addressData: any) {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HD –∞–¥—Ä–µ—Å–∞:', addressData);

    const { data, error } = await supabase
      .from('_pidr_hd_wallets')
      .insert([
        {
          user_id: addressData.userId,
          coin: addressData.coin,
          address: addressData.address,
          derivation_path: addressData.derivationPath,
          address_index: addressData.index,
          created_at: new Date().toISOString()
        }
      ]);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HD –∞–¥—Ä–µ—Å–∞:', error);
      return NextResponse.json({ success: false, error: error.message }, { status: 500 });
    }

    return NextResponse.json({ 
      success: true, 
      message: 'HD –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
      data 
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ saveHDAddress:', error);
    return NextResponse.json({ success: false, error: error.message }, { status: 500 });
  }
}

async function getUserHDAddress(userId: string, coin: string) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ HD –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –º–æ–Ω–µ—Ç–∞ ${coin}`);

    const { data, error } = await supabase
      .from('_pidr_hd_wallets')
      .select('*')
      .eq('user_id', userId)
      .eq('coin', coin.toUpperCase())
      .single();

    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HD –∞–¥—Ä–µ—Å–∞:', error);
      return NextResponse.json({ success: false, error: error.message }, { status: 500 });
    }

    if (!data) {
      return NextResponse.json({ 
        success: true, 
        address: null,
        message: '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const address = {
      userId: data.user_id,
      coin: data.coin,
      address: data.address,
      derivationPath: data.derivation_path,
      index: data.address_index,
      created_at: new Date(data.created_at)
    };

    return NextResponse.json({ 
      success: true, 
      address,
      message: 'HD –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω' 
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getUserHDAddress:', error);
    return NextResponse.json({ success: false, error: error.message }, { status: 500 });
  }
}

async function getAllUserHDAddresses(userId: string) {
  try {
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö HD –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    const { data, error } = await supabase
      .from('_pidr_hd_wallets')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö HD –∞–¥—Ä–µ—Å–æ–≤:', error);
      return NextResponse.json({ success: false, error: error.message }, { status: 500 });
    }

    const addresses = data.map((row: any) => ({
      userId: row.user_id,
      coin: row.coin,
      address: row.address,
      derivationPath: row.derivation_path,
      index: row.address_index,
      created_at: new Date(row.created_at)
    }));

    return NextResponse.json({ 
      success: true, 
      addresses,
      count: addresses.length,
      message: `–ù–∞–π–¥–µ–Ω–æ ${addresses.length} HD –∞–¥—Ä–µ—Å–æ–≤` 
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getAllUserHDAddresses:', error);
    return NextResponse.json({ success: false, error: error.message }, { status: 500 });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
async function handleCreateTables() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü P.I.D.R...');
    
    const result = await createPidrTables();
    
    return NextResponse.json({
      success: result.success,
      message: result.message,
      errors: result.errors,
      timestamp: new Date().toISOString()
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ handleCreateTables:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü',
      error: error.message 
    }, { status: 500 });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î
async function handleCheckDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const status = await checkDatabaseStatus();
    const totalTables = Object.keys(status).length;
    const existingTables = Object.values(status).filter(Boolean).length;
    
    return NextResponse.json({
      success: true,
      status,
      summary: {
        total: totalTables,
        existing: existingTables,
        missing: totalTables - existingTables,
        ready: existingTables === totalTables
      },
      message: existingTables === totalTables 
        ? '‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!'
        : `‚ö†Ô∏è –ì–æ—Ç–æ–≤–æ ${existingTables}/${totalTables} —Ç–∞–±–ª–∏—Ü. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ.`
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ handleCheckDatabase:', error);
    return NextResponse.json({ 
      success: false, 
      error: error.message 
    }, { status: 500 });
  }
}
