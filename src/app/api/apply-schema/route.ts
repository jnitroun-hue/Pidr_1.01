import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';

export async function POST(req: NextRequest) {
  try {
    console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ö–µ–º—É –ë–î...');

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É _pidr_users
    const schemaUpdates = [
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ status –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      `ALTER TABLE _pidr_users ADD COLUMN IF NOT EXISTS status VARCHAR(20) DEFAULT 'offline'`,
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ last_seen –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      `ALTER TABLE _pidr_users ADD COLUMN IF NOT EXISTS last_seen TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP`,
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
      `UPDATE _pidr_users SET status = 'offline' WHERE status IS NULL`,
      `UPDATE _pidr_users SET last_seen = created_at WHERE last_seen IS NULL`
    ];

    console.log('üìù –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã...');
    
    for (const sql of schemaUpdates) {
      console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º: ${sql}`);
      const { error } = await supabase.rpc('exec_sql', { sql_query: sql });
      
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: ${sql}`, error);
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π
      } else {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${sql}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable, column_default')
      .eq('table_name', '_pidr_users')
      .order('ordinal_position');

    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', columnsError);
    } else {
      console.log('üìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã _pidr_users:', columns);
    }

    return NextResponse.json({
      success: true,
      message: '–°—Ö–µ–º–∞ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      columns: columns || []
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã:', error);
    return NextResponse.json({
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
      error: error.message
    }, { status: 500 });
  }
}

export async function GET(req: NextRequest) {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã _pidr_users...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    const { data: tableExists } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_name', '_pidr_users')
      .single();

    if (!tableExists) {
      return NextResponse.json({
        success: false,
        message: '–¢–∞–±–ª–∏—Ü–∞ _pidr_users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        tableExists: false
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const { data: columns, error } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable, column_default')
      .eq('table_name', '_pidr_users')
      .order('ordinal_position');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', error);
      return NextResponse.json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã',
        error: error.message
      }, { status: 500 });
    }

    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã _pidr_users:', columns);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['status', 'last_seen', 'avatar_url'];
    const missingFields = requiredFields.filter(field => 
      !columns?.some(col => col.column_name === field)
    );

    return NextResponse.json({
      success: true,
      tableExists: true,
      columns: columns || [],
      missingFields,
      needsUpdate: missingFields.length > 0
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã:', error);
    return NextResponse.json({
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`
    }, { status: 500 });
  }
}
