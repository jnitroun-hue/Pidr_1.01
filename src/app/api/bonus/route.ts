import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import { requireAuth } from '../../../lib/auth-utils';

// POST /api/bonus - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
export async function POST(req: NextRequest) {
  console.log('üéÅ POST /api/bonus - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞...');
  
  const auth = requireAuth(req);
  if (auth.error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', auth.error);
    return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
  }
  
  const userId = auth.userId;
  
  try {
    const { bonusType } = await req.json();
    
    if (!bonusType) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –±–æ–Ω—É—Å–∞' 
      }, { status: 400 });
    }
    
    console.log(`üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–∞ "${bonusType}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, userId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id, username, coins, telegram_id')
      .eq('id', userId)
      .single();
      
    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return NextResponse.json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }
    
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username, '–ë–∞–ª–∞–Ω—Å:', user.coins);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞
    let bonusAmount = 0;
    let bonusDescription = '';
    
    switch (bonusType) {
      case 'daily':
        // ‚úÖ –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ë–û–ù–£–°–ê
        const now = new Date();
        const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è ${userId} –∑–∞ ${todayStart.toISOString()}`);
        
        const { data: dailyBonusToday, error: dailyError } = await supabase
          .from('_pidr_transactions')
          .select('id, created_at, amount')
          .eq('user_id', userId)
          .eq('type', 'bonus')
          .eq('bonus_type', 'daily')
          .gte('created_at', todayStart.toISOString())
          .lt('created_at', todayEnd.toISOString())
          .order('created_at', { ascending: false })
          .limit(1);
        
        if (dailyError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', dailyError);
        }
        
        if (dailyBonusToday && dailyBonusToday.length > 0) {
          const lastBonus = dailyBonusToday[0];
          const nextBonusTime = new Date(todayEnd.getTime());
          const hoursLeft = Math.ceil((nextBonusTime.getTime() - now.getTime()) / (1000 * 60 * 60));
          
          console.log(`‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è –≤ ${lastBonus.created_at}`);
          return NextResponse.json({ 
            success: false, 
            message: `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω! –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ ${hoursLeft} —á.`,
            data: { 
              cooldownUntil: nextBonusTime,
              hoursLeft,
              lastBonusAmount: lastBonus.amount,
              lastBonusTime: lastBonus.created_at
            }
          }, { status: 400 });
        }
        
        bonusAmount = Math.floor(Math.random() * 150) + 50; // 50-200 –º–æ–Ω–µ—Ç
        bonusDescription = '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å';
        console.log(`‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω: ${bonusAmount} –º–æ–Ω–µ—Ç`);
        break;
        
      case 'referral':
        // ‚ùå –†–ï–§–ï–†–ê–õ–´ –ù–ï –î–û–õ–ñ–ù–´ –í–´–î–ê–í–ê–¢–¨–°–Ø –ù–ê–ü–†–Ø–ú–£–Æ –ß–ï–†–ï–ó –≠–¢–û–¢ API
        // –†–µ—Ñ–µ—Ä–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ stored procedure
        console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞–ø—Ä—è–º—É—é');
        return NextResponse.json({ 
          success: false, 
          message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π' 
        }, { status: 400 });
        break;
        
      case 'rank_up':
        bonusAmount = Math.floor(Math.random() * 1500) + 500; // 500-2000 –º–æ–Ω–µ—Ç
        bonusDescription = '–ë–æ–Ω—É—Å –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞';
        break;
        
      default:
        return NextResponse.json({ 
          success: false, 
          message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–æ–Ω—É—Å–∞' 
        }, { status: 400 });
    }
    
    console.log(`üí∞ –†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞: ${bonusAmount} –º–æ–Ω–µ—Ç`);
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ Supabase
    const newBalance = user.coins + bonusAmount;
    
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase
      .from('_pidr_users')
      .update({ 
        coins: newBalance,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);
      
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' 
      }, { status: 500 });
    }
    
    // 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    const { error: transactionError } = await supabase
      .from('_pidr_transactions')
      .insert({
        user_id: userId,
        type: 'bonus',
        amount: bonusAmount,
        description: bonusDescription,
        bonus_type: bonusType,
        created_at: new Date().toISOString()
      });
      
    if (transactionError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', transactionError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å
    }
    
    console.log(`‚úÖ –ë–æ–Ω—É—Å "${bonusType}" —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`);
    console.log(`üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.coins} ‚Üí ${newBalance} (+${bonusAmount})`);
    
    return NextResponse.json({ 
      success: true, 
      message: `${bonusDescription}: +${bonusAmount} –º–æ–Ω–µ—Ç!`,
      data: {
        bonusAmount,
        newBalance,
        oldBalance: user.coins,
        bonusType,
        description: bonusDescription
      }
    });
    
  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API –±–æ–Ω—É—Å–æ–≤:', error);
    return NextResponse.json({ 
      success: false, 
      message: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
    }, { status: 500 });
  }
}

// GET /api/bonus - –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã
export async function GET(req: NextRequest) {
  console.log('üéÅ GET /api/bonus - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤...');
  
  const auth = requireAuth(req);
  if (auth.error) {
    return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
  }
  
  const userId = auth.userId;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–æ–Ω—É—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: recentBonuses } = await supabase
      .from('_pidr_transactions')
      .select('bonus_type, created_at')
      .eq('user_id', userId)
      .eq('type', 'bonus')
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      .order('created_at', { ascending: false });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ–Ω—É—Å–æ–≤
    const today = new Date().toDateString();
    const dailyBonusToday = recentBonuses?.find(b => 
      b.bonus_type === 'daily' && 
      new Date(b.created_at).toDateString() === today
    );
    
    const availableBonuses = [
      {
        id: 'daily',
        name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
        description: '–ü–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
        reward: '50-200 –º–æ–Ω–µ—Ç',
        icon: 'üìÖ',
        available: !dailyBonusToday,
        cooldownUntil: dailyBonusToday ? 
          new Date(new Date(dailyBonusToday.created_at).getTime() + 24 * 60 * 60 * 1000) : null
      },
      {
        id: 'referral',
        name: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
        description: '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã',
        reward: '500 –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä—É–≥–∞',
        icon: 'üë•',
        available: false, // –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
        referrals: 0, // TODO: –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏–∑ –±–∞–∑—ã
        note: '–ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å'
      },
      {
        id: 'rank_up',
        name: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞',
        description: '–ë–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–∞–Ω–≥–æ–≤',
        reward: '500-2000 –º–æ–Ω–µ—Ç',
        icon: 'üèÜ',
        available: false, // TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        nextRank: '–°–µ—Ä–µ–±—Ä–æ'
      }
    ];
    
    return NextResponse.json({ 
      success: true, 
      bonuses: availableBonuses 
    });
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤' 
    }, { status: 500 });
  }
}
