import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';

// GET /api/stats/online - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
export async function GET(req: NextRequest) {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤...');

    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const { data: statusStats, error: statusError } = await supabase
      .from('_pidr_users')
      .select('status')
      .then(({ data, error }) => {
        if (error) return { data: null, error };
        
        const stats = data?.reduce((acc: any, user: any) => {
          acc[user.status] = (acc[user.status] || 0) + 1;
          return acc;
        }, {}) || {};
        
        return { data: stats, error: null };
      });

    if (statusError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statusError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' 
      }, { status: 500 });
    }

    // 2. –†–µ–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
    const { data: reallyActive, error: activeError } = await supabase
      .from('_pidr_users')
      .select('id')
      .eq('status', 'online')
      .gte('last_seen', fiveMinutesAgo);

    if (activeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', activeError);
    }

    // 3. –ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000).toISOString();
    const { data: online30min, error: online30Error } = await supabase
      .from('_pidr_users')
      .select('id')
      .eq('status', 'online')
      .gte('last_seen', thirtyMinutesAgo);

    if (online30Error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –∑–∞ 30 –º–∏–Ω:', online30Error);
    }

    // 4. –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö
    const { data: inRooms, error: roomsError } = await supabase
      .from('_pidr_users')
      .select('id')
      .in('status', ['in_room', 'playing']);

    if (roomsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö:', roomsError);
    }

    const stats = {
      total: Object.values(statusStats || {}).reduce((a: any, b: any) => a + b, 0),
      byStatus: statusStats || {},
      reallyActive: reallyActive?.length || 0, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
      online30min: online30min?.length || 0,   // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
      inRooms: inRooms?.length || 0
    };

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞:', stats);

    return NextResponse.json({
      success: true,
      stats
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
