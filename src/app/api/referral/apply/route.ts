/**
 * üéÅ API: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
 * 
 * POST /api/referral/apply
 */

import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    console.log('üéÅ [referral/apply] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');

    const body = await request.json();
    const { referralCode } = body;

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ headers
    const telegramIdHeader = request.headers.get('x-telegram-id');
    
    if (!telegramIdHeader) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized: Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' },
        { status: 401 }
      );
    }

    const userId = parseInt(telegramIdHeader, 10);

    if (isNaN(userId)) {
      return NextResponse.json(
        { success: false, error: 'Invalid user ID' },
        { status: 400 }
      );
    }

    if (!referralCode) {
      return NextResponse.json(
        { success: false, error: 'Referral code is required' },
        { status: 400 }
      );
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–¥: ${referralCode}`);

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    const { data, error } = await supabase.rpc('process_referral', {
      p_referred_id: userId,
      p_referral_code: referralCode
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
      return NextResponse.json(
        { success: false, error: error.message },
        { status: 500 }
      );
    }

    if (!data.success) {
      return NextResponse.json(
        { success: false, error: data.error },
        { status: 400 }
      );
    }

    console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω:', data);

    return NextResponse.json({
      success: true,
      referrerBonus: data.referrer_bonus,
      referredBonus: data.referred_bonus,
      message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${data.referred_bonus} –º–æ–Ω–µ—Ç! –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏–ª ${data.referrer_bonus} –º–æ–Ω–µ—Ç!`
    });

  } catch (error: any) {
    console.error('‚ùå [referral/apply] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json({
      success: false,
      error: error.message || 'Internal server error'
    }, { status: 500 });
  }
}

