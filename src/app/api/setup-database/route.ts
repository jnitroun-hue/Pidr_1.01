// API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö P.I.D.R.
import { NextRequest, NextResponse } from 'next/server';
import { createPidrTables, checkDatabaseStatus } from '../../../lib/database/create-tables';
import { createTablesDirectly, generateCreateTablesSQL } from '../../../lib/database/create-tables-direct';

export async function GET(req: NextRequest) {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö P.I.D.R...');
    
    const status = await checkDatabaseStatus();
    const totalTables = Object.keys(status).length;
    const existingTables = Object.values(status).filter(Boolean).length;
    const isReady = existingTables === totalTables;
    
    return NextResponse.json({
      success: true,
      ready: isReady,
      status,
      summary: {
        total: totalTables,
        existing: existingTables,
        missing: totalTables - existingTables
      },
      message: isReady 
        ? '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!'
        : `‚ö†Ô∏è –ì–æ—Ç–æ–≤–æ ${existingTables}/${totalTables} —Ç–∞–±–ª–∏—Ü`,
      setupUrl: '/api/setup-database',
      instructions: !isReady ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/setup-database –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü' : null
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error);
    return NextResponse.json({ 
      success: false, 
      error: error.message 
    }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü P.I.D.R...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const currentStatus = await checkDatabaseStatus();
    const existingCount = Object.values(currentStatus).filter(Boolean).length;
    
    console.log(`üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${existingCount}/${Object.keys(currentStatus).length} —Ç–∞–±–ª–∏—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ RPC)
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');
    const directResult = await createTablesDirectly();
    
    // –ï—Å–ª–∏ –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ RPC
    let result = directResult;
    if (!directResult.success) {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ RPC...');
      result = await createPidrTables();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const finalStatus = await checkDatabaseStatus();
    const finalCount = Object.values(finalStatus).filter(Boolean).length;
    
    return NextResponse.json({
      success: result.success,
      message: result.message,
      before: {
        existing: existingCount,
        status: currentStatus
      },
      after: {
        existing: finalCount,
        status: finalStatus
      },
      created: finalCount - existingCount,
      errors: result.errors,
      ready: finalCount === Object.keys(finalStatus).length,
      timestamp: new Date().toISOString()
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü',
      error: error.message 
    }, { status: 500 });
  }
}
