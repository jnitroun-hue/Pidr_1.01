import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import { requireAuth } from '../../../../lib/auth-utils';

/**
 * POST /api/nft/connect-wallet
 * –ü–æ–¥–∫–ª—é—á–∏—Ç—å TON –∫–æ—à–µ–ª–µ–∫ –∏–≥—Ä–æ–∫–∞ –¥–ª—è NFT
 */
export async function POST(req: NextRequest) {
  try {
    const userId = await requireAuth(req);
    console.log(`üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–∫–ª—é—á–∞–µ—Ç TON –∫–æ—à–µ–ª–µ–∫...`);

    const { wallet_address, wallet_type = 'ton', proof } = await req.json();

    if (!wallet_address) {
      return NextResponse.json(
        { success: false, message: '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    // TODO: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è proof (–ø–æ–¥–ø–∏—Å–∏) –æ—Ç TON Connect
    // –í production –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∞–¥–µ–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–º

    // –í—ã–∑—ã–≤–∞–µ–º SQL —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    const { data, error } = await supabase.rpc('connect_player_wallet', {
      p_user_id: userId,
      p_wallet_address: wallet_address,
      p_wallet_type: wallet_type
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
      return NextResponse.json(
        { success: false, message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞' },
        { status: 500 }
      );
    }

    if (!data.success) {
      return NextResponse.json(
        { success: false, message: data.message },
        { status: 400 }
      );
    }

    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${wallet_address} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return NextResponse.json({
      success: true,
      message: '–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω',
      wallet_id: data.wallet_id,
      wallet_address
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
    return NextResponse.json(
      { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 401 }
    );
  }
}

/**
 * GET /api/nft/connect-wallet
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function GET(req: NextRequest) {
  try {
    const userId = await requireAuth(req);
    console.log(`üìã –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);

    const { data: wallets, error } = await supabase
      .from('_pidr_player_wallets')
      .select('*')
      .eq('user_id', userId)
      .order('is_primary', { ascending: false })
      .order('connected_at', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤:', error);
      return NextResponse.json(
        { success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      wallets: wallets || []
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤:', error);
    return NextResponse.json(
      { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 401 }
    );
  }
}

