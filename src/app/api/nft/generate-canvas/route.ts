import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { getSessionFromRequest } from '@/lib/auth/session-utils';

/**
 * API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ Canvas
 * POST /api/nft/generate-canvas
 */
export async function POST(request: NextRequest) {
  try {
    console.log('üé¥ [NFT Canvas] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é - –ë–ï–ó cookies, —Ç–æ–ª—å–∫–æ –∏–∑ localStorage —á–µ—Ä–µ–∑ headers
    const telegramIdHeader = request.headers.get('x-telegram-id');
    const usernameHeader = request.headers.get('x-username');
    
    if (!telegramIdHeader) {
      console.error('‚ùå [NFT Canvas] –ù–µ –Ω–∞–π–¥–µ–Ω x-telegram-id header');
      return NextResponse.json(
        { success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    const session = {
      userId: telegramIdHeader,
      telegramId: telegramIdHeader,
      username: usernameHeader || undefined
    };

    const userId = session.telegramId;

    console.log('‚úÖ [NFT Canvas] –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ headers:', { 
      userId,
      username: session.username 
    });

    const body = await request.json();
    const { 
      action = 'single',
      suit,
      rank,
      rarity = 'common',
      imageDataUrl // Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞
    } = body;

    // ‚úÖ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –¶–ï–ù: –†–∞–Ω–≥ + –ú–∞—Å—Ç—å
    // –¶–µ–Ω—ã –ø–æ —Ä–∞–Ω–≥–∞–º
    const RANK_COSTS: Record<string, number> = {
      '2': 1000, '3': 1000, '4': 1000, '5': 1000, '6': 1000, '7': 1000, '8': 1000, '9': 1000,
      '10': 2500,
      'jack': 2500, 'j': 2500,
      'queen': 5000, 'q': 5000,
      'king': 5000, 'k': 5000,
      'ace': 8000, 'a': 8000
    };

    // –¶–µ–Ω—ã –ø–æ –º–∞—Å—Ç—è–º
    const SUIT_COSTS: Record<string, number> = {
      'hearts': 500,
      'diamonds': 500,
      'clubs': 500,
      'spades': 1000 // ‚ô†Ô∏è –¥–æ—Ä–æ–∂–µ
    };

    const FULL_DECK_COST = 150000; // 52 –∫–∞—Ä—Ç—ã, —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ~2800 –∑–∞ –∫–∞—Ä—Ç—É
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç—ã
    const rankCost = RANK_COSTS[rank?.toLowerCase()] || 1000;
    const suitCost = SUIT_COSTS[suit?.toLowerCase()] || 500;
    const cardCost = rankCost + suitCost;
    
    const cost = action === 'full_deck' ? FULL_DECK_COST : (action === 'deck_card' ? 0 : cardCost);

    console.log('üé¥ [NFT Canvas] –î–∞–Ω–Ω—ã–µ:', { 
      userId, 
      action, 
      suit, 
      rank, 
      rankCost, 
      suitCost, 
      totalCost: cardCost 
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id, coins, telegram_id')
      .eq('telegram_id', userId)
      .single();

    if (userError || !user) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î' },
        { status: 404 }
      );
    }

    let newBalance = user.coins;
    let actualCost = cost;

    // –î–ª—è –ø–æ–ª–Ω–æ–π –∫–æ–ª–æ–¥—ã –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    const isPartOfDeck = action === 'deck_card';
    if (!isPartOfDeck) {
      // –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
      if (user.coins < cost) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç', required: cost, available: user.coins },
          { status: 400 }
        );
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
      newBalance = user.coins - cost;
      const { error: updateError } = await supabase
        .from('_pidr_users')
        .update({ coins: newBalance })
        .eq('id', user.id);

      if (updateError) {
        console.error('‚ùå [NFT Canvas] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç' },
          { status: 500 }
        );
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await supabase
        .from('_pidr_coin_transactions')
        .insert([{
          user_id: user.id,
          amount: -cost,
          transaction_type: 'nft_generation',
          description: `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è NFT –∫–∞—Ä—Ç—ã: ${rank} of ${suit}`,
          balance_before: user.coins,
          balance_after: newBalance
        }]);

      console.log('‚úÖ [NFT Canvas] –ú–æ–Ω–µ—Ç—ã —Å–ø–∏—Å–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É...');
    } else {
      // –ö–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã - —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      actualCost = 0;
      console.log('‚úÖ [NFT Canvas] –ö–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã (—É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞), —Å–æ—Ö—Ä–∞–Ω—è–µ–º...');
    }

    if (!imageDataUrl) {
      return NextResponse.json(
        { success: false, error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' },
        { status: 400 }
      );
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ Buffer
    const base64Data = imageDataUrl.replace(/^data:image\/\w+;base64,/, '');
    const buffer = Buffer.from(base64Data, 'base64');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = `${userId}/${suit}_${rank}_${rarity}_${Date.now()}.png`;
    const bucketName = 'nft-cards';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from(bucketName)
      .upload(fileName, buffer, {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: false
      });

    if (uploadError) {
      console.error('‚ùå [NFT Canvas] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', uploadError);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
      await supabase
        .from('_pidr_users')
        .update({ coins: user.coins })
        .eq('id', user.id);
      
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' },
        { status: 500 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: { publicUrl } } = supabase.storage
      .from(bucketName)
      .getPublicUrl(fileName);

    console.log('‚úÖ [NFT Canvas] –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Storage:', publicUrl);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É _pidr_nft_cards
    const { data: savedCard, error: saveError} = await supabase
      .from('_pidr_nft_cards')
      .insert([{
        user_id: userId,
        suit: suit,
        rank: rank,
        rarity: 'custom', // ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        image_url: publicUrl,
        storage_path: fileName,
        metadata: {
          generated_at: new Date().toISOString(),
          generator: 'client_canvas',
          version: '2.0',
          cost: cost,
          rank_cost: rankCost,
          suit_cost: suitCost
        },
        created_at: new Date().toISOString()
      }])
      .select()
      .single();

    if (saveError) {
      console.error('‚ùå [NFT Canvas] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', saveError);
      console.error('‚ùå [NFT Canvas] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(saveError, null, 2));
      
      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É!
      if (!isPartOfDeck && newBalance !== undefined) {
        await supabase
          .from('_pidr_users')
          .update({ coins: user.coins })
          .eq('id', user.id);
      }
      
      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage!
      await supabase.storage
        .from(bucketName)
        .remove([fileName]);
      
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
          details: saveError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        },
        { status: 500 }
      );
    }
    
    if (!savedCard) {
      console.error('‚ùå [NFT Canvas] –ö–∞—Ä—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ - savedCard is null');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã
      if (!isPartOfDeck && newBalance !== undefined) {
        await supabase
          .from('_pidr_users')
          .update({ coins: user.coins })
          .eq('id', user.id);
      }
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      await supabase.storage
        .from(bucketName)
        .remove([fileName]);
      
      return NextResponse.json(
        { success: false, error: '–ö–∞—Ä—Ç–∞ –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' },
        { status: 500 }
      );
    }

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ _pidr_nft_ownership –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ–µ
    const { error: ownershipError } = await supabase
      .from('_pidr_nft_ownership')
      .insert([{
        user_telegram_id: userId,
        nft_address: `local_${Date.now()}`,
        token_id: `${suit}_${rank}_custom`,
        card_id: `${rank}_of_${suit}`,
        card_name: `${rank.toUpperCase()} of ${suit.toUpperCase()}`,
        card_rank: rank,
        card_suit: suit,
        rarity: 'custom',
        image_url: publicUrl,
        acquired_via: 'generation',
        minted_at: new Date().toISOString()
      }]);
    
    if (ownershipError) {
      console.error('‚ö†Ô∏è [NFT Canvas] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ ownership (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', ownershipError);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ _pidr_nft_cards
    }

    console.log('‚úÖ [NFT Canvas] –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î:', {
      cardId: savedCard.id,
      userId: userId,
      suit: suit,
      rank: rank
    });

    return NextResponse.json({
      success: true,
      message: '–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!',
      card: {
        ...savedCard,
        imageUrl: publicUrl
      },
      balance: newBalance,
      spent: cost
    });

  } catch (error: any) {
    console.error('‚ùå [NFT Canvas] –û—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

/**
 * GET /api/nft/generate-canvas
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç
 */
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é - –ë–ï–ó cookies, —Ç–æ–ª—å–∫–æ –∏–∑ localStorage —á–µ—Ä–µ–∑ headers
    const telegramIdHeader = request.headers.get('x-telegram-id');
    const usernameHeader = request.headers.get('x-username');
    
    if (!telegramIdHeader) {
      console.error('‚ùå [NFT Canvas GET] –ù–µ –Ω–∞–π–¥–µ–Ω x-telegram-id header');
      return NextResponse.json(
        { success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    const session = {
      userId: telegramIdHeader,
      telegramId: telegramIdHeader,
      username: usernameHeader || undefined
    };

    const userId = session.telegramId;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: cards, error } = await supabase
      .from('_pidr_nft_cards')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå [NFT Canvas] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      cards: cards || [],
      count: cards?.length || 0
    });

  } catch (error: any) {
    console.error('‚ùå [NFT Canvas] –û—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

