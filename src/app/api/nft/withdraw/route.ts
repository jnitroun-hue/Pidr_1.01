import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import { requireAuth } from '../../../../lib/auth-utils';

/**
 * POST /api/nft/withdraw
 * –í—ã–≤–æ–¥ NFT –Ω–∞ –¥—Ä—É–≥–æ–π –∫–æ—à–µ–ª–µ–∫
 */
export async function POST(req: NextRequest) {
  try {
    const userId = await requireAuth(req);
    console.log(`üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ NFT...`);

    const { nft_ownership_id, to_wallet_address } = await req.json();

    if (!nft_ownership_id || !to_wallet_address) {
      return NextResponse.json(
        { success: false, message: 'nft_ownership_id –∏ to_wallet_address –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NFT –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: ownership, error: ownershipError } = await supabase
      .from('_pidr_nft_ownership')
      .select('*')
      .eq('id', nft_ownership_id)
      .eq('user_id', userId)
      .eq('is_active', true)
      .single();

    if (ownershipError || !ownership) {
      return NextResponse.json(
        { success: false, message: 'NFT –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º' },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ NFT
    if (!ownership.can_withdraw) {
      return NextResponse.json(
        { success: false, message: '–≠—Ç–æ—Ç NFT –Ω–µ–ª—å–∑—è –≤—ã–≤–µ—Å—Ç–∏' },
        { status: 403 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    const { data: withdrawal, error: withdrawalError } = await supabase
      .from('_pidr_nft_withdrawals')
      .insert({
        user_id: userId,
        nft_ownership_id,
        from_wallet_address: ownership.wallet_address,
        to_wallet_address,
        nft_address: ownership.nft_address,
        status: 'pending'
      })
      .select()
      .single();

    if (withdrawalError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥:', withdrawalError);
      return NextResponse.json(
        { success: false, message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥' },
        { status: 500 }
      );
    }

    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ NFT —Å–æ–∑–¥–∞–Ω: ${withdrawal.id}`);
    
    return NextResponse.json({
      success: true,
      withdrawal_id: withdrawal.id,
      nft_address: ownership.nft_address,
      from_wallet: ownership.wallet_address,
      to_wallet: to_wallet_address,
      message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∫–æ—à–µ–ª—å–∫–µ.'
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –≤—ã–≤–æ–¥–∞ NFT:', error);
    return NextResponse.json(
      { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 401 }
    );
  }
}

/**
 * PUT /api/nft/withdraw
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ NFT –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export async function PUT(req: NextRequest) {
  try {
    const userId = await requireAuth(req);
    console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ NFT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);

    const { withdrawal_id, transaction_hash } = await req.json();

    if (!withdrawal_id || !transaction_hash) {
      return NextResponse.json(
        { success: false, message: 'withdrawal_id –∏ transaction_hash –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: withdrawal, error: withdrawalError } = await supabase
      .from('_pidr_nft_withdrawals')
      .select('*')
      .eq('id', withdrawal_id)
      .eq('user_id', userId)
      .single();

    if (withdrawalError || !withdrawal) {
      return NextResponse.json(
        { success: false, message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 403 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
    const { error: updateError } = await supabase
      .from('_pidr_nft_withdrawals')
      .update({
        status: 'completed',
        transaction_hash,
        completed_at: new Date().toISOString()
      })
      .eq('id', withdrawal_id);

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞:', updateError);
      return NextResponse.json(
        { success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞' },
        { status: 500 }
      );
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º NFT –≤ —Ç–µ–∫—É—â–µ–º –∫–æ—à–µ–ª—å–∫–µ
    const { error: deactivateError } = await supabase
      .from('_pidr_nft_ownership')
      .update({
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq('id', withdrawal.nft_ownership_id);

    if (deactivateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ NFT:', deactivateError);
    }

    console.log(`‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω: ${withdrawal.nft_address}`);
    
    return NextResponse.json({
      success: true,
      message: 'NFT —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫!',
      transaction_hash
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ NFT:', error);
    return NextResponse.json(
      { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 401 }
    );
  }
}

