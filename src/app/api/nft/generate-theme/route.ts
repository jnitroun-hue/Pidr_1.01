/**
 * üé® API: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö NFT –∫–∞—Ä—Ç
 * 
 * POST /api/nft/generate-theme
 * 
 * –¢–µ–º—ã: Pokemon, Halloween, Star Wars
 * 
 * ‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ê –°–ï–†–í–ï–†–ï –° –ü–û–ú–û–©–¨–Æ SHARP!
 */

import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import sharp from 'sharp';
import path from 'path';
import fs from 'fs';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–º
const THEMES: Record<string, { prefix: string; folder: string; total: number }> = {
  pokemon: { prefix: '', folder: 'pokemon', total: 52 },
  halloween: { prefix: 'hel_', folder: 'halloween', total: 10 },
  starwars: { prefix: 'star_', folder: 'starwars', total: 7 }
};

export async function POST(request: NextRequest) {
  try {
    console.log('üé® [generate-theme] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π NFT –∫–∞—Ä—Ç—ã');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const body = await request.json();
    const { suit, rank, theme, themeId, action, skipCoinDeduction } = body;

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ headers
    const telegramIdHeader = request.headers.get('x-telegram-id');
    
    if (!telegramIdHeader) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized: Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' },
        { status: 401 }
      );
    }

    const userId = parseInt(telegramIdHeader, 10);

    if (isNaN(userId)) {
      return NextResponse.json(
        { success: false, error: 'Invalid user ID' },
        { status: 400 }
      );
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
    console.log(`üé® –¢–µ–º–∞: ${theme}, ID: ${themeId}, –ö–∞—Ä—Ç–∞: ${rank}${suit}`);

    // ‚úÖ –ì–ï–ù–ï–†–ò–†–£–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –ù–ê –°–ï–†–í–ï–†–ï!
    const imageBuffer = await generateThemeCardImage(suit, rank, themeId, theme);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(2, 9);
    const fileName = `${theme}_${rank}_${suit}_${themeId}_${timestamp}_${random}.png`;
    const filePath = `nft-cards/${fileName}`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage
    console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${filePath}`);
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('nft-cards')
      .upload(filePath, imageBuffer, {
        contentType: 'image/png',
        upsert: false
      });

    if (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', uploadError);
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadError.message}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabase.storage
      .from('nft-cards')
      .getPublicUrl(filePath);

    if (!urlData || !urlData.publicUrl) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL');
    }

    const imageUrl = urlData.publicUrl;
    console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${imageUrl}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const { data: nftData, error: dbError } = await supabase
      .from('_pidr_nft_cards')
      .insert({
        user_id: userId,
        suit: suit,
        rank: rank,
        rarity: theme, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –∫–∞–∫ rarity
        image_url: imageUrl,
        storage_path: filePath,
        metadata: {
          theme: theme,
          theme_id: themeId,
          generator: action,
          created_at: new Date().toISOString()
        },
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage
      await supabase.storage
        .from('nft-cards')
        .remove([filePath]);
      
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${dbError.message}`);
    }

    console.log(`‚úÖ NFT —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: ID=${nftData.id}`);

    // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã (–µ—Å–ª–∏ –Ω–µ skipCoinDeduction)
    let newBalance = undefined;
    
    if (!skipCoinDeduction) {
      const costs: Record<string, number> = {
        random_pokemon: 10000,
        random_halloween: 10000,
        random_starwars: 10000,
        deck_pokemon: 400000,
        deck_halloween: 400000,
        deck_starwars: 400000
      };

      const cost = costs[action] || 10000;

      const { data: deductData, error: deductError } = await supabase.rpc('deduct_user_coins', {
        p_user_id: userId,
        p_amount: cost
      });

      if (deductError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç:', deductError);
      } else {
        newBalance = deductData;
        console.log(`üí∞ –°–ø–∏—Å–∞–Ω–æ ${cost} –º–æ–Ω–µ—Ç, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
      }
    }

    return NextResponse.json({
      success: true,
      nft: {
        id: nftData.id,
        suit: nftData.suit,
        rank: nftData.rank,
        rarity: nftData.rarity,
        image_url: nftData.image_url,
        theme: theme,
        theme_id: themeId
      },
      newBalance
    });

  } catch (error: any) {
    console.error('‚ùå [generate-theme] –û—à–∏–±–∫–∞:', error);
    return NextResponse.json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

/**
 * ‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–†–¢–´ –° –ü–û–ú–û–©–¨–Æ SHARP –ù–ê –°–ï–†–í–ï–†–ï!
 */
async function generateThemeCardImage(
  suit: string,
  rank: string,
  themeId: number,
  theme: string
): Promise<Buffer> {
  const themeConfig = THEMES[theme];
  
  if (!themeConfig) {
    throw new Error(`Unknown theme: ${theme}`);
  }

  // –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–µ–º—ã –≤ public/
  const fileName = `${themeConfig.prefix}${themeId}.png`;
  const imagePath = path.join(process.cwd(), 'public', themeConfig.folder, fileName);

  console.log(`üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(imagePath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`);
    throw new Error(`Theme image not found: ${fileName}`);
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Å—Ç–∏
  const suitColor = (suit === 'hearts' || suit === 'diamonds') 
    ? '#ef4444' 
    : '#000000';

  // –°–∏–º–≤–æ–ª –º–∞—Å—Ç–∏
  const suitSymbol = {
    hearts: '‚ô•',
    diamonds: '‚ô¶',
    clubs: '‚ô£',
    spades: '‚ô†'
  }[suit] || suit;

  // SVG –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (—Ä–∞–Ω–≥ –∏ –º–∞—Å—Ç—å)
  const svgText = `
    <svg width="300" height="420">
      <!-- –ë–µ–ª—ã–π —Ñ–æ–Ω -->
      <rect width="300" height="420" fill="#ffffff"/>
      
      <!-- –ß–µ—Ä–Ω–∞—è —Ä–∞–º–∫–∞ -->
      <rect x="4" y="4" width="292" height="412" fill="none" stroke="#000000" stroke-width="8"/>
      
      <!-- –†–∞–Ω–≥ –∏ –º–∞—Å—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É -->
      <text x="20" y="50" font-family="Arial" font-size="40" font-weight="bold" fill="${suitColor}">${rank.toUpperCase()}</text>
      <text x="20" y="90" font-family="Arial" font-size="36" font-weight="bold" fill="${suitColor}">${suitSymbol}</text>
      
      <!-- –†–∞–Ω–≥ –∏ –º–∞—Å—Ç—å –≤ –Ω–∏–∂–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É -->
      <text x="260" y="400" font-family="Arial" font-size="40" font-weight="bold" fill="${suitColor}" text-anchor="end">${rank.toUpperCase()}</text>
      <text x="260" y="360" font-family="Arial" font-size="36" font-weight="bold" fill="${suitColor}" text-anchor="end">${suitSymbol}</text>
    </svg>
  `;

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–º—ã
    const themeImage = await sharp(imagePath)
      .resize(200, 200, { fit: 'contain', background: { r: 255, g: 255, b: 255, alpha: 1 } })
      .toBuffer();

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π —Å —Ç–µ–∫—Å—Ç–æ–º
    const baseLayer = await sharp(Buffer.from(svgText))
      .png()
      .toBuffer();

    // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–º—ã –≤ —Ü–µ–Ω—Ç—Ä (X: 50, Y: 110)
    const finalImage = await sharp(baseLayer)
      .composite([
        {
          input: themeImage,
          top: 110,
          left: 50
        }
      ])
      .png()
      .toBuffer();

    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω–æ!`);
    return finalImage;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error);
    throw new Error(`Failed to generate card image: ${error}`);
  }
}
