/**
 * üóëÔ∏è API: –£–¥–∞–ª–µ–Ω–∏–µ NFT –∫–∞—Ä—Ç—ã
 * 
 * DELETE /api/nft/delete
 * 
 * –£–¥–∞–ª—è–µ—Ç NFT –∏–∑ –ë–î –∏ –∏–∑ Supabase Storage
 */

import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function DELETE(request: NextRequest) {
  try {
    console.log('üóëÔ∏è [delete-nft] –£–¥–∞–ª–µ–Ω–∏–µ NFT –∫–∞—Ä—Ç—ã');

    const body = await request.json();
    const { nftId } = body;

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ headers
    const telegramIdHeader = request.headers.get('x-telegram-id');
    
    if (!telegramIdHeader) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized: Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' },
        { status: 401 }
      );
    }

    const userId = parseInt(telegramIdHeader, 10);

    if (isNaN(userId)) {
      return NextResponse.json(
        { success: false, error: 'Invalid user ID' },
        { status: 400 }
      );
    }

    if (!nftId) {
      return NextResponse.json(
        { success: false, error: 'nftId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}, NFT ID: ${nftId}`);

    // –ü–æ–ª—É—á–∞–µ–º NFT –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ storage_path
    const { data: nft, error: fetchError } = await supabase
      .from('_pidr_nft_cards')
      .select('id, user_id, storage_path')
      .eq('id', nftId)
      .single();

    if (fetchError || !nft) {
      console.error('‚ùå NFT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', fetchError);
      return NextResponse.json(
        { success: false, error: 'NFT –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if (nft.user_id !== userId) {
      return NextResponse.json(
        { success: false, error: '–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –∫–∞—Ä—Ç—ã' },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    const { data: activeListing } = await supabase
      .from('_pidr_nft_marketplace')
      .select('id')
      .eq('nft_card_id', nftId)
      .eq('status', 'active')
      .single();

    if (activeListing) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –Ω–∞ –ø—Ä–æ–¥–∞–∂—É. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É.' },
        { status: 400 }
      );
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ Storage
    if (nft.storage_path) {
      console.log(`üì§ –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage: ${nft.storage_path}`);
      
      const { error: storageError } = await supabase.storage
        .from('nft-cards')
        .remove([nft.storage_path]);

      if (storageError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Storage:', storageError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
      } else {
        console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ Storage');
      }
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    const { error: deleteError } = await supabase
      .from('_pidr_nft_cards')
      .delete()
      .eq('id', nftId);

    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î:', deleteError);
      return NextResponse.json(
        { success: false, error: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${deleteError.message}` },
        { status: 500 }
      );
    }

    console.log(`‚úÖ NFT ${nftId} —É–¥–∞–ª–µ–Ω–∞`);

    return NextResponse.json({
      success: true,
      message: 'NFT –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });

  } catch (error: any) {
    console.error('‚ùå [delete-nft] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

