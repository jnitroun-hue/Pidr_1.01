import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import { requireAuth } from '../../../../lib/auth-utils';
import { getNFTService } from '../../../../lib/ton/nft-service';

/**
 * POST /api/nft/mint
 * –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∏–Ω—Ç—É NFT –∫–∞—Ä—Ç—ã
 */
export async function POST(req: NextRequest) {
  try {
    const userId = await requireAuth(req);
    console.log(`üé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∏–Ω—Ç NFT...`);

    const { card_id, wallet_address } = await req.json();

    if (!card_id || !wallet_address) {
      return NextResponse.json(
        { success: false, message: 'card_id –∏ wallet_address –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: walletCheck, error: walletError } = await supabase
      .from('_pidr_player_wallets')
      .select('id')
      .eq('user_id', userId)
      .eq('wallet_address', wallet_address)
      .single();

    if (walletError || !walletCheck) {
      return NextResponse.json(
        { success: false, message: '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' },
        { status: 403 }
      );
    }

    // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–∏–Ω—Ç —á–µ—Ä–µ–∑ SQL —Ñ—É–Ω–∫—Ü–∏—é
    const { data, error } = await supabase.rpc('reserve_nft_mint', {
      p_user_id: userId,
      p_card_id: card_id,
      p_wallet_address: wallet_address
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω—Ç–∞:', error);
      return NextResponse.json(
        { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è' },
        { status: 500 }
      );
    }

    if (!data.success) {
      return NextResponse.json(
        { success: false, message: data.message },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const nftService = getNFTService();
    const card = data.card;
    
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const metadataUrl = nftService.createMetadataUrl(card_id);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –º–∏–Ω—Ç–∞
    const mintPrice = nftService.calculateMintPrice(card.rarity);

    console.log(`‚úÖ –ú–∏–Ω—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω: ${card.card_name} –¥–ª—è ${wallet_address}`);
    
    return NextResponse.json({
      success: true,
      mint_id: data.mint_id,
      card: {
        card_id: card.card_id,
        card_name: card.card_name,
        card_rank: card.card_rank,
        card_suit: card.card_suit,
        rarity: card.rarity,
        image_url: card.image_url
      },
      mint_price_ton: mintPrice,
      metadata_url: metadataUrl,
      message: '–ú–∏–Ω—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∫–æ—à–µ–ª—å–∫–µ.'
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –º–∏–Ω—Ç–∞ NFT:', error);
    return NextResponse.json(
      { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 401 }
    );
  }
}

/**
 * PUT /api/nft/mint
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∏–Ω—Ç–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
 */
export async function PUT(req: NextRequest) {
  try {
    const userId = await requireAuth(req);
    console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∏–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);

    const { mint_id, nft_address, transaction_hash, token_id } = await req.json();

    if (!mint_id || !nft_address || !transaction_hash) {
      return NextResponse.json(
        { success: false, message: 'mint_id, nft_address –∏ transaction_hash –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: mintCheck, error: mintError } = await supabase
      .from('_pidr_nft_mint_history')
      .select('id, user_id, card_id')
      .eq('id', mint_id)
      .eq('user_id', userId)
      .single();

    if (mintError || !mintCheck) {
      return NextResponse.json(
        { success: false, message: '–ú–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' },
        { status: 403 }
      );
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–∏–Ω—Ç —á–µ—Ä–µ–∑ SQL —Ñ—É–Ω–∫—Ü–∏—é
    const { data, error } = await supabase.rpc('confirm_nft_mint', {
      p_mint_id: mint_id,
      p_nft_address: nft_address,
      p_transaction_hash: transaction_hash,
      p_token_id: token_id || null
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∏–Ω—Ç–∞:', error);
      return NextResponse.json(
        { success: false, message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' },
        { status: 500 }
      );
    }

    if (!data.success) {
      return NextResponse.json(
        { success: false, message: data.message },
        { status: 400 }
      );
    }

    console.log(`‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω: ${nft_address}`);
    
    return NextResponse.json({
      success: true,
      message: 'NFT —É—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω!',
      nft_address,
      transaction_hash
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∏–Ω—Ç–∞:', error);
    return NextResponse.json(
      { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 401 }
    );
  }
}

