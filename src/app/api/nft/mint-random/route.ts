import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../../lib/supabase';
import { requireAuth } from '../../../../../lib/auth-utils';

/**
 * POST /api/nft/mint-random
 * –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è NFT –∫–∞—Ä—Ç—ã (0.5 TON –∫–æ–º–∏—Å—Å–∏—è)
 * –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: 2-10 = 95%, J-K = 4%, A = 1%
 */
export async function POST(req: NextRequest) {
  try {
    const userId = await requireAuth(req);
    console.log(`üé≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é NFT...`);

    const { wallet_address } = await req.json();

    if (!wallet_address) {
      return NextResponse.json(
        { success: false, message: 'wallet_address –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: walletCheck, error: walletError } = await supabase
      .from('_pidr_player_wallets')
      .select('id')
      .eq('user_id', userId)
      .eq('wallet_address', wallet_address)
      .single();

    if (walletError || !walletCheck) {
      return NextResponse.json(
        { success: false, message: '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –ë–î
    const { data: allCards, error: cardsError } = await supabase
      .from('_pidr_nft_cards')
      .select('*');

    if (cardsError || !allCards || allCards.length === 0) {
      return NextResponse.json(
        { success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç' },
        { status: 500 }
      );
    }

    // –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
    const randomValue = Math.random() * 100;
    let selectedCard;

    if (randomValue < 1) {
      // 1% - –¢—É–∑—ã (A)
      const aces = allCards.filter(c => c.card_rank === 'A');
      selectedCard = aces[Math.floor(Math.random() * aces.length)];
    } else if (randomValue < 5) {
      // 4% - –§–∏–≥—É—Ä—ã (J, Q, K)
      const figures = allCards.filter(c => ['J', 'Q', 'K'].includes(c.card_rank));
      selectedCard = figures[Math.floor(Math.random() * figures.length)];
    } else {
      // 95% - –û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã (2-10)
      const numbers = allCards.filter(c => !['J', 'Q', 'K', 'A'].includes(c.card_rank));
      selectedCard = numbers[Math.floor(Math.random() * numbers.length)];
    }

    if (!selectedCard) {
      return NextResponse.json(
        { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É' },
        { status: 500 }
      );
    }

    // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–∏–Ω—Ç
    const mintPrice = 0.5; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const commission = 0.5; // –í—Å—è —Å—É–º–º–∞ –∏–¥–µ—Ç –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–æ—à–µ–ª–µ–∫
    const masterWalletAddress = process.env.MASTER_TON_ADDRESS || '';

    const { data: mintHistory, error: mintError } = await supabase
      .from('_pidr_nft_mint_history')
      .insert({
        user_id: userId,
        card_id: selectedCard.card_id,
        wallet_address,
        nft_address: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –º–∏–Ω—Ç–∞
        mint_type: 'random',
        mint_price_ton: mintPrice,
        commission_paid_ton: commission,
        master_wallet_address: masterWalletAddress,
        transaction_hash: '',
        status: 'pending'
      })
      .select()
      .single();

    if (mintError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∏–Ω—Ç–∞:', mintError);
      return NextResponse.json(
        { success: false, message: '–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω—Ç–∞' },
        { status: 500 }
      );
    }

    console.log(`‚úÖ –†–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: ${selectedCard.card_name}`);
    
    return NextResponse.json({
      success: true,
      mint_id: mintHistory.id,
      card: {
        card_id: selectedCard.card_id,
        card_name: selectedCard.card_name,
        card_rank: selectedCard.card_rank,
        card_suit: selectedCard.card_suit,
        rarity: selectedCard.rarity,
        image_url: selectedCard.image_url
      },
      mint_price_ton: mintPrice,
      commission_ton: commission,
      master_wallet_address: masterWalletAddress,
      message: `–í—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞: ${selectedCard.card_name}! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.`
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API —Ä–∞–Ω–¥–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT:', error);
    return NextResponse.json(
      { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 401 }
    );
  }
}

