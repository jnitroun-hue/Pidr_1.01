/**
 * üé¥ API: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ NFT –∫–∞—Ä—Ç—ã –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–ª–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * POST /api/nft/add-to-deck
 * 
 * Body: {
 *   nftId: string,
 *   suit: string,
 *   rank: string,
 *   imageUrl: string
 * }
 */

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Supabase credentials missing:', { 
    hasUrl: !!supabaseUrl, 
    hasKey: !!supabaseServiceKey 
  });
}

const supabase = createClient(
  supabaseUrl || '',
  supabaseServiceKey || ''
);

export async function POST(request: NextRequest) {
  try {
    console.log('üé¥ [add-to-deck] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ NFT –≤ –∫–æ–ª–æ–¥—É');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    const { nftId, suit, rank, imageUrl } = body;

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ headers
    const telegramIdHeader = request.headers.get('x-telegram-id');
    
    if (!telegramIdHeader) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized: Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' },
        { status: 401 }
      );
    }

    const userId = parseInt(telegramIdHeader, 10);

    if (isNaN(userId)) {
      return NextResponse.json(
        { success: false, error: 'Invalid user ID' },
        { status: 400 }
      );
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
    console.log(`üé¥ NFT ID: ${nftId}, ${rank}${suit}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: nftCard, error: nftError } = await supabase
      .from('_pidr_nft_cards')
      .select('*')
      .eq('id', nftId)
      .eq('user_id', userId)
      .single();

    if (nftError || !nftCard) {
      console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', nftError);
      return NextResponse.json(
        { success: false, error: '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ _pidr_user_nft_deck
    const { data: existing, error: checkError } = await supabase
      .from('_pidr_user_nft_deck')
      .select('*')
      .eq('user_id', userId)
      .eq('suit', suit)
      .eq('rank', rank)
      .maybeSingle();

    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç—ã:', checkError);
    }

    if (existing) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const { error: updateError } = await supabase
        .from('_pidr_user_nft_deck')
        .update({
          nft_card_id: nftId,
          image_url: imageUrl,
          updated_at: new Date().toISOString()
        })
        .eq('id', existing.id);

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ:', updateError);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã' },
          { status: 500 }
        );
      }

      console.log('‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∏–≥—Ä–æ–≤–æ–π –∫–æ–ª–æ–¥–µ');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const { error: insertError } = await supabase
        .from('_pidr_user_nft_deck')
        .insert({
          user_id: userId,
          nft_card_id: nftId,
          suit,
          rank,
          image_url: imageUrl,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      if (insertError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥—É:', insertError);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã' },
          { status: 500 }
        );
      }

      console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–ª–æ–¥—É');
    }

    return NextResponse.json({
      success: true,
      message: '–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–ª–æ–¥—É'
    });

  } catch (error: any) {
    console.error('‚ùå [add-to-deck] –û—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

