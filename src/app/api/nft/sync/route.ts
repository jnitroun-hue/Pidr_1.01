import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import { requireAuth } from '../../../../lib/auth-utils';

/**
 * POST /api/nft/sync
 * ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è NFT –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –≤ Supabase
 * 
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¢–û–õ–¨–ö–û –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ UI
 * –ù–ï —Ö—Ä–∞–Ω–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–ª–∏ ownership (—Ç–æ–ª—å–∫–æ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ)
 */
export async function POST(request: NextRequest) {
  try {
    const authResult = await requireAuth(request);
    if (!authResult.authenticated || !authResult.userId) {
      return NextResponse.json(
        { error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { userAddress, nfts } = body;

    if (!userAddress || !Array.isArray(nfts)) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' },
        { status: 400 }
      );
    }

    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${nfts.length} NFT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${authResult.userId}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: walletError } = await supabase
      .from('_pidr_users')
      .update({
        ton_wallet_address: userAddress
      })
      .eq('id', authResult.userId);

    if (walletError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:', walletError);
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π NFT
    for (const nft of nfts) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞
        const { data: existingCard } = await supabase
          .from('_pidr_nft_cards')
          .select('id')
          .eq('blockchain_address', nft.address)
          .single();

        if (!existingCard) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
          const { data: newCard, error: cardError } = await supabase
            .from('_pidr_nft_cards')
            .insert({
              rank: nft.metadata.attributes.find((a: any) => a.trait_type === 'Rank')?.value || 'A',
              suit: nft.metadata.attributes.find((a: any) => a.trait_type === 'Suit')?.value || 'spades',
              rarity: nft.metadata.attributes.find((a: any) => a.trait_type === 'Rarity')?.value || 'common',
              image_url: nft.metadata.image,
              metadata_url: null,
              blockchain_address: nft.address,
              collection_address: nft.collectionAddress,
              token_index: nft.index
            })
            .select()
            .single();

          if (cardError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', cardError);
            continue;
          }

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–ª–∞–¥–µ–Ω–∏—è
          const { error: ownershipError } = await supabase
            .from('_pidr_nft_ownership')
            .insert({
              user_id: authResult.userId,
              card_id: newCard.id,
              mint_type: 'blockchain_sync',
              acquired_at: new Date().toISOString()
            });

          if (ownershipError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è:', ownershipError);
          }
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É
          const { error: updateError } = await supabase
            .from('_pidr_nft_cards')
            .update({
              image_url: nft.metadata.image,
              updated_at: new Date().toISOString()
            })
            .eq('blockchain_address', nft.address);

          if (updateError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', updateError);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ
          const { data: ownership } = await supabase
            .from('_pidr_nft_ownership')
            .select('id')
            .eq('card_id', existingCard.id)
            .eq('user_id', authResult.userId)
            .single();

          if (!ownership) {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–ª–∞–¥–µ–Ω–∏—è
            const { error: ownershipError } = await supabase
              .from('_pidr_nft_ownership')
              .insert({
                user_id: authResult.userId,
                card_id: existingCard.id,
                mint_type: 'blockchain_sync',
                acquired_at: new Date().toISOString()
              });

            if (ownershipError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è:', ownershipError);
            }
          }
        }

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ NFT:', error);
      }
    }

    console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    return NextResponse.json({
      success: true,
      message: 'NFT —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
      synced: nfts.length
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ NFT:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' },
      { status: 500 }
    );
  }
}

