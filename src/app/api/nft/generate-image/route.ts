import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

// GET /api/nft/generate-image - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ NFT –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(req: NextRequest) {
  try {
    const telegramIdHeader = req.headers.get('x-telegram-id');
    const usernameHeader = req.headers.get('x-username');

    if (!telegramIdHeader) {
      return NextResponse.json(
        { success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram' },
        { status: 401 }
      );
    }

    const userId = telegramIdHeader;
    const userIdBigInt = parseInt(userId, 10);

    console.log(`üì¶ –ü–æ–ª—É—á–∞–µ–º NFT –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${userIdBigInt})...`);

    const { data, error } = await supabase
      .from('_pidr_nft_cards')
      .select('*')
      .eq('user_id', userIdBigInt)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
      return NextResponse.json(
        { success: false, error: error.message },
        { status: 500 }
      );
    }

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∫–∞—Ä—Ç`);

    return NextResponse.json({
      success: true,
      cards: data
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

// POST /api/nft/generate-image - –°–æ–∑–¥–∞—Ç—å NFT –∫–∞—Ä—Ç—É —Å –≥–æ—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
export async function POST(req: NextRequest) {
  try {
    console.log('üé¥ [NFT Image] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã —Å –≥–æ—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');

    const telegramIdHeader = req.headers.get('x-telegram-id');
    const usernameHeader = req.headers.get('x-username');

    if (!telegramIdHeader) {
      return NextResponse.json(
        { success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram' },
        { status: 401 }
      );
    }

    const userId = telegramIdHeader;
    const userIdBigInt = parseInt(userId, 10);

    if (isNaN(userIdBigInt) || !userId) {
      console.error('‚ùå [NFT Image] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π userId:', { userId, userIdBigInt });
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 400 }
      );
    }

    console.log('‚úÖ [NFT Image] –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ headers:', {
      userId,
      userIdBigInt,
      username: usernameHeader
    });

    const body = await req.json();
    const { action, suit, rank, rankCost, suitCost, totalCost, imageData } = body;

    console.log('üé¥ [NFT Image] –î–∞–Ω–Ω—ã–µ:', {
      userId,
      action,
      suit,
      rank,
      rankCost,
      suitCost,
      totalCost
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData, error: userError } = await supabase
      .from('_pidr_users')
      .select('coins')
      .eq('telegram_id', userIdBigInt)
      .single();

    if (userError || !userData) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    if (userData.coins < totalCost) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' },
        { status: 400 }
      );
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
    const { error: deductError } = await supabase
      .from('_pidr_users')
      .update({ coins: userData.coins - totalCost })
      .eq('telegram_id', userIdBigInt);

    if (deductError) {
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç' },
        { status: 500 }
      );
    }

    console.log('‚úÖ [NFT Image] –ú–æ–Ω–µ—Ç—ã —Å–ø–∏—Å–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Storage...');

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ Buffer
    const base64Data = imageData.replace(/^data:image\/\w+;base64,/, '');
    const buffer = Buffer.from(base64Data, 'base64');

    const timestamp = Date.now();
    const fileName = `${userId}/${suit}_${rank}_${timestamp}.png`;
    const bucketName = 'nft-cards';

    console.log('üì§ [NFT Image] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage:', {
      bucketName,
      fileName,
      bufferSize: buffer.length
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
    const { data: uploadData, error: uploadError } = await supabase
      .storage
      .from(bucketName)
      .upload(fileName, buffer, {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: false
      });

    if (uploadError) {
      console.error('‚ùå [NFT Image] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', uploadError);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã
      await supabase
        .from('_pidr_users')
        .update({ coins: userData.coins })
        .eq('telegram_id', userIdBigInt);

      return NextResponse.json(
        { success: false, error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadError.message}` },
        { status: 500 }
      );
    }

    console.log('‚úÖ [NFT Image] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:', uploadData);

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: publicUrlData } = supabase
      .storage
      .from(bucketName)
      .getPublicUrl(fileName);

    const imageUrl = publicUrlData.publicUrl;

    console.log('‚úÖ [NFT Image] –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Storage:', imageUrl);
    console.log('üíæ [NFT Image] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –ë–î:', {
      userId,
      userIdBigInt,
      suit,
      rank,
      imageUrl,
      storagePath: fileName
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const { data: savedCard, error: saveError } = await supabase
      .from('_pidr_nft_cards')
      .insert([{
        user_id: userIdBigInt,
        card_suit: suit,
        card_rank: rank,
        image_url: imageUrl,
        storage_path: fileName,
        cost: totalCost,
        payment_method: 'coins',
        created_at: new Date().toISOString()
      }])
      .select()
      .single();

    if (saveError) {
      console.error('‚ùå [NFT Image] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', saveError);
      console.error('‚ùå [NFT Image] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        code: saveError.code,
        details: saveError.details,
        hint: saveError.hint,
        message: saveError.message
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      console.log('üí∞ [NFT Image] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ...');
      await supabase
        .from('_pidr_users')
        .update({ coins: userData.coins })
        .eq('telegram_id', userIdBigInt);

      console.log('üóëÔ∏è [NFT Image] –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage...');
      await supabase
        .storage
        .from(bucketName)
        .remove([fileName]);

      return NextResponse.json(
        { success: false, error: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${saveError.message}` },
        { status: 500 }
      );
    }

    console.log('‚úÖ [NFT Image] –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î!');

    const newBalance = userData.coins - totalCost;

    return NextResponse.json({
      success: true,
      card: savedCard,
      newBalance,
      imageUrl
    });

  } catch (error: any) {
    console.error('‚ùå [NFT Image] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

