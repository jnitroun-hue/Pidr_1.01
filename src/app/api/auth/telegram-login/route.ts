import { NextRequest, NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { createClient } from '@supabase/supabase-js';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const BOT_TOKEN = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN!; // –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±–µ–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏

export async function POST(request: NextRequest) {
  try {
    console.log('üîê [Telegram Login] –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

    const body = await request.json();
    const { id, first_name, last_name, username, photo_url, auth_date, hash } = body;

    // 1. –ü–†–û–í–ï–†–ö–ê –ü–û–î–õ–ò–ù–ù–û–°–¢–ò (hash verification)
    if (!BOT_TOKEN) {
      console.error('‚ùå [Telegram Login] BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return NextResponse.json(
        { success: false, error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º data-check-string (–≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ hash, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
    const dataCheckArr: string[] = [];
    if (auth_date) dataCheckArr.push(`auth_date=${auth_date}`);
    if (first_name) dataCheckArr.push(`first_name=${first_name}`);
    if (id) dataCheckArr.push(`id=${id}`);
    if (last_name) dataCheckArr.push(`last_name=${last_name}`);
    if (photo_url) dataCheckArr.push(`photo_url=${photo_url}`);
    if (username) dataCheckArr.push(`username=${username}`);
    
    const dataCheckString = dataCheckArr.sort().join('\n');
    console.log('üîë [Telegram Login] Data check string:', dataCheckString);

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: SHA256(bot_token)
    const secretKey = crypto
      .createHash('sha256')
      .update(BOT_TOKEN)
      .digest();

    // –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256
    const computedHash = crypto
      .createHmac('sha256', secretKey)
      .update(dataCheckString)
      .digest('hex');

    console.log('üîë [Telegram Login] Computed hash:', computedHash);
    console.log('üîë [Telegram Login] Received hash:', hash);

    if (computedHash !== hash) {
      console.error('‚ùå [Telegram Login] –ù–µ–≤–µ—Ä–Ω—ã–π hash! –í–æ–∑–º–æ–∂–Ω–∞—è –ø–æ–¥–¥–µ–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö.');
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö' },
        { status: 401 }
      );
    }

    console.log('‚úÖ [Telegram Login] Hash –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // 2. –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    const currentTime = Math.floor(Date.now() / 1000);
    const authTime = parseInt(auth_date);
    if (currentTime - authTime > 86400) {
      console.error('‚ùå [Telegram Login] –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏');
      return NextResponse.json(
        { success: false, error: '–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏' },
        { status: 401 }
      );
    }

    // 3. –°–û–ó–î–ê–ù–ò–ï/–û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î
    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

    const { data: existingUser, error: fetchError } = await supabase
      .from('_pidr_users')
      .select('*')
      .eq('telegram_id', id.toString())
      .single();

    let user;

    if (existingUser) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üë§ [Telegram Login] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
      
      const { data: updatedUser, error: updateError } = await supabase
        .from('_pidr_users')
        .update({
          username: username || existingUser.username,
          first_name: first_name || existingUser.first_name,
          last_name: last_name || existingUser.last_name,
          avatar_url: photo_url || existingUser.avatar_url,
          last_login: new Date().toISOString()
        })
        .eq('telegram_id', id.toString())
        .select()
        .single();

      if (updateError) {
        console.error('‚ùå [Telegram Login] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateError);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' },
          { status: 500 }
        );
      }

      user = updatedUser;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üë§ [Telegram Login] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å');

      const { data: newUser, error: insertError } = await supabase
        .from('_pidr_users')
        .insert({
          telegram_id: id.toString(),
          username: username || `user_${id}`,
          first_name: first_name || '',
          last_name: last_name || '',
          avatar_url: photo_url || '',
          coins: 1000, // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å
          rating: 1000,
          games_played: 0,
          wins: 0,
          losses: 0,
          last_login: new Date().toISOString(),
          created_at: new Date().toISOString()
        })
        .select()
        .single();

      if (insertError) {
        console.error('‚ùå [Telegram Login] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', insertError);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          { status: 500 }
        );
      }

      user = newUser;
      console.log('‚úÖ [Telegram Login] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å –±–æ–Ω—É—Å–æ–º 1000 –º–æ–Ω–µ—Ç!');
    }

    // 4. –°–û–ó–î–ê–ù–ò–ï –°–ï–°–°–ò–ò (HTTP-only cookie)
    const sessionData = {
      userId: user.id,
      telegramId: user.telegram_id,
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name,
      photoUrl: user.avatar_url
    };

    const sessionJson = JSON.stringify(sessionData);
    
    console.log('üç™ [Telegram Login] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies...');
    console.log('üç™ [Telegram Login] Session data:', sessionData);

    console.log('‚úÖ [Telegram Login] –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', user.username);

    const response = NextResponse.json({
      success: true,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      user: {
        id: user.id,
        username: user.username,
        firstName: user.first_name,
        coins: user.coins
      }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pidr_session cookie
    response.cookies.set('pidr_session', sessionJson, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'none' –Ω–∞ 'lax' –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      maxAge: 60 * 60 * 24 * 30,
      path: '/'
    });

    // –¢–ê–ö–ñ–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º auth_token (JWT) –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å /api/auth
    const JWT_SECRET = process.env.JWT_SECRET || process.env.SESSION_SECRET;
    if (JWT_SECRET) {
      const token = jwt.sign(
        { 
          userId: user.id,
          telegramId: user.telegram_id,
          username: user.username
        },
        JWT_SECRET,
        { expiresIn: '30d' }
      );

      response.cookies.set('auth_token', token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'none' –Ω–∞ 'lax' –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        maxAge: 60 * 60 * 24 * 30,
        path: '/'
      });

      console.log('‚úÖ [Telegram Login] Cookies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pidr_session + auth_token');
    } else {
      console.log('‚úÖ [Telegram Login] Cookie pidr_session —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }

    return response;

  } catch (error: any) {
    console.error('‚ùå [Telegram Login] –û—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

