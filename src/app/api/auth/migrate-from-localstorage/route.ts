import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';

export async function POST(req: NextRequest) {
  try {
    const { action, userData } = await req.json();
    
    if (action !== 'migrate_user_data' || !userData) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞'
      }, { status: 400 });
    }

    console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', userData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    let existingUser = null;
    
    if (userData.telegram_id) {
      const { data } = await supabase
        .from('_pidr_users')
        .select('*')
        .eq('telegram_id', userData.telegram_id)
        .single();
      
      existingUser = data;
    }

    if (existingUser) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –Ω–æ–≤–µ–µ
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
      
      const updateData: any = {};
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–∏—Ö (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
      if (userData.coins && userData.coins > (existingUser.coins || 0)) {
        updateData.coins = userData.coins;
      }
      if (userData.rating && userData.rating > (existingUser.rating || 0)) {
        updateData.rating = userData.rating;
      }
      if (userData.games_played && userData.games_played > (existingUser.games_played || 0)) {
        updateData.games_played = userData.games_played;
      }
      if (userData.games_won && userData.games_won > (existingUser.games_won || 0)) {
        updateData.games_won = userData.games_won;
      }

      if (Object.keys(updateData).length > 0) {
        updateData.updated_at = new Date().toISOString();
        
        const { error: updateError } = await supabase
          .from('_pidr_users')
          .update(updateData)
          .eq('id', existingUser.id);

        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateError);
          return NextResponse.json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          }, { status: 500 });
        }

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ localStorage');
      } else {
        console.log('‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –≤ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–µ–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      }

      return NextResponse.json({
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
        user: existingUser,
        updated: Object.keys(updateData).length > 0
      });

    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
      console.log('üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö localStorage...');
      
      const newUserData = {
        telegram_id: userData.telegram_id || null,
        username: userData.username || 'migrated_user',
        first_name: userData.first_name || null,
        last_name: userData.last_name || null,
        coins: userData.coins || 1000,
        rating: userData.rating || 0,
        games_played: userData.games_played || 0,
        games_won: userData.games_won || 0,
        status: 'online',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: newUser, error: createError } = await supabase
        .from('_pidr_users')
        .insert([newUserData])
        .select()
        .single();

      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
        return NextResponse.json({
          success: false,
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î'
        }, { status: 500 });
      }

      console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö localStorage');

      return NextResponse.json({
        success: true,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö localStorage',
        user: newUser,
        created: true
      });
    }

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ localStorage:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
    }, { status: 500 });
  }
}
