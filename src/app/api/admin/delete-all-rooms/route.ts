import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

// POST - —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–º–Ω–∞—Ç—ã (–û–ü–ê–°–ù–û!)
export async function POST(request: NextRequest) {
  try {
    console.log('üóëÔ∏è [POST /api/admin/delete-all-rooms] –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ö–û–ú–ù–ê–¢...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const body = await request.json();
    if (body.confirm !== 'DELETE_ALL_ROOMS') {
      return NextResponse.json({ 
        success: false, 
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: { "confirm": "DELETE_ALL_ROOMS" }' 
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const { data: roomsBefore, error: statsError } = await supabase
      .from('_pidr_rooms')
      .select('id, room_code, name, status, current_players');

    if (statsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + statsError.message 
      }, { status: 500 });
    }

    const totalRooms = roomsBefore?.length || 0;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${totalRooms} –∫–æ–º–Ω–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

    if (totalRooms === 0) {
      return NextResponse.json({
        success: true,
        message: '–ö–æ–º–Ω–∞—Ç—ã —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
        deletedRooms: 0,
        deletedPlayers: 0
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const { data: allPlayers } = await supabase
      .from('_pidr_room_players')
      .select('user_id');

    const playerCount = allPlayers?.length || 0;
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${playerCount} –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (allPlayers && allPlayers.length > 0) {
      const userIds = allPlayers.map(p => p.user_id);
      
      await supabase
        .from('_pidr_user_status')
        .update({ 
          current_room_id: null,
          status: 'online'
        })
        .in('user_id', userIds);
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç
    const { error: playersError } = await supabase
      .from('_pidr_room_players')
      .delete()
      .neq('id', 0); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏

    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: ' + playersError.message 
      }, { status: 500 });
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
    const { error: roomsError } = await supabase
      .from('_pidr_rooms')
      .delete()
      .neq('id', 0); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏

    if (roomsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', roomsError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç: ' + roomsError.message 
      }, { status: 500 });
    }

    console.log(`‚úÖ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–û: ${totalRooms} –∫–æ–º–Ω–∞—Ç, ${playerCount} –∏–≥—Ä–æ–∫–æ–≤`);

    return NextResponse.json({
      success: true,
      message: `üóëÔ∏è –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –í–°–ï –∫–æ–º–Ω–∞—Ç—ã –∏ –∏–≥—Ä–æ–∫–æ–≤`,
      deletedRooms: totalRooms,
      deletedPlayers: playerCount,
      roomsDeleted: roomsBefore?.map(r => ({
        room_code: r.room_code,
        name: r.name,
        status: r.status,
        players: r.current_players
      })) || []
    });

  } catch (error: any) {
    console.error('‚ùå Delete all rooms error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}

// GET - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–Ω–∞—Ç
export async function GET() {
  try {
    console.log('üìä [GET /api/admin/delete-all-rooms] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–Ω–∞—Ç...');

    const { data: rooms, error } = await supabase
      .from('_pidr_rooms')
      .select('id, room_code, name, status, current_players, max_players, created_at');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç: ' + error.message 
      }, { status: 500 });
    }

    const { data: players } = await supabase
      .from('_pidr_room_players')
      .select('id, user_id, room_id');

    const stats = {
      totalRooms: rooms?.length || 0,
      waitingRooms: rooms?.filter(r => r.status === 'waiting').length || 0,
      playingRooms: rooms?.filter(r => r.status === 'playing').length || 0,
      finishedRooms: rooms?.filter(r => r.status === 'finished').length || 0,
      totalPlayers: players?.length || 0
    };

    return NextResponse.json({
      success: true,
      stats,
      rooms: rooms || [],
      players: players || []
    });

  } catch (error: any) {
    console.error('‚ùå Get rooms stats error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}
