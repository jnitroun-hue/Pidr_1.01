import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';

// POST /api/admin/cleanup-zombies - –û—á–∏—Å—Ç–∫–∞ –∑–æ–º–±–∏-–æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–≤
export async function POST(req: NextRequest) {
  try {
    console.log('üßü –û—á–∏—Å—Ç–∫–∞ –∑–æ–º–±–∏-–æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–≤...');

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ offline –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
    
    const { data: zombieUsers, error: findError } = await supabase
      .from('_pidr_users')
      .select('id, username, last_seen')
      .eq('status', 'online')
      .lt('last_seen', tenMinutesAgo);

    if (findError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–æ–º–±–∏:', findError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–æ–º–±–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' 
      }, { status: 500 });
    }

    console.log(`üßü –ù–∞–π–¥–µ–Ω–æ –∑–æ–º–±–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${zombieUsers?.length || 0}`);

    if (zombieUsers && zombieUsers.length > 0) {
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏—Ö –≤ offline
      const { error: updateError } = await supabase
        .from('_pidr_users')
        .update({ status: 'offline' })
        .eq('status', 'online')
        .lt('last_seen', tenMinutesAgo);

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', updateError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤' 
        }, { status: 500 });
      }

      console.log(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ offline: ${zombieUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: stats } = await supabase
      .from('_pidr_users')
      .select('status')
      .then(({ data, error }: { data: any; error: any }) => {
        if (error) return { data: null };
        
        const statusCounts = data?.reduce((acc: any, user: any) => {
          acc[user.status] = (acc[user.status] || 0) + 1;
          return acc;
        }, {}) || {};
        
        return { data: statusCounts };
      });

    return NextResponse.json({
      success: true,
      message: `–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ offline: ${zombieUsers?.length || 0}`,
      zombiesCleared: zombieUsers?.length || 0,
      zombieUsers: zombieUsers?.map(u => ({
        id: u.id,
        username: u.username,
        lastSeen: u.last_seen,
        minutesAgo: Math.round((Date.now() - new Date(u.last_seen).getTime()) / 60000)
      })) || [],
      currentStats: stats || {}
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–æ–º–±–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}

// GET /api/admin/cleanup-zombies - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–æ–º–±–∏ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
export async function GET(req: NextRequest) {
  try {
    console.log('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–æ–º–±–∏-–æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–≤...');

    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
    
    const { data: zombieUsers, error } = await supabase
      .from('_pidr_users')
      .select('id, username, last_seen, status')
      .eq('status', 'online')
      .lt('last_seen', tenMinutesAgo);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–æ–º–±–∏:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–æ–º–±–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' 
      }, { status: 500 });
    }

    return NextResponse.json({
      success: true,
      zombieCount: zombieUsers?.length || 0,
      zombies: zombieUsers?.map(u => ({
        id: u.id,
        username: u.username,
        lastSeen: new Date(u.last_seen).toLocaleString('ru-RU', { 
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit', 
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        }),
        minutesAgo: Math.round((Date.now() - new Date(u.last_seen).getTime()) / 60000)
      })) || []
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–æ–º–±–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
