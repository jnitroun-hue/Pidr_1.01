import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

/**
 * POST /api/admin/pregenerate-cards
 * 
 * ‚úÖ –ü—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö NFT –∫–∞—Ä—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * 
 * –ó–∞—â–∏—Ç–∞: –¢—Ä–µ–±—É–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞—â–∏—Ç—ã
    const authHeader = request.headers.get('authorization');
    const adminSecret = process.env.ADMIN_SECRET || 'your-admin-secret';
    
    if (authHeader !== `Bearer ${adminSecret}`) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.log('üé® –ù–∞—á–∞–ª–æ –ø—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ä—Ç...');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    // –ö–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const CARDS_TO_GENERATE = [
      { rank: '2', suit: 'hearts', rarity: 'common' },
      { rank: 'K', suit: 'spades', rarity: 'rare' },
      { rank: 'A', suit: 'diamonds', rarity: 'legendary' }
    ];

    const results = [];

    for (const card of CARDS_TO_GENERATE) {
      try {
        console.log(`üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: ${card.rank} of ${card.suit} (${card.rarity})`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG –∫–∞—Ä—Ç—É
        const svg = generateCardSVG(card.rank, card.suit, card.rarity);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage
        const fileName = `${card.rank}.svg`;
        const storagePath = `base-cards/${card.suit}/${fileName}`;
        
        const { data, error } = await supabase.storage
          .from('nft-cards')
          .upload(storagePath, Buffer.from(svg), {
            contentType: 'image/svg+xml',
            upsert: true
          });

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${storagePath}:`, error.message);
          results.push({
            card: `${card.rank} of ${card.suit}`,
            status: 'error',
            error: error.message
          });
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        const { data: publicUrlData } = supabase.storage
          .from('nft-cards')
          .getPublicUrl(storagePath);

        console.log(`‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${publicUrlData.publicUrl}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { error: dbError } = await supabase
          .from('_pidr_nft_cards')
          .upsert({
            card_id: `${card.rank.toLowerCase()}_of_${card.suit}`,
            card_rank: card.rank,
            card_suit: card.suit,
            card_name: `${card.rank} of ${card.suit}`,
            rarity: card.rarity,
            image_url: publicUrlData.publicUrl,
            mint_price_ton: card.rarity === 'legendary' ? 3.0 : card.rarity === 'rare' ? 1.0 : 0.5,
            nft_contract_address: null
          }, {
            onConflict: 'card_id'
          });

        if (dbError) {
          console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:`, dbError.message);
        }

        results.push({
          card: `${card.rank} of ${card.suit}`,
          status: 'success',
          url: publicUrlData.publicUrl,
          rarity: card.rarity
        });

      } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã ${card.rank} of ${card.suit}:`, error.message);
        results.push({
          card: `${card.rank} of ${card.suit}`,
          status: 'error',
          error: error.message
        });
      }
    }

    console.log('‚úÖ –ü—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      results,
      total: CARDS_TO_GENERATE.length,
      successful: results.filter((r: any) => r.status === 'success').length,
      failed: results.filter((r: any) => r.status === 'error').length
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', details: error.message },
      { status: 500 }
    );
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
 */
function generateCardSVG(rank: string, suit: string, rarity: string): string {
  const suitSymbols: Record<string, string> = {
    hearts: '‚ô•',
    diamonds: '‚ô¶',
    clubs: '‚ô£',
    spades: '‚ô†'
  };

  const suitColors: Record<string, string> = {
    hearts: '#e53e3e',
    diamonds: '#e53e3e',
    clubs: '#1a202c',
    spades: '#1a202c'
  };

  const rarityColors: Record<string, string> = {
    common: '#9ca3af',
    uncommon: '#10b981',
    rare: '#3b82f6',
    mythic: '#a855f7',
    legendary: '#f59e0b'
  };

  const suitSymbol = suitSymbols[suit] || '?';
  const suitColor = suitColors[suit] || '#000';
  const rarityColor = rarityColors[rarity] || '#999';

  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="cardGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#ffffff;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#f7fafc;stop-opacity:1" />
    </linearGradient>
    <filter id="shadow">
      <feDropShadow dx="0" dy="4" stdDeviation="8" flood-opacity="0.3"/>
    </filter>
  </defs>
  
  <!-- –§–æ–Ω –∫–∞—Ä—Ç—ã -->
  <rect width="400" height="600" rx="20" fill="url(#cardGradient)" filter="url(#shadow)"/>
  
  <!-- –†–∞–º–∫–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ -->
  <rect x="8" y="8" width="384" height="584" rx="16" 
        fill="none" stroke="${rarityColor}" stroke-width="6"/>
  
  <!-- –í–µ—Ä—Ö–Ω–∏–π —Ä–∞–Ω–≥ -->
  <text x="40" y="80" font-family="Arial, sans-serif" font-size="64" 
        font-weight="bold" fill="${suitColor}">${rank}</text>
  <text x="40" y="150" font-family="Arial, sans-serif" font-size="72" 
        fill="${suitColor}">${suitSymbol}</text>
  
  <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –º–∞—Å—Ç–∏ -->
  <text x="200" y="350" font-family="Arial, sans-serif" font-size="180" 
        fill="${suitColor}" opacity="0.3" text-anchor="middle">${suitSymbol}</text>
  
  <!-- –ù–∏–∂–Ω–∏–π —Ä–∞–Ω–≥ (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π) -->
  <text x="360" y="550" font-family="Arial, sans-serif" font-size="64" 
        font-weight="bold" fill="${suitColor}" text-anchor="end" 
        transform="rotate(180 360 520)">${rank}</text>
  <text x="360" y="480" font-family="Arial, sans-serif" font-size="72" 
        fill="${suitColor}" text-anchor="end" 
        transform="rotate(180 360 455)">${suitSymbol}</text>
  
  <!-- –ú–µ—Ç–∫–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ -->
  <rect x="150" y="560" width="100" height="30" rx="15" fill="${rarityColor}" opacity="0.8"/>
  <text x="200" y="582" font-family="Arial, sans-serif" font-size="14" 
        fill="#ffffff" text-anchor="middle" font-weight="bold">${rarity.toUpperCase()}</text>
  
  <!-- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
  <circle cx="200" cy="50" r="5" fill="${rarityColor}" opacity="0.5"/>
  <circle cx="200" cy="550" r="5" fill="${rarityColor}" opacity="0.5"/>
</svg>`;
}

