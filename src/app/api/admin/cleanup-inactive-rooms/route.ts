import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

// GET - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
export async function GET() {
  try {
    console.log('üîç [GET /api/admin/cleanup-inactive-rooms] –ü–æ–∏—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç...');

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ 'waiting' —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
    const { data: inactiveRooms, error } = await supabase
      .from('_pidr_rooms')
      .select(`
        id, 
        room_code, 
        name, 
        status,
        current_players,
        max_players,
        created_at,
        host_id
      `)
      .eq('status', 'waiting')
      .lt('created_at', new Date(Date.now() - 10 * 60 * 1000).toISOString()); // 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: ' + error.message 
      }, { status: 500 });
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${inactiveRooms?.length || 0} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç`);

    return NextResponse.json({
      success: true,
      inactiveRooms: inactiveRooms || [],
      count: inactiveRooms?.length || 0
    });

  } catch (error: any) {
    console.error('‚ùå Cleanup inactive rooms GET error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}

// POST - —É–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
export async function POST() {
  try {
    console.log('üóëÔ∏è [POST /api/admin/cleanup-inactive-rooms] –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç...');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ 'waiting'
    const { data: waitingRooms, error: roomsError } = await supabase
      .from('_pidr_rooms')
      .select('id, room_code, name, created_at, current_players, host_id')
      .eq('status', 'waiting');

    if (roomsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', roomsError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç: ' + roomsError.message 
      }, { status: 500 });
    }

    if (!waitingRooms || waitingRooms.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –∫–æ–º–Ω–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ waiting');
      return NextResponse.json({
        success: true,
        message: '–ù–µ—Ç –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        deletedCount: 0
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤
    const hostIds = waitingRooms.map(r => r.host_id);
    const { data: hostStatuses } = await supabase
      .from('_pidr_user_status')
      .select('user_id, status, last_seen')
      .in('user_id', hostIds);

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—ã —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ö–æ—Å—Ç–∞–º–∏
    const fifteenMinutesAgo = new Date(Date.now() - 15 * 60 * 1000);
    const inactiveRooms = waitingRooms.filter(room => {
      const hostStatus = hostStatuses?.find(h => h.user_id === room.host_id);
      
      if (!hostStatus) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–∞ - —Å—á–∏—Ç–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
        console.log(`üîç –•–æ—Å—Ç ${room.host_id} –∫–æ–º–Ω–∞—Ç—ã ${room.room_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö`);
        return true;
      }
      
      const isOffline = hostStatus.status !== 'online';
      const lastSeenTooOld = hostStatus.last_seen && new Date(hostStatus.last_seen) < fifteenMinutesAgo;
      
      if (isOffline || lastSeenTooOld) {
        console.log(`üîç –•–æ—Å—Ç ${room.host_id} –∫–æ–º–Ω–∞—Ç—ã ${room.room_code} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: status=${hostStatus.status}, last_seen=${hostStatus.last_seen}`);
        return true;
      }
      
      return false;
    });

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${inactiveRooms.length} –∫–æ–º–Ω–∞—Ç —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ö–æ—Å—Ç–∞–º–∏ –∏–∑ ${waitingRooms.length} –æ–±—â–∏—Ö –∫–æ–º–Ω–∞—Ç`);

    if (!inactiveRooms || inactiveRooms.length === 0) {
      console.log('‚úÖ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return NextResponse.json({
        success: true,
        message: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        deletedCount: 0
      });
    }

    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${inactiveRooms.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:`, 
      inactiveRooms.map(r => `${r.room_code} (${r.name})`));

    const roomIds = inactiveRooms.map(r => r.id);

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —É–¥–∞–ª—è–µ–º—ã—Ö –∫–æ–º–Ω–∞—Ç
    const { data: playersToUpdate } = await supabase
      .from('_pidr_room_players')
      .select('user_id')
      .in('room_id', roomIds);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–±–∏—Ä–∞–µ–º –∏—Ö –∏–∑ –∫–æ–º–Ω–∞—Ç)
    if (playersToUpdate && playersToUpdate.length > 0) {
      const userIds = playersToUpdate.map(p => p.user_id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º _pidr_user_status –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await supabase
        .from('_pidr_user_status')
        .update({ 
          current_room_id: null,
          status: 'online'
        })
        .in('user_id', userIds);
    }

    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
    const { error: playersError } = await supabase
      .from('_pidr_room_players')
      .delete()
      .in('room_id', roomIds);

    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: ' + playersError.message 
      }, { status: 500 });
    }

    // –£–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∫–æ–º–Ω–∞—Ç—ã
    const { error: deleteRoomsError } = await supabase
      .from('_pidr_rooms')
      .delete()
      .in('id', roomIds);

    if (deleteRoomsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', deleteRoomsError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç: ' + deleteRoomsError.message 
      }, { status: 500 });
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${inactiveRooms.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç`);

    return NextResponse.json({
      success: true,
      message: `–£–¥–∞–ª–µ–Ω–æ ${inactiveRooms.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç`,
      deletedRooms: inactiveRooms.map(r => ({
        room_code: r.room_code,
        name: r.name,
        created_at: r.created_at
      })),
      deletedCount: inactiveRooms.length
    });

  } catch (error: any) {
    console.error('‚ùå Cleanup inactive rooms POST error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}
