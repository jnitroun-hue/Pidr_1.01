import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { requireAuth } from '@/lib/auth-utils';

// POST /api/admin/fix-multiplayer - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
export async function POST(req: NextRequest) {
  try {
    const auth = requireAuth(req);
    if (auth.error) {
      return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
    }

    const body = await req.json();
    const { action, roomCode } = body;

    console.log(`üîß [POST /api/admin/fix-multiplayer] –î–µ–π—Å—Ç–≤–∏–µ: ${action}, –ö–æ–º–Ω–∞—Ç–∞: ${roomCode}`);

    if (action === 'cleanup') {
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê
      const { data: result, error } = await supabase.rpc('auto_cleanup_multiplayer');
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ' + error.message 
        }, { status: 500 });
      }

      return NextResponse.json({
        success: true,
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        result
      });

    } else if (action === 'fix_room' && roomCode) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ô –ö–û–ú–ù–ê–¢–´
      const { data: result, error } = await supabase.rpc('fix_room_settings', {
        room_code_param: roomCode
      });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ' + error.message 
        }, { status: 500 });
      }

      return NextResponse.json({
        success: true,
        message: `–ö–æ–º–Ω–∞—Ç–∞ ${roomCode} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞`,
        result
      });

    } else if (action === 'protect_bots' && roomCode) {
      // –ó–ê–©–ò–¢–ê –ë–û–¢–û–í
      const { data: result, error } = await supabase.rpc('protect_bots_in_room', {
        room_code_param: roomCode
      });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞—â–∏—Ç—ã –±–æ—Ç–æ–≤:', error);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –∑–∞—â–∏—Ç—ã –±–æ—Ç–æ–≤: ' + error.message 
        }, { status: 500 });
      }

      return NextResponse.json({
        success: true,
        message: `–ë–æ—Ç—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomCode} –∑–∞—â–∏—â–µ–Ω—ã`,
        result
      });

    } else if (action === 'remove_duplicates') {
      // –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• –ò–ì–†–û–ö–û–í
      const { error: duplicatesError } = await supabase.rpc('sql', {
        query: `
          DELETE FROM _pidr_room_players 
          WHERE id NOT IN (
            SELECT DISTINCT ON (user_id) id 
            FROM _pidr_room_players 
            ORDER BY user_id, joined_at DESC
          )
        `
      });

      if (duplicatesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', duplicatesError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ' + duplicatesError.message 
        }, { status: 500 });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      const { error: updateError } = await supabase.rpc('sql', {
        query: `
          UPDATE _pidr_rooms 
          SET current_players = (
            SELECT COUNT(*) 
            FROM _pidr_room_players 
            WHERE room_id = _pidr_rooms.id
          )
        `
      });

      if (updateError) {
        console.error('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏:', updateError);
      }

      return NextResponse.json({
        success: true,
        message: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã'
      });

    } else {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' 
      }, { status: 400 });
    }

  } catch (error: any) {
    console.error('‚ùå Fix multiplayer error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}

// GET /api/admin/fix-multiplayer - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
export async function GET() {
  try {
    console.log('üîç [GET /api/admin/fix-multiplayer] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º...');

    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    const { data: problematicRooms, error: roomsError } = await supabase
      .from('_pidr_rooms')
      .select(`
        room_code,
        name,
        status,
        current_players,
        max_players,
        created_at,
        host_id,
        settings
      `)
      .eq('status', 'waiting');

    if (roomsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', roomsError);
    }

    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
    const { data: duplicates, error: duplicatesError } = await supabase.rpc('sql', {
      query: `
        SELECT 
          user_id,
          username,
          COUNT(*) as rooms_count,
          STRING_AGG(r.room_code, ', ') as room_codes
        FROM _pidr_room_players rp
        JOIN _pidr_rooms r ON rp.room_id = r.id
        GROUP BY user_id, username
        HAVING COUNT(*) > 1
        ORDER BY COUNT(*) DESC
      `
    });

    if (duplicatesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', duplicatesError);
    }

    return NextResponse.json({
      success: true,
      diagnostics: {
        problematicRooms: problematicRooms || [],
        duplicatedPlayers: duplicates || [],
        timestamp: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('‚ùå Diagnostics error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}
