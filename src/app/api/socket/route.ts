import { NextRequest, NextResponse } from 'next/server';
import { Server as SocketIOServer } from 'socket.io';
import { Server as HTTPServer } from 'http';

let io: SocketIOServer | null = null;

export async function GET(req: NextRequest) {
  if (!io) {
    // –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Socket.IO
    const httpServer = new HTTPServer();
    
    io = new SocketIOServer(httpServer, {
      cors: {
        origin: "*",
        methods: ["GET", "POST"]
      },
      path: '/api/socket'
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    io.on('connection', (socket) => {
      console.log('üîå [WebSocket] –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
      socket.on('join-room', (roomId: string, userId: string) => {
        console.log(`üö™ [WebSocket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        socket.join(roomId);
        socket.to(roomId).emit('player-joined', { userId, socketId: socket.id });
      });

      // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
      socket.on('leave-room', (roomId: string, userId: string) => {
        console.log(`üö™ [WebSocket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
        socket.leave(roomId);
        socket.to(roomId).emit('player-left', { userId, socketId: socket.id });
      });

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
      socket.on('game-state-update', (roomId: string, gameState: any) => {
        console.log(`üéÆ [WebSocket] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        socket.to(roomId).emit('game-state-sync', gameState);
      });

      // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
      socket.on('player-move', (roomId: string, moveData: any) => {
        console.log(`üéØ [WebSocket] –•–æ–¥ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, moveData);
        socket.to(roomId).emit('player-move-sync', moveData);
      });

      // –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤ –∏–≥—Ä—É
      socket.on('invite-friend', (data: { friendId: string, roomId: string, roomCode: string }) => {
        console.log(`üíå [WebSocket] –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ ${data.friendId} –≤ –∫–æ–º–Ω–∞—Ç—É ${data.roomId}`);
        io?.emit('friend-invitation', data);
      });

      // –ß–∞—Ç –≤ –∏–≥—Ä–µ
      socket.on('game-chat', (roomId: string, message: { userId: string, text: string, timestamp: number }) => {
        console.log(`üí¨ [WebSocket] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, message);
        socket.to(roomId).emit('game-chat-message', message);
      });

      // –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ (–≥–æ—Ç–æ–≤/–Ω–µ –≥–æ—Ç–æ–≤)
      socket.on('player-ready', (roomId: string, data: { userId: string, isReady: boolean }) => {
        console.log(`‚úÖ [WebSocket] –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ ${data.userId}: ${data.isReady}`);
        socket.to(roomId).emit('player-ready-sync', data);
      });

      // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
      socket.on('start-game', (roomId: string, gameSettings: any) => {
        console.log(`üöÄ [WebSocket] –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        io?.to(roomId).emit('game-started', gameSettings);
      });

      // –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
      socket.on('end-game', (roomId: string, results: any) => {
        console.log(`üèÅ [WebSocket] –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        io?.to(roomId).emit('game-ended', results);
      });

      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
      socket.on('disconnect', (reason) => {
        console.log('üîå [WebSocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id, reason);
      });
    });

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3001
    httpServer.listen(3001, () => {
      console.log('üîå [WebSocket] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
    });
  }

  return NextResponse.json({ 
    success: true, 
    message: 'WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω',
    port: 3001 
  });
}
