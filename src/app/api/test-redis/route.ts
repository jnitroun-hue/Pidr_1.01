import { NextRequest, NextResponse } from 'next/server';
import { Redis } from '@upstash/redis';

export async function GET(req: NextRequest) {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const redisUrl = process.env.UPSTASH_REDIS_REST_URL;
    const redisToken = process.env.UPSTASH_REDIS_REST_TOKEN;

    console.log('üìä Redis –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', {
      hasUrl: !!redisUrl,
      hasToken: !!redisToken,
      urlStart: redisUrl?.substring(0, 30),
      tokenStart: redisToken?.substring(0, 10)
    });

    if (!redisUrl || !redisToken) {
      return NextResponse.json({
        success: false,
        message: 'Redis –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        details: {
          UPSTASH_REDIS_REST_URL: !!redisUrl,
          UPSTASH_REDIS_REST_TOKEN: !!redisToken
        }
      }, { status: 400 });
    }

    // –°–æ–∑–¥–∞–µ–º Redis –∫–ª–∏–µ–Ω—Ç
    const redis = new Redis({
      url: redisUrl,
      token: redisToken,
    });

    console.log('üîó Redis –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const testKey = `test:${Date.now()}`;
    const testValue = 'Hello Redis!';

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await redis.set(testKey, testValue, { ex: 10 }); // –£–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Redis');

    // –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const result = await redis.get(testKey);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏–∑ Redis:', result);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis
    const info = await redis.ping();
    console.log('‚úÖ Redis ping:', info);

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await redis.del(testKey);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

    return NextResponse.json({
      success: true,
      message: 'Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
      details: {
        ping: info,
        testWrite: testValue,
        testRead: result,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Redis:', error);
    
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis',
      error: error.message,
      details: {
        name: error.name,
        cause: error.cause?.message || 'Unknown'
      }
    }, { status: 500 });
  }
}
