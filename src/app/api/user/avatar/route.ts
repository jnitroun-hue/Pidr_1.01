import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import { requireAuth } from '../../../../lib/auth-utils';

// POST /api/user/avatar - –û–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function POST(req: NextRequest) {
  console.log('üñºÔ∏è POST /api/user/avatar - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  const auth = requireAuth(req);
  if (auth.error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', auth.error);
    return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
  }
  
  const userId = auth.userId as string;
  
  try {
    const body = await req.json();
    const { avatar_url } = body;
    
    if (!avatar_url) {
      return NextResponse.json({ 
        success: false, 
        message: 'avatar_url –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      }, { status: 400 });
    }
    
    console.log(`üñºÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data: updatedUser, error: updateError } = await supabase
      .from('_pidr_users')
      .update({ 
        avatar_url: avatar_url,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId)
      .select()
      .single();
      
    if (updateError || !updatedUser) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', updateError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞' 
      }, { status: 500 });
    }
    
    console.log(`‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${updatedUser.username} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    
    return NextResponse.json({ 
      success: true,
      message: '–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: {
        avatar_url: updatedUser.avatar_url
      }
    });
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
    return NextResponse.json({ 
      success: false, 
      message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
    }, { status: 500 });
  }
}
