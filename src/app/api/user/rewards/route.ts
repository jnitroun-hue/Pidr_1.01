import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { requireAuth } from '@/lib/auth-utils';

// POST /api/user/rewards - –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∏–≥—Ä–æ–∫–∞ (–æ–ø—ã—Ç, –º–æ–Ω–µ—Ç—ã, —Ä–µ–π—Ç–∏–Ω–≥)
export async function POST(req: NextRequest) {
  try {
    const auth = requireAuth(req);
    if (auth.error) {
      return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
    }

    const userId = auth.userId as string;
    const { experience, coins, ratingChange } = await req.json();

    console.log(`üèÜ [POST /api/user/rewards] –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è ${userId}:`, {
      experience,
      coins,
      ratingChange
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: currentUser, error: fetchError } = await supabase
      .from('_pidr_users')
      .select('coins, experience, rating')
      .eq('id', userId)
      .single();

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', fetchError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      }, { status: 500 });
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const newCoins = (currentUser.coins || 0) + (coins || 0);
    const newExperience = (currentUser.experience || 0) + (experience || 0);
    const newRating = (currentUser.rating || 1000) + (ratingChange || 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase
      .from('_pidr_users')
      .update({
        coins: Math.max(0, newCoins), // –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        experience: Math.max(0, newExperience),
        rating: Math.max(0, newRating)
      })
      .eq('id', userId);

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', updateError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥: ' + updateError.message 
      }, { status: 500 });
    }

    console.log(`‚úÖ [POST /api/user/rewards] –ù–∞–≥—Ä–∞–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, {
      oldCoins: currentUser.coins,
      newCoins,
      oldExperience: currentUser.experience,
      newExperience,
      oldRating: currentUser.rating,
      newRating
    });

    return NextResponse.json({
      success: true,
      rewards: {
        coins: newCoins,
        experience: newExperience,
        rating: newRating
      }
    });

  } catch (error: any) {
    console.error('‚ùå User rewards POST error:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }, { status: 500 });
  }
}
