import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function POST(req: NextRequest) {
  try {
    // ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp headers
    const telegramIdHeader = req.headers.get('x-telegram-id');
    
    if (!telegramIdHeader) {
      console.error('‚ùå [Add Coins] –ù–µ –Ω–∞–π–¥–µ–Ω x-telegram-id header');
      return NextResponse.json(
        { success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }
    
    const userId = telegramIdHeader;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const body = await req.json();
    const { amount, updateStats, traceId } = body;
    
    // ‚úÖ –õ–û–ì–ò–†–£–ï–ú –° TRACE ID
    console.log(`üí∞üí∞üí∞ [${traceId || 'NO_TRACE'}] [Add Coins] –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    if (!amount || typeof amount !== 'number') {
      return NextResponse.json(
        { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞' },
        { status: 400 }
      );
    }
    
    console.log(`üí∞ [${traceId || 'NO_TRACE'}] [Add Coins] –î–æ–±–∞–≤–ª—è–µ–º ${amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    if (updateStats) {
      console.log(`üìä [${traceId || 'NO_TRACE'}] [Add Coins] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:`, JSON.stringify(updateStats, null, 2));
      console.log(`üìä [${traceId || 'NO_TRACE'}] [Add Coins] –î–ï–¢–ê–õ–ò –ó–ê–ü–†–û–°–ê:`, {
        gamesPlayed: updateStats.gamesPlayed,
        wins: updateStats.wins,
        losses: updateStats.losses,
        source: body.source || 'unknown',
        traceId: traceId
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    const { data: userData, error: fetchError } = await supabase
      .from('_pidr_users')
      .select('coins, games_played, wins, losses')
      .eq('telegram_id', userId)
      .single();
    
    if (fetchError) {
      console.error('‚ùå [Add Coins] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', fetchError);
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    
    const currentCoins = userData.coins || 0;
    const newBalance = currentCoins + amount;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = { coins: newBalance };
    
    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if (updateStats) {
      console.log(`üîç [${traceId || 'NO_TRACE'}] [Add Coins] –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò`);
      console.log(`üìä [${traceId || 'NO_TRACE'}] [Add Coins] –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î:`, {
        games_played: userData.games_played || 0,
        wins: userData.wins || 0,
        losses: userData.losses || 0
      });
      
      if (updateStats.gamesPlayed) {
        updateData.games_played = (userData.games_played || 0) + 1;
        console.log(`üìä [${traceId || 'NO_TRACE'}] –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${userData.games_played || 0} ‚Üí ${updateData.games_played}`);
      }
      if (updateStats.wins) {
        updateData.wins = (userData.wins || 0) + 1;
        console.log(`üèÜ [${traceId || 'NO_TRACE'}] –ü–æ–±–µ–¥: ${userData.wins || 0} ‚Üí ${updateData.wins}`);
      }
      if (updateStats.losses) {
        updateData.losses = (userData.losses || 0) + 1;
        console.log(`üíÄ [${traceId || 'NO_TRACE'}] –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${userData.losses || 0} ‚Üí ${updateData.losses}`);
      }
      
      console.log(`üìä [${traceId || 'NO_TRACE'}] [Add Coins] –ò–¢–û–ì–û–í–´–ï –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏:`, {
        games_played: updateData.games_played,
        wins: updateData.wins,
        losses: updateData.losses
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
    const { error: updateError } = await supabase
      .from('_pidr_users')
      .update(updateData)
      .eq('telegram_id', userId);
    
    if (updateError) {
      console.error('‚ùå [Add Coins] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' },
        { status: 500 }
      );
    }
    
    console.log(`‚úÖ‚úÖ‚úÖ [${traceId || 'NO_TRACE'}] [Add Coins] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: ${currentCoins} ‚Üí ${newBalance}`);
    if (updateStats) {
      console.log(`‚úÖ‚úÖ‚úÖ [${traceId || 'NO_TRACE'}] [Add Coins] –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ê –í –ë–î!`);
    }
    
    return NextResponse.json({
      success: true,
      newBalance,
      added: amount
    });
    
  } catch (error: any) {
    console.error('‚ùå [Add Coins] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    );
  }
}

