import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import { requireAuth } from '../../../../lib/auth-utils';

// GET /api/user/balance - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(req: NextRequest) {
  console.log('üí∞ GET /api/user/balance - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  const auth = requireAuth(req);
  if (auth.error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', auth.error);
    return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
  }
  
  const userId = auth.userId;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id, username, coins, rating, games_played, games_won, created_at')
      .eq('id', userId)
      .single();
      
    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return NextResponse.json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}: ${user.coins} –º–æ–Ω–µ—Ç`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    const { data: recentTransactions } = await supabase
      .from('_pidr_transactions')
      .select('id, type, amount, description, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(10);
    
    return NextResponse.json({ 
      success: true, 
      data: {
        balance: user.coins,
        user: {
          id: user.id,
          username: user.username,
          rating: user.rating,
          gamesPlayed: user.games_played,
          gamesWon: user.games_won,
          memberSince: user.created_at
        },
        recentTransactions: recentTransactions || []
      }
    });
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    return NextResponse.json({ 
      success: false, 
      message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
    }, { status: 500 });
  }
}

// POST /api/user/balance - –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
export async function POST(req: NextRequest) {
  console.log('üí∞ POST /api/user/balance - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  const auth = requireAuth(req);
  if (auth.error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', auth.error);
    return NextResponse.json({ success: false, message: auth.error }, { status: 401 });
  }
  
  const userId = auth.userId;
  
  try {
    const { amount, type, description } = await req.json();
    
    if (typeof amount !== 'number' || amount === 0) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞' 
      }, { status: 400 });
    }
    
    if (!type || !description) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ' 
      }, { status: 400 });
    }
    
    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${amount > 0 ? '+' : ''}${amount} (${type})`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: user, error: userError } = await supabase
      .from('_pidr_users')
      .select('id, username, coins')
      .eq('id', userId)
      .single();
      
    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return NextResponse.json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }
    
    const oldBalance = user.coins;
    const newBalance = oldBalance + amount;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —É—Ö–æ–¥–∏—Ç –≤ –º–∏–Ω—É—Å
    if (newBalance < 0) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' 
      }, { status: 400 });
    }
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å ${user.username}: ${oldBalance} ‚Üí ${newBalance}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error: updateError } = await supabase
      .from('_pidr_users')
      .update({ 
        coins: newBalance,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);
      
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' 
      }, { status: 500 });
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { error: transactionError } = await supabase
      .from('_pidr_transactions')
      .insert({
        user_id: userId,
        type: type,
        amount: amount,
        description: description,
        created_at: new Date().toISOString()
      });
      
    if (transactionError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
    
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${user.username}`);
    
    return NextResponse.json({ 
      success: true, 
      message: `${amount > 0 ? '–ù–∞—á–∏—Å–ª–µ–Ω–æ' : '–°–ø–∏—Å–∞–Ω–æ'} ${Math.abs(amount)} –º–æ–Ω–µ—Ç`,
      data: {
        oldBalance,
        newBalance,
        amount,
        type,
        description
      }
    });
    
  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    return NextResponse.json({ 
      success: false, 
      message: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
    }, { status: 500 });
  }
}
