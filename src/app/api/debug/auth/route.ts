import { NextRequest, NextResponse } from 'next/server';
import { getUserIdFromRequest } from '../../../../lib/auth-utils';

export async function GET(req: NextRequest) {
  console.log('üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const hasJwtSecret = !!process.env.JWT_SECRET;
    const hasSupabaseUrl = !!process.env.SUPABASE_URL;
    const hasSupabaseKey = !!process.env.SUPABASE_ANON_KEY;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
    const cookies = req.cookies.getAll();
    const authCookie = req.cookies.get('auth_token');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º headers
    const authHeader = req.headers.get('authorization');
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å userId
    const userId = getUserIdFromRequest(req);
    
    const debug = {
      environment: {
        hasJwtSecret,
        hasSupabaseUrl,
        hasSupabaseKey,
        nodeEnv: process.env.NODE_ENV
      },
      request: {
        cookies: cookies.map((c: any) => ({ name: c.name, hasValue: !!c.value })),
        authCookie: authCookie ? { hasValue: !!authCookie.value, length: authCookie.value?.length } : null,
        authHeader: authHeader ? { hasValue: true, type: authHeader.startsWith('Bearer ') ? 'Bearer' : 'Other' } : null,
        url: req.url,
        method: req.method
      },
      auth: {
        userId,
        isAuthenticated: !!userId
      }
    };
    
    console.log('üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', debug);
    
    return NextResponse.json({
      success: true,
      debug,
      message: userId ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return NextResponse.json({
      success: false,
      error: (error as Error).message
    }, { status: 500 });
  }
}
