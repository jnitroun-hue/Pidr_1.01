// üèÜ –°–ò–°–¢–ï–ú–ê –†–ï–ô–¢–ò–ù–ì–ê P.I.D.R.
// –†–∞—Å—á–µ—Ç –æ–ø—ã—Ç–∞ –∏ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤

export interface RatingReward {
  experience: number; // +/- –æ–ø—ã—Ç
  coins: number; // –º–æ–Ω–µ—Ç—ã (0 –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö)
  position: number; // –º–µ—Å—Ç–æ (1-9)
  isWinner: boolean; // –≤ —Ç–æ–ø–µ –∏–ª–∏ –Ω–µ—Ç
}

// –ë–∞–∑–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è 9 –∏–≥—Ä–æ–∫–æ–≤
const BASE_REWARDS_9_PLAYERS = {
  1: { experience: 25, coins: 50, isWinner: true },
  2: { experience: 15, coins: 40, isWinner: true },
  3: { experience: 10, coins: 25, isWinner: true },
  4: { experience: 5, coins: 15, isWinner: true },
  5: { experience: -5, coins: 0, isWinner: false },
  6: { experience: -10, coins: 0, isWinner: false },
  7: { experience: -15, coins: 0, isWinner: false },
  8: { experience: -20, coins: 0, isWinner: false },
  9: { experience: -30, coins: 0, isWinner: false }
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –º–µ—Å—Ç–∞ –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
 * @param position - –º–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞ (1 = –ª—É—á—à–∏–π)
 * @param totalPlayers - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (4-9)
 * @param isRanked - —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –∏–≥—Ä–∞ –∏–ª–∏ –Ω–µ—Ç
 */
export function calculateRatingRewards(
  position: number, 
  totalPlayers: number, 
  isRanked: boolean = true
): RatingReward {
  
  // –î–ª—è –Ω–µ—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏–≥—Ä –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ –¥–∞—é—Ç—Å—è
  if (!isRanked) {
    return {
      experience: 0,
      coins: 0,
      position,
      isWinner: position <= Math.ceil(totalPlayers / 2)
    };
  }

  // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
  const rewards = adaptRewardsForPlayerCount(totalPlayers);
  const reward = rewards[position] || { experience: -30, coins: 0, isWinner: false };

  return {
    experience: reward.experience,
    coins: reward.coins,
    position,
    isWinner: reward.isWinner
  };
}

/**
 * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥ –ø–æ–¥ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
 */
function adaptRewardsForPlayerCount(totalPlayers: number) {
  switch (totalPlayers) {
    case 4:
      // 4 –∏–≥—Ä–æ–∫–∞: 2 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, 2 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
      return {
        1: { experience: 20, coins: 40, isWinner: true },
        2: { experience: 10, coins: 25, isWinner: true },
        3: { experience: -10, coins: 0, isWinner: false },
        4: { experience: -20, coins: 0, isWinner: false }
      };
      
    case 5:
      // 5 –∏–≥—Ä–æ–∫–æ–≤: 2 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, 3 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
      return {
        1: { experience: 22, coins: 45, isWinner: true },
        2: { experience: 12, coins: 30, isWinner: true },
        3: { experience: -5, coins: 0, isWinner: false },
        4: { experience: -15, coins: 0, isWinner: false },
        5: { experience: -25, coins: 0, isWinner: false }
      };
      
    case 6:
      // 6 –∏–≥—Ä–æ–∫–æ–≤: 3 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, 3 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
      return {
        1: { experience: 23, coins: 47, isWinner: true },
        2: { experience: 13, coins: 35, isWinner: true },
        3: { experience: 8, coins: 20, isWinner: true },
        4: { experience: -8, coins: 0, isWinner: false },
        5: { experience: -18, coins: 0, isWinner: false },
        6: { experience: -28, coins: 0, isWinner: false }
      };
      
    case 7:
      // 7 –∏–≥—Ä–æ–∫–æ–≤: 3 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, 4 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
      return {
        1: { experience: 24, coins: 48, isWinner: true },
        2: { experience: 14, coins: 37, isWinner: true },
        3: { experience: 9, coins: 22, isWinner: true },
        4: { experience: -3, coins: 0, isWinner: false },
        5: { experience: -12, coins: 0, isWinner: false },
        6: { experience: -22, coins: 0, isWinner: false },
        7: { experience: -32, coins: 0, isWinner: false }
      };
      
    case 8:
      // 8 –∏–≥—Ä–æ–∫–æ–≤: 4 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, 4 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
      return {
        1: { experience: 25, coins: 49, isWinner: true },
        2: { experience: 15, coins: 38, isWinner: true },
        3: { experience: 10, coins: 24, isWinner: true },
        4: { experience: 3, coins: 12, isWinner: true },
        5: { experience: -7, coins: 0, isWinner: false },
        6: { experience: -17, coins: 0, isWinner: false },
        7: { experience: -27, coins: 0, isWinner: false },
        8: { experience: -37, coins: 0, isWinner: false }
      };
      
    case 9:
    default:
      // 9 –∏–≥—Ä–æ–∫–æ–≤: 4 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, 5 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö (–±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
      return BASE_REWARDS_9_PLAYERS;
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±—ã–≤–∞–Ω–∏—è
 * @param players - –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
 * @param eliminationOrder - –ø–æ—Ä—è–¥–æ–∫ –≤—ã–±—ã–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–π –≤—ã–±—ã–≤—à–∏–π = –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ)
 */
export function calculatePlayerPositions(
  players: any[], 
  eliminationOrder: string[]
): { [playerId: string]: number } {
  const positions: { [playerId: string]: number } = {};
  
  // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—ã–≤—à–∏–π = –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ
  eliminationOrder.forEach((playerId, index) => {
    positions[playerId] = players.length - index;
  });
  
  // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–≥—Ä–æ–∫–∏ (–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏) –ø–æ–ª—É—á–∞—é—Ç –º–µ—Å—Ç–∞ —Å 1-–≥–æ
  const remainingPlayers = players.filter(p => !eliminationOrder.includes(p.id));
  remainingPlayers.forEach((player, index) => {
    positions[player.id] = index + 1;
  });
  
  return positions;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
 */
export function getPositionText(position: number): string {
  switch (position) {
    case 1: return 'ü•á 1-–µ –º–µ—Å—Ç–æ';
    case 2: return 'ü•à 2-–µ –º–µ—Å—Ç–æ';
    case 3: return 'ü•â 3-–µ –º–µ—Å—Ç–æ';
    default: return `${position}-–µ –º–µ—Å—Ç–æ`;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
 */
export function getPositionColor(position: number): string {
  switch (position) {
    case 1: return '#ffd700'; // –ó–æ–ª–æ—Ç–æ
    case 2: return '#c0c0c0'; // –°–µ—Ä–µ–±—Ä–æ
    case 3: return '#cd7f32'; // –ë—Ä–æ–Ω–∑–∞
    default: return position <= 4 ? '#22c55e' : '#ef4444'; // –ó–µ–ª–µ–Ω—ã–π –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–π
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–æ–±–µ–¥–Ω–æ–π
 */
export function isWinningPosition(position: number, totalPlayers: number): boolean {
  const winnersCount = Math.ceil(totalPlayers / 2);
  return position <= winnersCount;
}
