/**
 * üé® CANVAS IMAGE GENERATOR
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –†–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
 */

export class CanvasImageGenerator {
  private canvas: HTMLCanvasElement;
  private ctx: CanvasRenderingContext2D;

  constructor() {
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d')!;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –ø–æ–º–æ—â—å—é Canvas
   */
  async generateCard(
    suit: 'hearts' | 'diamonds' | 'clubs' | 'spades',
    value: string,
    style: 'classic' | 'neon' | 'minimal' = 'classic'
  ): Promise<string> {
    this.canvas.width = 180;  // –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã
    this.canvas.height = 240;

    // –û—á–∏—â–∞–µ–º canvas
    this.ctx.clearRect(0, 0, 180, 240);

    // –§–æ–Ω –∫–∞—Ä—Ç—ã
    if (style === 'neon') {
      // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –¥–ª—è neon
      const gradient = this.ctx.createLinearGradient(0, 0, 180, 240);
      gradient.addColorStop(0, '#1a1a2e');
      gradient.addColorStop(1, '#16213e');
      this.ctx.fillStyle = gradient;
    } else {
      this.ctx.fillStyle = '#ffffff';
    }
    this.ctx.fillRect(0, 0, 180, 240);

    // –†–∞–º–∫–∞ –∫–∞—Ä—Ç—ã
    this.ctx.strokeStyle = style === 'neon' ? '#00ff88' : '#333333';
    this.ctx.lineWidth = style === 'neon' ? 3 : 2;
    
    // –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
    this.ctx.beginPath();
    this.ctx.roundRect(5, 5, 170, 230, 15);
    this.ctx.stroke();

    // –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—Ç–µ–π
    const suitColors = {
      hearts: style === 'neon' ? '#ff0080' : '#e74c3c',
      diamonds: style === 'neon' ? '#ff0080' : '#e74c3c', 
      clubs: style === 'neon' ? '#00ff88' : '#2c3e50',
      spades: style === 'neon' ? '#00ff88' : '#2c3e50'
    };

    const suitSymbols = {
      hearts: '‚ô•',
      diamonds: '‚ô¶',
      clubs: '‚ô£',
      spades: '‚ô†'
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è neon
    if (style === 'neon') {
      this.ctx.shadowColor = suitColors[suit];
      this.ctx.shadowBlur = 15;
      this.ctx.shadowOffsetX = 0;
      this.ctx.shadowOffsetY = 0;
    }

    // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —É–≥–ª–∞—Ö
    this.ctx.fillStyle = suitColors[suit];
    this.ctx.font = 'bold 24px serif';
    this.ctx.textAlign = 'left';
    
    // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
    this.ctx.fillText(value, 15, 35);
    this.ctx.font = 'bold 16px serif';
    this.ctx.fillText(suitSymbols[suit], 15, 55);
    
    // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ)
    this.ctx.save();
    this.ctx.translate(180, 240);
    this.ctx.rotate(Math.PI);
    this.ctx.font = 'bold 24px serif';
    this.ctx.fillText(value, 15, 35);
    this.ctx.font = 'bold 16px serif';
    this.ctx.fillText(suitSymbols[suit], 15, 55);
    this.ctx.restore();

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
    this.ctx.font = 'bold 80px serif';
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    
    if (style === 'neon') {
      // –£—Å–∏–ª–µ–Ω–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
      this.ctx.shadowBlur = 25;
    }
    
    this.ctx.fillText(suitSymbols[suit], 90, 120);

    // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.ctx.shadowBlur = 0;
    this.ctx.shadowColor = 'transparent';

    return this.canvas.toDataURL('image/png');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∏–≥—Ä–æ–∫–∞
   */
  async generateAvatar(
    name: string,
    color: string = '#3b82f6'
  ): Promise<string> {
    this.canvas.width = 256;
    this.canvas.height = 256;

    // –§–æ–Ω
    const gradient = this.ctx.createLinearGradient(0, 0, 256, 256);
    gradient.addColorStop(0, color);
    gradient.addColorStop(1, this.darkenColor(color, 0.3));
    
    this.ctx.fillStyle = gradient;
    this.ctx.fillRect(0, 0, 256, 256);

    // –ö—Ä—É–≥–ª–∞—è —Ä–∞–º–∫–∞
    this.ctx.beginPath();
    this.ctx.arc(128, 128, 120, 0, 2 * Math.PI);
    this.ctx.strokeStyle = '#ffffff';
    this.ctx.lineWidth = 4;
    this.ctx.stroke();

    // –ò–Ω–∏—Ü–∏–∞–ª—ã
    const initials = this.getInitials(name);
    this.ctx.fillStyle = '#ffffff';
    this.ctx.font = 'bold 64px sans-serif';
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    this.ctx.fillText(initials, 128, 128);

    return this.canvas.toDataURL('image/png');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
   */
  async generateQRCode(
    address: string,
    size: number = 256
  ): Promise<string> {
    this.canvas.width = size;
    this.canvas.height = size;

    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ QR –∫–æ–¥–∞
    this.ctx.fillStyle = '#000000';
    this.ctx.fillRect(0, 0, size, size);

    this.ctx.fillStyle = '#ffffff';
    this.ctx.font = '12px monospace';
    this.ctx.textAlign = 'center';
    this.ctx.fillText('QR Code', size/2, size/2);
    this.ctx.fillText(address.substring(0, 10) + '...', size/2, size/2 + 20);

    return this.canvas.toDataURL('image/png');
  }

  private getInitials(name: string): string {
    return name
      .split(' ')
      .map(word => word[0])
      .join('')
      .toUpperCase()
      .substring(0, 2);
  }

  private darkenColor(color: string, amount: number): string {
    const hex = color.replace('#', '');
    const r = Math.max(0, parseInt(hex.substr(0, 2), 16) * (1 - amount));
    const g = Math.max(0, parseInt(hex.substr(2, 2), 16) * (1 - amount));
    const b = Math.max(0, parseInt(hex.substr(4, 2), 16) * (1 - amount));
    
    return `rgb(${Math.floor(r)}, ${Math.floor(g)}, ${Math.floor(b)})`;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton
export const canvasImageGenerator = new CanvasImageGenerator();
