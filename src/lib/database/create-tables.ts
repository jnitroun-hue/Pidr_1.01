// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü P.I.D.R. –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
import { supabase } from '../supabase';

const SQL_SCHEMA = `
-- –ü–û–õ–ù–ê–Ø –°–•–ï–ú–ê –ë–î P.I.D.R. —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ _pidr_

-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
CREATE TABLE IF NOT EXISTS _pidr_users (
    id BIGSERIAL PRIMARY KEY,
    telegram_id VARCHAR(255) UNIQUE,
    username VARCHAR(255),
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    coins INTEGER DEFAULT 1000,
    rating INTEGER DEFAULT 0,
    games_played INTEGER DEFAULT 0,
    games_won INTEGER DEFAULT 0,
    avatar_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –ö–æ–º–Ω–∞—Ç—ã
CREATE TABLE IF NOT EXISTS _pidr_rooms (
    id BIGSERIAL PRIMARY KEY,
    room_code VARCHAR(10) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    host_id VARCHAR(255) NOT NULL,
    max_players INTEGER DEFAULT 4,
    current_players INTEGER DEFAULT 1,
    status VARCHAR(20) DEFAULT 'waiting',
    is_private BOOLEAN DEFAULT false,
    password VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö
CREATE TABLE IF NOT EXISTS _pidr_room_players (
    id BIGSERIAL PRIMARY KEY,
    room_id BIGINT REFERENCES _pidr_rooms(id) ON DELETE CASCADE,
    user_id VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL,
    is_host BOOLEAN DEFAULT false,
    is_ready BOOLEAN DEFAULT false,
    position INTEGER NOT NULL,
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–Ω–µ—Ç
CREATE TABLE IF NOT EXISTS _pidr_coin_transactions (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    amount INTEGER NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    description TEXT,
    balance_before INTEGER NOT NULL,
    balance_after INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- HD –ö–æ—à–µ–ª—å–∫–∏ (–ì–õ–ê–í–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê!)
CREATE TABLE IF NOT EXISTS _pidr_hd_wallets (
    id BIGSERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    coin VARCHAR(10) NOT NULL,
    address VARCHAR(255) NOT NULL,
    derivation_path VARCHAR(100) NOT NULL,
    address_index INTEGER NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS _pidr_user_status (
    id BIGSERIAL PRIMARY KEY,
    user_id VARCHAR(255) UNIQUE NOT NULL,
    status VARCHAR(20) DEFAULT 'online',
    current_room_id BIGINT,
    last_seen TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –ò–≥—Ä—ã
CREATE TABLE IF NOT EXISTS _pidr_games (
    id BIGSERIAL PRIMARY KEY,
    room_id BIGINT REFERENCES _pidr_rooms(id),
    status VARCHAR(20) DEFAULT 'active',
    winner_id VARCHAR(255),
    started_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    ended_at TIMESTAMP WITH TIME ZONE
);

-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä
CREATE TABLE IF NOT EXISTS _pidr_game_results (
    id BIGSERIAL PRIMARY KEY,
    game_id BIGINT REFERENCES _pidr_games(id) ON DELETE CASCADE,
    user_id VARCHAR(255) NOT NULL,
    position INTEGER NOT NULL,
    coins_won INTEGER DEFAULT 0,
    coins_lost INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –î—Ä—É–∑—å—è
CREATE TABLE IF NOT EXISTS _pidr_friends (
    id BIGSERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    friend_id VARCHAR(255) NOT NULL,
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
CREATE TABLE IF NOT EXISTS _pidr_achievements (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    icon VARCHAR(255),
    condition_type VARCHAR(50),
    condition_value INTEGER,
    reward_coins INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS _pidr_user_achievements (
    id BIGSERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    achievement_id BIGINT REFERENCES _pidr_achievements(id),
    unlocked_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS _pidr_user_settings (
    id BIGSERIAL PRIMARY KEY,
    user_id VARCHAR(255) UNIQUE NOT NULL,
    sound_enabled BOOLEAN DEFAULT true,
    notifications_enabled BOOLEAN DEFAULT true,
    theme VARCHAR(20) DEFAULT 'dark',
    language VARCHAR(10) DEFAULT 'ru',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
`;

const INDEXES_SQL = `
-- –ò–ù–î–ï–ö–°–´
CREATE UNIQUE INDEX IF NOT EXISTS idx_pidr_hd_user_coin 
ON _pidr_hd_wallets (user_id, coin);

CREATE UNIQUE INDEX IF NOT EXISTS idx_pidr_hd_address 
ON _pidr_hd_wallets (coin, address);

CREATE INDEX IF NOT EXISTS idx_pidr_users_telegram_id ON _pidr_users (telegram_id);
CREATE INDEX IF NOT EXISTS idx_pidr_rooms_code ON _pidr_rooms (room_code);
CREATE INDEX IF NOT EXISTS idx_pidr_rooms_status ON _pidr_rooms (status);
CREATE INDEX IF NOT EXISTS idx_pidr_room_players_room_id ON _pidr_room_players (room_id);
CREATE INDEX IF NOT EXISTS idx_pidr_room_players_user_id ON _pidr_room_players (user_id);
CREATE INDEX IF NOT EXISTS idx_pidr_hd_wallets_user_id ON _pidr_hd_wallets (user_id);
CREATE INDEX IF NOT EXISTS idx_pidr_coin_transactions_user_id ON _pidr_coin_transactions (user_id);
`;

const RLS_POLICIES_SQL = `
-- RLS –ü–û–õ–ò–¢–ò–ö–ò (–æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
ALTER TABLE _pidr_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_rooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_room_players ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_coin_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_hd_wallets ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_user_status ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_games ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_game_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_friends ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_user_achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE _pidr_user_settings ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_users' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_users FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_rooms' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_rooms FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_room_players' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_room_players FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_coin_transactions' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_coin_transactions FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_hd_wallets' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_hd_wallets FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_user_status' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_user_status FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_games' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_games FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_game_results' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_game_results FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_friends' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_friends FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_achievements' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_achievements FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_user_achievements' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_user_achievements FOR ALL USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = '_pidr_user_settings' AND policyname = 'Enable all for all users') THEN
        CREATE POLICY "Enable all for all users" ON _pidr_user_settings FOR ALL USING (true);
    END IF;
END
$$;
`;

export async function createPidrTables(): Promise<{ success: boolean; message: string; errors: any[] }> {
  console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü P.I.D.R...');
  
  const errors: any[] = [];
  let successCount = 0;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏–ª–∏ SUPABASE_ANON_KEY');
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
    try {
      const { error: schemaError } = await supabase.rpc('exec_sql', { 
        sql_query: SQL_SCHEMA 
      });

      if (schemaError) {
        console.warn('‚ö†Ô∏è RPC exec_sql –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±');
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –æ—Ç–¥–µ–ª—å–Ω–æ
        const tables = [
          '_pidr_users', '_pidr_rooms', '_pidr_room_players', 
          '_pidr_coin_transactions', '_pidr_hd_wallets', '_pidr_user_status',
          '_pidr_games', '_pidr_game_results', '_pidr_friends',
          '_pidr_achievements', '_pidr_user_achievements', '_pidr_user_settings'
        ];

        for (const tableName of tables) {
          try {
            const { data, error } = await supabase
              .from(tableName)
              .select('*', { count: 'exact', head: true });
            
            if (!error) {
              console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
              successCount++;
            } else if (error.code === '42P01') {
              console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é`);
              errors.push({ table: tableName, error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
            }
          } catch (err) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${tableName}:`, err);
            errors.push({ table: tableName, error: err });
          }
        }
      } else {
        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ RPC');
        successCount += 12;
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:', err);
      errors.push({ step: 'main_tables', error: err });
    }

    // 2. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üîç –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    try {
      const { error: indexError } = await supabase.rpc('exec_sql', { 
        sql_query: INDEXES_SQL 
      });

      if (indexError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ RPC:', indexError.message);
        errors.push({ step: 'indexes', error: indexError });
      } else {
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
        successCount += 1;
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', err);
      errors.push({ step: 'indexes', error: err });
    }

    // 3. –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ RLS
    console.log('üîí –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
    try {
      const { error: rlsError } = await supabase.rpc('exec_sql', { 
        sql_query: RLS_POLICIES_SQL 
      });

      if (rlsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ RPC:', rlsError.message);
        errors.push({ step: 'rls_policies', error: rlsError });
      } else {
        console.log('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        successCount += 1;
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫:', err);
      errors.push({ step: 'rls_policies', error: err });
    }

    const isSuccess = successCount > 10 && errors.length < 5;

    return {
      success: isSuccess,
      message: isSuccess 
        ? `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${successCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ë–î. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!`
        : `‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${successCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ï—Å—Ç—å ${errors.length} –æ—à–∏–±–æ–∫.`,
      errors
    };

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î:', error);
    return {
      success: false,
      message: `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`,
      errors: [{ step: 'critical', error }]
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ë–î
export async function checkDatabaseStatus() {
  const tables = [
    '_pidr_users', '_pidr_rooms', '_pidr_room_players', 
    '_pidr_coin_transactions', '_pidr_hd_wallets', '_pidr_user_status'
  ];

  const status: Record<string, boolean> = {};
  
  for (const tableName of tables) {
    try {
      const { error } = await supabase
        .from(tableName)
        .select('*', { count: 'exact', head: true });
      
      status[tableName] = !error;
    } catch {
      status[tableName] = false;
    }
  }

  return status;
}
