#!/usr/bin/env node

/**
 * üé® MCP BLENDER 3D SERVER
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3D –∞–Ω–∏–º–∞—Ü–∏–∏, —Ä–µ–Ω–¥–µ—Ä—ã –∏ 2D –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è P.I.D.R. –∏–≥—Ä—ã
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js';
import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Blender
const BLENDER_PATH = process.env.BLENDER_PATH || 'blender';
const OUTPUT_DIR = path.join(process.cwd(), 'public', 'generated', 'blender');

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

class BlenderServer {
  constructor() {
    this.server = new Server(
      {
        name: 'blender-3d',
        version: '0.1.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.server.onerror = (error) => console.error('[MCP Error]', error);
    process.on('SIGINT', async () => {
      await this.server.close();
      process.exit(0);
    });
  }

  setupToolHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        {
          name: 'generate_card_render',
          description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3D —Ä–µ–Ω–¥–µ—Ä –∏–≥—Ä–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã P.I.D.R.',
          inputSchema: {
            type: 'object',
            properties: {
              cardType: {
                type: 'string',
                enum: ['front', 'back', 'special'],
                description: '–¢–∏–ø –∫–∞—Ä—Ç—ã'
              },
              suit: {
                type: 'string',
                enum: ['hearts', 'diamonds', 'clubs', 'spades'],
                description: '–ú–∞—Å—Ç—å –∫–∞—Ä—Ç—ã'
              },
              rank: {
                type: 'string',
                description: '–†–∞–Ω–≥ –∫–∞—Ä—Ç—ã (2-10, J, Q, K, A)'
              },
              style: {
                type: 'string',
                enum: ['realistic', 'fantasy', 'neon', 'classic'],
                description: '–°—Ç–∏–ª—å —Ä–µ–Ω–¥–µ—Ä–∞'
              },
              quality: {
                type: 'string',
                enum: ['draft', 'preview', 'final'],
                description: '–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∞'
              }
            },
            required: ['cardType', 'style']
          }
        },
        {
          name: 'generate_table_animation',
          description: '–°–æ–∑–¥–∞–µ—Ç 3D –∞–Ω–∏–º–∞—Ü–∏—é –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞ P.I.D.R.',
          inputSchema: {
            type: 'object',
            properties: {
              animationType: {
                type: 'string',
                enum: ['card_deal', 'card_flip', 'victory_celebration', 'penalty_animation'],
                description: '–¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏'
              },
              playerCount: {
                type: 'number',
                minimum: 2,
                maximum: 9,
                description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤'
              },
              style: {
                type: 'string',
                enum: ['luxury', 'neon', 'medieval', 'space'],
                description: '–°—Ç–∏–ª—å —Å—Ç–æ–ª–∞'
              },
              duration: {
                type: 'number',
                default: 3.0,
                description: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö'
              }
            },
            required: ['animationType', 'playerCount']
          }
        },
        {
          name: 'generate_game_asset',
          description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 2D/3D –∞—Å—Å–µ—Ç—ã –¥–ª—è –∏–≥—Ä—ã',
          inputSchema: {
            type: 'object',
            properties: {
              assetType: {
                type: 'string',
                enum: ['coin', 'chip', 'avatar_frame', 'background', 'ui_element'],
                description: '–¢–∏–ø –∞—Å—Å–µ—Ç–∞'
              },
              renderMode: {
                type: 'string',
                enum: ['2D', '3D'],
                description: '–†–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∞'
              },
              style: {
                type: 'string',
                description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è'
              },
              dimensions: {
                type: 'object',
                properties: {
                  width: { type: 'number' },
                  height: { type: 'number' }
                }
              }
            },
            required: ['assetType', 'renderMode']
          }
        },
        {
          name: 'create_particle_effect',
          description: '–°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã —á–∞—Å—Ç–∏—Ü –¥–ª—è –∏–≥—Ä—ã',
          inputSchema: {
            type: 'object',
            properties: {
              effectType: {
                type: 'string',
                enum: ['win_fireworks', 'card_sparkle', 'coin_shower', 'magic_burst'],
                description: '–¢–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞'
              },
              color: {
                type: 'string',
                description: '–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞'
              },
              intensity: {
                type: 'string',
                enum: ['low', 'medium', 'high'],
                description: '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞'
              }
            },
            required: ['effectType']
          }
        }
      ],
    }));

    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      switch (request.params.name) {
        case 'generate_card_render':
          return this.generateCardRender(request.params.arguments);
        case 'generate_table_animation':
          return this.generateTableAnimation(request.params.arguments);
        case 'generate_game_asset':
          return this.generateGameAsset(request.params.arguments);
        case 'create_particle_effect':
          return this.createParticleEffect(request.params.arguments);
        default:
          throw new McpError(
            ErrorCode.MethodNotFound,
            `Unknown tool: ${request.params.name}`
          );
      }
    });
  }

  async generateCardRender(args) {
    const { cardType = 'front', suit, rank, style = 'realistic', quality = 'preview' } = args;
    
    const timestamp = Date.now();
    const filename = `card_${cardType}_${suit || 'back'}_${rank || 'generic'}_${timestamp}`;
    
    // Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è Blender
    const blenderScript = this.createCardRenderScript({
      cardType,
      suit,
      rank,
      style,
      quality,
      outputPath: path.join(OUTPUT_DIR, `${filename}.png`)
    });
    
    const scriptPath = path.join(OUTPUT_DIR, `${filename}_script.py`);
    fs.writeFileSync(scriptPath, blenderScript);
    
    try {
      await this.runBlender(scriptPath);
      
      return {
        content: [
          {
            type: 'text',
            text: `‚úÖ 3D —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!
            
üìÑ **–î–µ—Ç–∞–ª–∏:**
- –¢–∏–ø: ${cardType}
- –ú–∞—Å—Ç—å: ${suit || 'N/A'}
- –†–∞–Ω–≥: ${rank || 'N/A'}
- –°—Ç–∏–ª—å: ${style}
- –ö–∞—á–µ—Å—Ç–≤–æ: ${quality}

üìÅ **–§–∞–π–ª:** \`/public/generated/blender/${filename}.png\`

üé® **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∏–≥—Ä–µ:**
\`\`\`jsx
<img src="/generated/blender/${filename}.png" alt="3D Card" />
\`\`\``
          }
        ]
      };
    } catch (error) {
      throw new McpError(
        ErrorCode.InternalError,
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∞ –∫–∞—Ä—Ç—ã: ${error.message}`
      );
    }
  }

  async generateTableAnimation(args) {
    const { animationType, playerCount, style = 'luxury', duration = 3.0 } = args;
    
    const timestamp = Date.now();
    const filename = `table_${animationType}_${playerCount}p_${timestamp}`;
    
    const blenderScript = this.createTableAnimationScript({
      animationType,
      playerCount,
      style,
      duration,
      outputPath: path.join(OUTPUT_DIR, `${filename}.mp4`)
    });
    
    const scriptPath = path.join(OUTPUT_DIR, `${filename}_script.py`);
    fs.writeFileSync(scriptPath, blenderScript);
    
    try {
      await this.runBlender(scriptPath);
      
      return {
        content: [
          {
            type: 'text',
            text: `üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!
            
üìÑ **–î–µ—Ç–∞–ª–∏:**
- –¢–∏–ø: ${animationType}
- –ò–≥—Ä–æ–∫–æ–≤: ${playerCount}
- –°—Ç–∏–ª—å: ${style}
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}—Å

üìÅ **–§–∞–π–ª:** \`/public/generated/blender/${filename}.mp4\`

üéÆ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
\`\`\`jsx
<video autoPlay loop>
  <source src="/generated/blender/${filename}.mp4" type="video/mp4" />
</video>
\`\`\``
          }
        ]
      };
    } catch (error) {
      throw new McpError(
        ErrorCode.InternalError,
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏: ${error.message}`
      );
    }
  }

  async generateGameAsset(args) {
    const { assetType, renderMode, style, dimensions } = args;
    
    const timestamp = Date.now();
    const filename = `asset_${assetType}_${renderMode}_${timestamp}`;
    
    const blenderScript = this.createAssetScript({
      assetType,
      renderMode,
      style,
      dimensions,
      outputPath: path.join(OUTPUT_DIR, `${filename}.png`)
    });
    
    const scriptPath = path.join(OUTPUT_DIR, `${filename}_script.py`);
    fs.writeFileSync(scriptPath, blenderScript);
    
    try {
      await this.runBlender(scriptPath);
      
      return {
        content: [
          {
            type: 'text',
            text: `üé® –ò–≥—Ä–æ–≤–æ–π –∞—Å—Å–µ—Ç —Å–æ–∑–¥–∞–Ω!
            
üìÑ **–î–µ—Ç–∞–ª–∏:**
- –¢–∏–ø: ${assetType}
- –†–µ–∂–∏–º: ${renderMode}
- –°—Ç–∏–ª—å: ${style || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}

üìÅ **–§–∞–π–ª:** \`/public/generated/blender/${filename}.png\``
          }
        ]
      };
    } catch (error) {
      throw new McpError(
        ErrorCode.InternalError,
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å—Å–µ—Ç–∞: ${error.message}`
      );
    }
  }

  async createParticleEffect(args) {
    const { effectType, color = '#FFD700', intensity = 'medium' } = args;
    
    const timestamp = Date.now();
    const filename = `effect_${effectType}_${timestamp}`;
    
    const blenderScript = this.createParticleScript({
      effectType,
      color,
      intensity,
      outputPath: path.join(OUTPUT_DIR, `${filename}.mp4`)
    });
    
    const scriptPath = path.join(OUTPUT_DIR, `${filename}_script.py`);
    fs.writeFileSync(scriptPath, blenderScript);
    
    try {
      await this.runBlender(scriptPath);
      
      return {
        content: [
          {
            type: 'text',
            text: `‚ú® –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü —Å–æ–∑–¥–∞–Ω!
            
üìÑ **–î–µ—Ç–∞–ª–∏:**
- –¢–∏–ø: ${effectType}
- –¶–≤–µ—Ç: ${color}
- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${intensity}

üìÅ **–§–∞–π–ª:** \`/public/generated/blender/${filename}.mp4\``
          }
        ]
      };
    } catch (error) {
      throw new McpError(
        ErrorCode.InternalError,
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞: ${error.message}`
      );
    }
  }

  createCardRenderScript({ cardType, suit, rank, style, quality, outputPath }) {
    const renderSamples = quality === 'draft' ? 32 : quality === 'preview' ? 128 : 512;
    
    return `
import bpy
import bmesh
import os

# –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞
bpy.context.scene.render.engine = 'CYCLES'
bpy.context.scene.cycles.samples = ${renderSamples}
bpy.context.scene.render.resolution_x = 512
bpy.context.scene.render.resolution_y = 768
bpy.context.scene.render.filepath = "${outputPath.replace(/\\/g, '/')}"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
bpy.ops.mesh.primitive_cube_add(size=2)
card = bpy.context.active_object
card.name = "Card"

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã (–ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏–≥—Ä–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã)
card.scale = (0.7, 1.0, 0.02)

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫–∞—Ä—Ç—ã
mat = bpy.data.materials.new(name="CardMaterial")
mat.use_nodes = True
card.data.materials.append(mat)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è
bpy.ops.object.light_add(type='SUN', location=(2, 2, 5))
sun = bpy.context.active_object
sun.data.energy = 3

# –ö–∞–º–µ—Ä–∞
bpy.ops.object.camera_add(location=(0, -3, 1))
camera = bpy.context.active_object
bpy.context.scene.camera = camera

# –ü–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É
camera.rotation_euler = (1.1, 0, 0)

# –†–µ–Ω–¥–µ—Ä
bpy.ops.render.render(write_still=True)

print("‚úÖ –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω: ${outputPath}")
`;
  }

  createTableAnimationScript({ animationType, playerCount, style, duration, outputPath }) {
    return `
import bpy
import mathutils
import math

# –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
bpy.context.scene.frame_start = 1
bpy.context.scene.frame_end = ${Math.floor(duration * 24)}  # 24 FPS
bpy.context.scene.render.fps = 24

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–∞
bpy.ops.mesh.primitive_cylinder_add(radius=3, depth=0.1, location=(0, 0, 0))
table = bpy.context.active_object
table.name = "PokerTable"

# –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–æ–ª–∞
mat = bpy.data.materials.new(name="TableMaterial")
mat.use_nodes = True
mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (0.1, 0.5, 0.1, 1.0)  # –ó–µ–ª–µ–Ω—ã–π
table.data.materials.append(mat)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
for i in range(${playerCount}):
    angle = i * (2 * math.pi / ${playerCount})
    x = 2.5 * math.cos(angle)
    y = 2.5 * math.sin(angle)
    
    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(x, y, 0.2))
    player_marker = bpy.context.active_object
    player_marker.name = f"Player_{i+1}"

# –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç (–ø—Ä–∏–º–µ—Ä)
if "${animationType}" == "card_deal":
    for i in range(${playerCount}):
        angle = i * (2 * math.pi / ${playerCount})
        x = 2.5 * math.cos(angle)
        y = 2.5 * math.sin(angle)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.5))
        card = bpy.context.active_object
        card.name = f"Card_{i+1}"
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∫ –∏–≥—Ä–æ–∫—É
        card.keyframe_insert(data_path="location", frame=1)
        card.location = (x, y, 0.3)
        card.keyframe_insert(data_path="location", frame=12 + i*3)

# –û—Å–≤–µ—â–µ–Ω–∏–µ
bpy.ops.object.light_add(type='SUN', location=(0, 0, 10))

# –ö–∞–º–µ—Ä–∞
bpy.ops.object.camera_add(location=(0, -6, 4))
camera = bpy.context.active_object
bpy.context.scene.camera = camera
camera.rotation_euler = (1.0, 0, 0)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ —Ä–µ–Ω–¥–µ—Ä–∞
bpy.context.scene.render.image_settings.file_format = 'FFMPEG'
bpy.context.scene.render.ffmpeg.format = 'MPEG4'
bpy.context.scene.render.ffmpeg.codec = 'H264'
bpy.context.scene.render.filepath = "${outputPath.replace(/\\/g, '/')}"

# –†–µ–Ω–¥–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
bpy.ops.render.render(animation=True)

print("üé¨ –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–æ–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${outputPath}")
`;
  }

  createAssetScript({ assetType, renderMode, style, dimensions, outputPath }) {
    return `
import bpy

# –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
if "${assetType}" == "coin":
    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1)
    obj = bpy.context.active_object
    
    # –ó–æ–ª–æ—Ç–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
    mat = bpy.data.materials.new(name="GoldMaterial")
    mat.use_nodes = True
    mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (1.0, 0.8, 0.0, 1.0)
    mat.node_tree.nodes["Principled BSDF"].inputs[4].default_value = 1.0  # Metallic
    obj.data.materials.append(mat)

elif "${assetType}" == "chip":
    bpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.05)
    obj = bpy.context.active_object

elif "${assetType}" == "avatar_frame":
    bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1)
    obj = bpy.context.active_object

# –û—Å–≤–µ—â–µ–Ω–∏–µ –∏ –∫–∞–º–µ—Ä–∞
bpy.ops.object.light_add(type='SUN', location=(2, 2, 5))
bpy.ops.object.camera_add(location=(0, -3, 2))
camera = bpy.context.active_object
bpy.context.scene.camera = camera
camera.rotation_euler = (1.1, 0, 0)

# –†–µ–Ω–¥–µ—Ä
bpy.context.scene.render.filepath = "${outputPath.replace(/\\/g, '/')}"
bpy.ops.render.render(write_still=True)

print("üé® –ê—Å—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: ${outputPath}")
`;
  }

  createParticleScript({ effectType, color, intensity, outputPath }) {
    const particleCount = intensity === 'low' ? 100 : intensity === 'medium' ? 500 : 1000;
    
    return `
import bpy

# –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–∏—Ç—Ç–µ—Ä–∞ —á–∞—Å—Ç–∏—Ü
bpy.ops.mesh.primitive_plane_add(size=0.1, location=(0, 0, 0))
emitter = bpy.context.active_object

# –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—Ü
bpy.ops.object.particle_system_add()
psys = emitter.particle_systems[0]
psys.settings.count = ${particleCount}
psys.settings.frame_start = 1
psys.settings.frame_end = 60
psys.settings.lifetime = 60

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞
if "${effectType}" == "win_fireworks":
    psys.settings.physics_type = 'NEWTON'
    psys.settings.normal_factor = 5.0
    psys.settings.factor_random = 2.0

# –ê–Ω–∏–º–∞—Ü–∏—è 60 –∫–∞–¥—Ä–æ–≤
bpy.context.scene.frame_start = 1
bpy.context.scene.frame_end = 60

# –û—Å–≤–µ—â–µ–Ω–∏–µ –∏ –∫–∞–º–µ—Ä–∞
bpy.ops.object.light_add(type='SUN', location=(0, 0, 10))
bpy.ops.object.camera_add(location=(0, -5, 3))
camera = bpy.context.active_object
bpy.context.scene.camera = camera

# –†–µ–Ω–¥–µ—Ä –≤–∏–¥–µ–æ
bpy.context.scene.render.image_settings.file_format = 'FFMPEG'
bpy.context.scene.render.ffmpeg.format = 'MPEG4'
bpy.context.scene.render.filepath = "${outputPath.replace(/\\/g, '/')}"
bpy.ops.render.render(animation=True)

print("‚ú® –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü —Å–æ–∑–¥–∞–Ω: ${outputPath}")
`;
  }

  async runBlender(scriptPath) {
    return new Promise((resolve, reject) => {
      const blender = spawn(BLENDER_PATH, [
        '--background',
        '--python', scriptPath
      ]);

      let output = '';
      let error = '';

      blender.stdout.on('data', (data) => {
        output += data.toString();
      });

      blender.stderr.on('data', (data) => {
        error += data.toString();
      });

      blender.on('close', (code) => {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        fs.unlinkSync(scriptPath);
        
        if (code === 0) {
          resolve(output);
        } else {
          reject(new Error(`Blender –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}: ${error}`));
        }
      });
    });
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('üé® Blender 3D MCP Server –∑–∞–ø—É—â–µ–Ω');
  }
}

const server = new BlenderServer();
server.run().catch(console.error);
