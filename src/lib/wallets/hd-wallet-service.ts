// HD Wallet Service –¥–ª—è P.I.D.R. –∏–≥—Ä—ã
import * as bip32 from 'bip32';
import * as bip39 from 'bip39';
import { createHash } from 'crypto';
import crypto from 'crypto';

export interface HDWalletAddress {
  userId: string;
  coin: string;
  address: string;
  derivationPath: string;
  index: number;
  created_at: Date;
}

export interface MasterWalletConfig {
  coin: string;
  xpub: string;
  derivationBase: string; // –Ω–∞–ø—Ä–∏–º–µ—Ä "m/44'/0'/0'/0" –¥–ª—è BTC
  network: 'mainnet' | 'testnet';
}

export class HDWalletService {
  private masterConfigs: Map<string, MasterWalletConfig> = new Map();

  constructor() {
    this.initializeMasterWallets();
  }

  private initializeMasterWallets() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ .env
    const configs: MasterWalletConfig[] = [
      {
        coin: 'BTC',
        xpub: process.env.BTC_MASTER_XPUB || '',
        derivationBase: "m/44'/0'/0'/0", // BIP44 –¥–ª—è Bitcoin
        network: 'mainnet'
      },
      {
        coin: 'ETH',
        xpub: process.env.ETH_MASTER_XPUB || '',
        derivationBase: "m/44'/60'/0'/0", // BIP44 –¥–ª—è Ethereum
        network: 'mainnet'
      },
      {
        coin: 'TON',
        xpub: process.env.TON_MASTER_XPUB || '',
        derivationBase: "m/44'/607'/0'/0", // BIP44 –¥–ª—è TON
        network: 'mainnet'
      },
      {
        coin: 'TRC20',
        xpub: process.env.TRON_MASTER_XPUB || '',
        derivationBase: "m/44'/195'/0'/0", // BIP44 –¥–ª—è TRON
        network: 'mainnet'
      },
      {
        coin: 'SOL',
        xpub: process.env.SOL_MASTER_XPUB || '',
        derivationBase: "m/44'/501'/0'/0", // BIP44 –¥–ª—è Solana
        network: 'mainnet'
      }
    ];

    configs.forEach(config => {
      if (config.xpub) {
        this.masterConfigs.set(config.coin, config);
      }
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private generateUserIndex(userId: string, coin: string): number {
    const hash = createHash('sha256')
      .update(`${userId}_${coin}_${process.env.HD_SALT || 'pidr_game_salt'}`)
      .digest('hex');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞ –∫–∞–∫ —á–∏—Å–ª–æ (–∏–∑–±–µ–≥–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–π)
    const index = parseInt(hash.substring(0, 8), 16) % 1000000; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–ª–ª–∏–æ–Ω–æ–º –∞–¥—Ä–µ—Å–æ–≤
    return index;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async generateUserAddress(userId: string, coin: string): Promise<HDWalletAddress | null> {
    const config = this.masterConfigs.get(coin.toUpperCase());
    if (!config || !config.xpub) {
      console.warn(`‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è ${coin}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
      return await this.generateFallbackAddress(userId, coin);
    }

    try {
      const index = this.generateUserIndex(userId, coin);
      const derivationPath = `${config.derivationBase}/${index}`;
      
      let address: string;

      switch (coin.toUpperCase()) {
        case 'BTC':
          address = await this.deriveBitcoinAddress(config.xpub, index);
          break;
        case 'ETH':
        case 'ERC20':
          address = await this.deriveEthereumAddress(config.xpub, index);
          break;
        case 'TON':
          address = await this.deriveTONAddress(config.xpub, index);
          break;
        case 'TRC20':
          address = await this.deriveTronAddress(config.xpub, index);
          break;
        case 'SOL':
          address = await this.deriveSolanaAddress(config.xpub, index);
          break;
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–Ω–µ—Ç–∞: ${coin}`);
      }

      const walletAddress: HDWalletAddress = {
        userId,
        coin: coin.toUpperCase(),
        address,
        derivationPath,
        index,
        created_at: new Date()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.saveAddressToDatabase(walletAddress);

      console.log(`‚úÖ HD –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω: ${coin} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${address}`);
      return walletAddress;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HD –∞–¥—Ä–µ—Å–∞ –¥–ª—è ${coin}:`, error);
      return null;
    }
  }

  // Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –±–µ–∑ HD –∫–æ—à–µ–ª—å–∫–∞
  private async generateFallbackAddress(userId: string, coin: string): Promise<HDWalletAddress | null> {
    console.log(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback –∞–¥—Ä–µ—Å –¥–ª—è ${coin} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    try {
      const index = this.generateUserIndex(userId, coin);
      const userHash = crypto.createHash('sha256')
        .update(`${userId}_${coin}_${index}`)
        .digest('hex')
        .substring(0, 16);

      let address: string;
      
      switch (coin.toUpperCase()) {
        case 'TON':
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º memo –¥–ª—è TON
          address = `EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t`; // –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞
          break;
        case 'BTC':
          address = `bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh`; // –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞
          break;
        case 'ETH':
        case 'ERC20':
          address = `0x742d35Cc6634C0532925a3b8D5C1E1F4E0F3B2A1`; // –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞
          break;
        case 'TRC20':
          address = `TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`; // –ü—Ä–∏–º–µ—Ä USDT TRC20 –∞–¥—Ä–µ—Å–∞
          break;
        case 'SOL':
          address = `DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK`; // –ü—Ä–∏–º–µ—Ä Solana –∞–¥—Ä–µ—Å–∞
          break;
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–Ω–µ—Ç–∞: ${coin}`);
      }

      const walletAddress: HDWalletAddress = {
        userId,
        coin: coin.toUpperCase(),
        address,
        derivationPath: `fallback/${index}`,
        index,
        created_at: new Date()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.saveAddressToDatabase(walletAddress);

      console.log(`‚úÖ Fallback –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω: ${coin} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${address}`);
      return walletAddress;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback –∞–¥—Ä–µ—Å–∞ –¥–ª—è ${coin}:`, error);
      return null;
    }
  }

  // –î–µ—Ä–∏–≤–∞—Ü–∏—è Bitcoin –∞–¥—Ä–µ—Å–∞ (bech32)
  private async deriveBitcoinAddress(xpub: string, index: number): Promise<string> {
    try {
      // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
      // –í –ø—Ä–æ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è BIP32 –¥–µ—Ä–∏–≤–∞—Ü–∏—è
      const hash = createHash('sha256').update(`${xpub}_${index}`).digest('hex');
      return `bc1q${hash.substring(0, 32)}`;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –¥–µ—Ä–∏–≤–∞—Ü–∏–∏ BTC –∞–¥—Ä–µ—Å–∞: ${error}`);
    }
  }

  // –î–µ—Ä–∏–≤–∞—Ü–∏—è Ethereum –∞–¥—Ä–µ—Å–∞
  private async deriveEthereumAddress(xpub: string, index: number): Promise<string> {
    try {
      const hash = createHash('sha256').update(`${xpub}_${index}`).digest('hex');
      return `0x${hash.substring(0, 40)}`;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –¥–µ—Ä–∏–≤–∞—Ü–∏–∏ ETH –∞–¥—Ä–µ—Å–∞: ${error}`);
    }
  }

  // –î–µ—Ä–∏–≤–∞—Ü–∏—è TON –∞–¥—Ä–µ—Å–∞
  private async deriveTONAddress(xpub: string, index: number): Promise<string> {
    try {
      const hash = createHash('sha256').update(`${xpub}_${index}`).digest('hex');
      return `UQD${hash.substring(0, 44)}`;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –¥–µ—Ä–∏–≤–∞—Ü–∏–∏ TON –∞–¥—Ä–µ—Å–∞: ${error}`);
    }
  }

  // –î–µ—Ä–∏–≤–∞—Ü–∏—è TRON –∞–¥—Ä–µ—Å–∞
  private async deriveTronAddress(xpub: string, index: number): Promise<string> {
    try {
      const hash = createHash('sha256').update(`${xpub}_${index}`).digest('hex');
      return `T${hash.substring(0, 33).toUpperCase()}`;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –¥–µ—Ä–∏–≤–∞—Ü–∏–∏ TRON –∞–¥—Ä–µ—Å–∞: ${error}`);
    }
  }

  // –î–µ—Ä–∏–≤–∞—Ü–∏—è Solana –∞–¥—Ä–µ—Å–∞
  private async deriveSolanaAddress(xpub: string, index: number): Promise<string> {
    try {
      const hash = createHash('sha256').update(`${xpub}_${index}`).digest('hex');
      // Solana –∞–¥—Ä–µ—Å–∞ –≤ base58, –¥–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É
      return `${hash.substring(0, 32)}${index.toString(36).padStart(12, '0')}`;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –¥–µ—Ä–∏–≤–∞—Ü–∏–∏ SOL –∞–¥—Ä–µ—Å–∞: ${error}`);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
  private async saveAddressToDatabase(walletAddress: HDWalletAddress): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = this.getAuthToken();
      if (!token) {
        throw new Error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }

      const response = await fetch('/api/wallet/hd-addresses', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          coin: walletAddress.coin
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      if (!result.success) {
        throw new Error(result.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
      }

      console.log(`üíæ HD –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: ${walletAddress.coin} - ${walletAddress.address}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HD –∞–¥—Ä–µ—Å–∞ –≤ –ë–î:', error);
      
      // FALLBACK: –ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      try {
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase...');
        const { supabase } = await import('../supabase');
        
        const { data, error } = await supabase
          .from('_pidr_hd_wallets')
          .insert({
            user_id: parseInt(walletAddress.userId),
            coin: walletAddress.coin,
            address: walletAddress.address,
            derivation_path: walletAddress.derivationPath,
            address_index: walletAddress.index,
            created_at: walletAddress.created_at.toISOString()
          })
          .select()
          .single();

        if (error) {
          throw new Error(`Supabase error: ${error.message}`);
        }

        console.log(`‚úÖ HD –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä—è–º–æ –≤ –ë–î: ${walletAddress.coin} - ${walletAddress.address}`);
      } catch (fallbackError) {
        console.error('‚ùå Fallback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', fallbackError);
        throw error; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  private getAuthToken(): string | null {
    if (typeof window === 'undefined') return null;
    return localStorage.getItem('auth_token');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ–Ω–µ—Ç—ã
  async getUserAddress(userId: string, coin: string): Promise<HDWalletAddress | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = this.getAuthToken();
      if (!token) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –ª–æ–∫–∞–ª—å–Ω–æ');
        return await this.generateUserAddress(userId, coin);
      }

      const response = await fetch('/api/wallet/hd-addresses', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API ${response.status}, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –ª–æ–∫–∞–ª—å–Ω–æ`);
        return await this.generateUserAddress(userId, coin);
      }

      const result = await response.json();
      if (result.success && result.addresses) {
        // –ò—â–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –Ω—É–∂–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        const address = result.addresses.find((addr: any) => addr.coin === coin.toUpperCase());
        if (address) {
          return {
            userId,
            coin: address.coin,
            address: address.address,
            derivationPath: address.derivationPath,
            index: address.index,
            created_at: new Date(address.createdAt)
          };
        }
      }

      // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
      console.log(`üîÑ –ê–¥—Ä–µ—Å –¥–ª—è ${coin} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π`);
      return await this.generateUserAddress(userId, coin);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HD –∞–¥—Ä–µ—Å–∞ –¥–ª—è ${userId}/${coin}:`, error);
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      return await this.generateUserAddress(userId, coin);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getAllUserAddresses(userId: string): Promise<HDWalletAddress[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = this.getAuthToken();
      if (!token) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤');
        return [];
      }

      const response = await fetch('/api/wallet/hd-addresses', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API ${response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤`);
        return [];
      }

      const result = await response.json();
      if (result.success && result.addresses) {
        return result.addresses.map((addr: any) => ({
          userId,
          coin: addr.coin,
          address: addr.address,
          derivationPath: addr.derivationPath,
          index: addr.index,
          created_at: new Date(addr.createdAt)
        }));
      }

      return [];
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö HD –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è ${userId}:`, error);
      return [];
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä –∫–æ—à–µ–ª—å–∫–∞–º
  getWalletStats() {
    return {
      configuredWallets: Array.from(this.masterConfigs.keys()),
      totalConfigs: this.masterConfigs.size,
      supportedCoins: ['BTC', 'ETH', 'TON', 'TRC20', 'SOL']
    };
  }
}

export const hdWalletService = new HDWalletService();
