/**
 * ============================================================
 * TON PAYMENT SERVICE - TONCENTER API
 * ============================================================
 * –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–µ–º–∞ TON –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ TonCenter API
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ MEMO –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

import { getSupabaseAdmin } from '../supabase';

interface TonTransaction {
  hash: string;
  from: string;
  to: string;
  value: string; // –≤ nanoton
  comment?: string; // memo
  timestamp: number;
}

export class TonPaymentService {
  private apiKey: string;
  private masterAddress: string;
  private apiEndpoint = 'https://toncenter.com/api/v2';

  constructor() {
    this.apiKey = process.env.TONCENTER_API_KEY || '';
    this.masterAddress = process.env.MASTER_TON_ADDRESS || '';
    
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è TONCENTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    if (!this.masterAddress) {
      console.warn('‚ö†Ô∏è MASTER_TON_ADDRESS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∞–¥—Ä–µ—Å
   */
  async getRecentTransactions(limit: number = 100): Promise<TonTransaction[]> {
    try {
      const url = `${this.apiEndpoint}/getTransactions?address=${this.masterAddress}&limit=${limit}&api_key=${this.apiKey}`;
      
      console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`TonCenter API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.ok || !data.result) {
        throw new Error('Invalid TonCenter response');
      }

      // –ü–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transactions: TonTransaction[] = [];
      
      for (const tx of data.result) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        if (tx.in_msg && tx.in_msg.value && tx.in_msg.value !== '0') {
          transactions.push({
            hash: tx.transaction_id.hash,
            from: tx.in_msg.source || 'unknown',
            to: tx.in_msg.destination || this.masterAddress,
            value: tx.in_msg.value,
            comment: tx.in_msg.message || undefined,
            timestamp: parseInt(tx.utime) * 1000 // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
          });
        }
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} –≤—Ö–æ–¥—è—â–∏—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      return transactions;
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å nanoton –≤ TON
   */
  private nanotonToTon(nanoton: string): number {
    return parseInt(nanoton) / 1_000_000_000;
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ MEMO
   */
  private async findUserByMemo(memo: string): Promise<string | null> {
    try {
      const supabase = getSupabaseAdmin();
      
      // –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ payment_addresses –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è memo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data, error } = await supabase
        .from('_pidr_payment_addresses')
        .select('user_id')
        .eq('memo', memo)
        .eq('coin', 'TON')
        .single();

      if (error || !data) {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å memo ${memo} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è memo ${memo}: ${data.user_id}`);
      return data.user_id;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ memo:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ã–ª–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
   */
  private async isTransactionProcessed(txHash: string): Promise<boolean> {
    try {
      const supabase = getSupabaseAdmin();
      
      const { data, error } = await supabase
        .from('_pidr_transactions')
        .select('id')
        .eq('tx_hash', txHash)
        .single();

      return !!data && !error;
      
    } catch (error) {
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î –∏ –∑–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã
   */
  private async processPayment(tx: TonTransaction, userId: string, tonAmount: number, coinsAmount: number): Promise<boolean> {
    try {
      const supabase = getSupabaseAdmin();

      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { error: txError } = await supabase
        .from('_pidr_transactions')
        .insert({
          user_id: userId,
          type: 'deposit',
          amount: coinsAmount,
          coin: 'TON',
          coin_amount: tonAmount,
          tx_hash: tx.hash,
          from_address: tx.from,
          to_address: tx.to,
          memo: tx.comment || '',
          status: 'completed',
          created_at: new Date(tx.timestamp).toISOString()
        });

      if (txError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txError);
        return false;
      }

      // 2. –ó–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const { error: updateError } = await supabase.rpc('increment_user_balance', {
        p_user_id: userId,
        p_amount: coinsAmount
      });

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç:', updateError);
        return false;
      }

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞—á–∏—Å–ª–µ–Ω–æ ${coinsAmount} –º–æ–Ω–µ—Ç (${tonAmount} TON)`);
      
      return true;
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      return false;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TON –≤ –∏–≥—Ä–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã (1 TON = 1000 –º–æ–Ω–µ—Ç)
   */
  private tonToCoins(tonAmount: number): number {
    return Math.floor(tonAmount * 1000); // 1 TON = 1000 –º–æ–Ω–µ—Ç
  }

  /**
   * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏
   */
  async checkAndProcessPayments(): Promise<{
    success: boolean;
    processed: number;
    newPayments: Array<{
      userId: string;
      amount: number;
      tonAmount: number;
      txHash: string;
    }>;
  }> {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö TON –ø–ª–∞—Ç–µ–∂–µ–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactions = await this.getRecentTransactions(100);
      
      if (transactions.length === 0) {
        console.log('‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return { success: true, processed: 0, newPayments: [] };
      }

      const newPayments = [];
      let processedCount = 0;

      for (const tx of transactions) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        const alreadyProcessed = await this.isTransactionProcessed(tx.hash);
        if (alreadyProcessed) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ MEMO (comment)
        if (!tx.comment) {
          console.log(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.hash} –±–µ–∑ MEMO - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ MEMO
        const userId = await this.findUserByMemo(tx.comment);
        if (!userId) {
          console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è memo ${tx.comment} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
        const tonAmount = this.nanotonToTon(tx.value);
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 0.1 TON
        if (tonAmount < 0.1) {
          console.log(`‚ö†Ô∏è –°—É–º–º–∞ ${tonAmount} TON –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π (0.1 TON)`);
          continue;
        }

        const coinsAmount = this.tonToCoins(tonAmount);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        const processed = await this.processPayment(tx, userId, tonAmount, coinsAmount);
        
        if (processed) {
          processedCount++;
          newPayments.push({
            userId,
            amount: coinsAmount,
            tonAmount,
            txHash: tx.hash
          });
        }
      }

      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);
      
      return {
        success: true,
        processed: processedCount,
        newPayments
      };
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
      return {
        success: false,
        processed: 0,
        newPayments: []
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ (–∞–¥—Ä–µ—Å + memo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   */
  async getPaymentInfo(userId: string): Promise<{
    address: string;
    memo: string;
    amount_ton: number;
    amount_coins: number;
    qr_url?: string;
  }> {
    try {
      const supabase = getSupabaseAdmin();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ memo –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let { data: existingAddress } = await supabase
        .from('_pidr_payment_addresses')
        .select('*')
        .eq('user_id', userId)
        .eq('coin', 'TON')
        .single();

      let memo: string;

      if (existingAddress) {
        memo = existingAddress.memo;
      } else {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π memo
        memo = this.generateUserMemo(userId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const { error } = await supabase
          .from('_pidr_payment_addresses')
          .insert({
            user_id: userId,
            coin: 'TON',
            address: this.masterAddress,
            memo: memo,
            is_active: true
          });

        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è memo:', error);
        }
      }

      return {
        address: this.masterAddress,
        memo: memo,
        amount_ton: 1.0, // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞
        amount_coins: 1000, // –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø–æ–ª—É—á–∏—Ç –∑–∞ 1 TON
        qr_url: this.generateTonQrUrl(this.masterAddress, memo, 1.0)
      };
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è payment info:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π memo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private generateUserMemo(userId: string): string {
    const crypto = require('crypto');
    const hash = crypto.createHash('sha256')
      .update(`${userId}_TON_${process.env.MEMO_SECRET || 'ton_secret'}`)
      .digest('hex');
    
    return hash.substring(0, 8).toUpperCase();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TON QR URL –¥–ª—è —É–¥–æ–±–Ω–æ–π –æ–ø–ª–∞—Ç—ã
   */
  private generateTonQrUrl(address: string, memo: string, amount: number): string {
    // –§–æ—Ä–º–∞—Ç: ton://transfer/{address}?amount={nanoton}&text={memo}
    const nanoton = amount * 1_000_000_000;
    return `ton://transfer/${address}?amount=${nanoton}&text=${memo}`;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const tonPaymentService = new TonPaymentService();

