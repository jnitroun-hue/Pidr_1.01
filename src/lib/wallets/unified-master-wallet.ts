/**
 * üè¶ UNIFIED MASTER WALLET SERVICE
 * –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Master –∫–æ—à–µ–ª—å–∫–∞–º–∏ –¥–ª—è P.I.D.R. –∏–≥—Ä—ã
 * 
 * ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: AES-256 —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, PBKDF2 –¥–ª—è –∫–ª—é—á–µ–π
 * ‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
 * ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
 * ‚úÖ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: –í–∞–ª–∏–¥–∞—Ü–∏—è, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
 */

import crypto from 'crypto';
import { supabase } from '../supabase';

// üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const SECURITY_CONFIG = {
  ENCRYPTION_ALGORITHM: 'aes-256-gcm',
  KEY_DERIVATION_ITERATIONS: 100000,
  SALT_LENGTH: 32,
  IV_LENGTH: 16,
  TAG_LENGTH: 16,
  ADDRESS_ENTROPY: 32,
} as const;

// üè¶ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
export const SUPPORTED_NETWORKS = {
  BTC: {
    name: 'Bitcoin',
    symbol: 'BTC',
    decimals: 8,
    addressPrefix: '1',
    derivationPath: "m/44'/0'/0'/0",
    minConfirmations: 3,
    networkType: 'mainnet'
  },
  ETH: {
    name: 'Ethereum',
    symbol: 'ETH',
    decimals: 18,
    addressPrefix: '0x',
    derivationPath: "m/44'/60'/0'/0",
    minConfirmations: 12,
    networkType: 'mainnet'
  },
  TON: {
    name: 'Toncoin',
    symbol: 'TON',
    decimals: 9,
    addressPrefix: 'EQ',
    derivationPath: "m/44'/607'/0'/0",
    minConfirmations: 5,
    networkType: 'mainnet'
  },
  USDT_TRC20: {
    name: 'USDT (TRC20)',
    symbol: 'USDT',
    decimals: 6,
    addressPrefix: 'T',
    derivationPath: "m/44'/195'/0'/0",
    minConfirmations: 20,
    networkType: 'tron'
  },
  USDT_ERC20: {
    name: 'USDT (ERC20)',
    symbol: 'USDT',
    decimals: 6,
    addressPrefix: '0x',
    derivationPath: "m/44'/60'/0'/0",
    minConfirmations: 12,
    networkType: 'ethereum'
  },
  SOL: {
    name: 'Solana',
    symbol: 'SOL',
    decimals: 9,
    addressPrefix: '',
    derivationPath: "m/44'/501'/0'/0",
    minConfirmations: 32,
    networkType: 'mainnet'
  }
} as const;

export type SupportedNetwork = keyof typeof SUPPORTED_NETWORKS;

// üè¶ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface MasterWalletConfig {
  network: SupportedNetwork;
  address: string;
  xpub?: string;
  privateKey?: string; // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π
  derivationPath: string;
  isActive: boolean;
  createdAt: Date;
  lastUsed?: Date;
  transactionCount: number;
}

export interface UserWalletAddress {
  id: string;
  userId: string;
  network: SupportedNetwork;
  address: string;
  derivationIndex?: number;
  masterWalletId: string;
  isActive: boolean;
  createdAt: Date;
  balance?: string;
  lastChecked?: Date;
}

export interface PaymentDetails {
  network: SupportedNetwork;
  userAddress: string;
  masterAddress: string;
  amount: string;
  memo?: string;
  qrCode: string;
  expiresAt: Date;
}

/**
 * üè¶ Unified Master Wallet Service
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Master –∫–æ—à–µ–ª—å–∫–∞–º–∏
 */
export class UnifiedMasterWallet {
  private masterWallets: Map<SupportedNetwork, MasterWalletConfig> = new Map();
  private addressCache: Map<string, UserWalletAddress> = new Map();
  private encryptionKey: Buffer;

  constructor() {
    this.encryptionKey = this.deriveEncryptionKey();
    this.initializeMasterWallets();
  }

  /**
   * üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private deriveEncryptionKey(): Buffer {
    const masterSecret = process.env.MASTER_WALLET_SECRET || 'PIDR_MASTER_WALLET_SECRET_2024';
    const salt = process.env.MASTER_WALLET_SALT || 'PIDR_SALT_2024';
    
    return crypto.pbkdf2Sync(
      masterSecret,
      salt,
      SECURITY_CONFIG.KEY_DERIVATION_ITERATIONS,
      32,
      'sha256'
    );
  }

  /**
   * üè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Master –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private async initializeMasterWallets(): Promise<void> {
    const isBuildTime = process.env.NODE_ENV === 'production' && process.env.VERCEL_ENV === undefined;
    
    if (!isBuildTime) {
      console.log('üè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Master –∫–æ—à–µ–ª—å–∫–æ–≤...');
    }

    for (const [network, config] of Object.entries(SUPPORTED_NETWORKS)) {
      const envAddress = this.getEnvAddress(network as SupportedNetwork);
      const envXpub = this.getEnvXpub(network as SupportedNetwork);

      if (envAddress || envXpub) {
        const masterConfig: MasterWalletConfig = {
          network: network as SupportedNetwork,
          address: envAddress || '',
          xpub: envXpub || undefined,
          derivationPath: config.derivationPath,
          isActive: true,
          createdAt: new Date(),
          transactionCount: 0
        };

        this.masterWallets.set(network as SupportedNetwork, masterConfig);
        if (!isBuildTime) {
          console.log(`‚úÖ ${network} Master –∫–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: ${envAddress || envXpub}`);
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
        if (!isBuildTime || ['BTC', 'ETH', 'TON', 'SOL'].includes(network)) {
          console.warn(`‚ö†Ô∏è ${network} Master –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
        }
      }
    }

    if (!isBuildTime) {
      console.log(`üè¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.masterWallets.size} Master –∫–æ—à–µ–ª—å–∫–æ–≤`);
    }
  }

  /**
   * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private getEnvAddress(network: SupportedNetwork): string {
    const envVars = [
      `MASTER_${network}_ADDRESS`,
      `${network}_MASTER_ADDRESS`,
      `MASTER_${network}_WALLET`,
      `${network}_MASTER_WALLET`,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Vercel
      `MASTER_${network.replace('_', '')}_WALLET`, // MASTER_USDT_TRC20 -> MASTER_USDTTRC20_WALLET
      `${network.replace('_', '')}_MASTER_WALLET`   // USDT_TRC20 -> USDTTRC20_MASTER_WALLET
    ];

    for (const envVar of envVars) {
      const value = process.env[envVar];
      if (value) return value;
    }

    return '';
  }

  /**
   * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ XPUB –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private getEnvXpub(network: SupportedNetwork): string {
    const envVars = [
      `${network}_MASTER_XPUB`,
      `MASTER_${network}_XPUB`,
      `${network}_XPUB`
    ];

    for (const envVar of envVars) {
      const value = process.env[envVar];
      if (value) return value;
    }

    return '';
  }

  /**
   * üè¶ –ü–æ–ª—É—á–µ–Ω–∏–µ Master –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ë–ï–ó HD –¥–µ—Ä–∏–≤–∞—Ü–∏–∏)
   */
  getMasterAddressForDeposit(network: SupportedNetwork): { address: string; memo?: string } {
    const masterWallet = this.masterWallets.get(network);
    if (!masterWallet) {
      throw new Error(`Master –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å–µ—Ç–∏ ${network} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–Ω–æ Master –∞–¥—Ä–µ—Å, –∞ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    return {
      address: masterWallet.address,
      memo: network === 'TON' ? 'PIDR_DEPOSIT' : undefined // Memo –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    };
  }

  /**
   * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  async generateUserAddress(userId: string, network: SupportedNetwork): Promise<UserWalletAddress> {
    console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${network} –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥—Ä–µ—Å
    const existing = await this.getUserAddress(userId, network);
    if (existing) {
      console.log(`‚ôªÔ∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å: ${existing.address}`);
      return existing;
    }

    const masterWallet = this.masterWallets.get(network);
    if (!masterWallet) {
      throw new Error(`Master –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å–µ—Ç–∏ ${network} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Master –∞–¥—Ä–µ—Å –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    let userAddress: string;
    let derivationIndex: number | undefined;

    // –î–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Master –∞–¥—Ä–µ—Å —Å memo
    userAddress = masterWallet.address;
    derivationIndex = undefined; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º HD –¥–µ—Ä–∏–≤–∞—Ü–∏—é –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    const walletAddress: UserWalletAddress = {
      id: crypto.randomUUID(),
      userId,
      network,
      address: userAddress,
      derivationIndex,
      masterWalletId: `master_${network}`,
      isActive: true,
      createdAt: new Date()
    };

    await this.saveUserAddress(walletAddress);
    this.addressCache.set(`${userId}_${network}`, walletAddress);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π ${network} –∞–¥—Ä–µ—Å: ${userAddress}`);
    return walletAddress;
  }

  /**
   * üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HD –∞–¥—Ä–µ—Å–∞
   */
  private async generateHDAddress(userId: string, network: SupportedNetwork, masterWallet: MasterWalletConfig): Promise<{address: string, index: number}> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userHash = crypto.createHash('sha256').update(`${userId}_${network}`).digest();
    const index = Math.abs(userHash.readInt32BE(0)) % 1000000; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1M

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å HD –¥–µ—Ä–∏–≤–∞—Ü–∏—è
    // –î–ª—è –¥–µ–º–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å
    const networkConfig = SUPPORTED_NETWORKS[network];
    const addressHash = crypto.createHash('sha256')
      .update(`${masterWallet.xpub}_${index}_${userId}`)
      .digest('hex');

    let address: string;
    switch (network) {
      case 'BTC':
        address = '1' + addressHash.substring(0, 33);
        break;
      case 'ETH':
      case 'USDT_ERC20':
        address = '0x' + addressHash.substring(0, 40);
        break;
      case 'TON':
        address = 'EQ' + addressHash.substring(0, 46);
        break;
      case 'USDT_TRC20':
        address = 'T' + addressHash.substring(0, 33).toUpperCase();
        break;
      case 'SOL':
        address = this.generateSolanaAddress(addressHash);
        break;
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å: ${network}`);
    }

    return { address, index };
  }

  /**
   * üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å–∞
   */
  private generateProxyAddress(userId: string, network: SupportedNetwork): string {
    const secret = process.env.PROXY_ADDRESS_SECRET || 'PIDR_PROXY_SECRET_2024';
    const seed = crypto.createHash('sha256')
      .update(`${userId}_${network}_${secret}`)
      .digest('hex');

    const networkConfig = SUPPORTED_NETWORKS[network];
    
    switch (network) {
      case 'BTC':
        return '1' + crypto.createHash('sha256').update(seed + 'btc').digest('hex').substring(0, 33);
      case 'ETH':
      case 'USDT_ERC20':
        return '0x' + crypto.createHash('sha256').update(seed + 'eth').digest('hex').substring(0, 40);
      case 'TON':
        return 'EQ' + crypto.createHash('sha256').update(seed + 'ton').digest('hex').substring(0, 46);
      case 'USDT_TRC20':
        return 'T' + crypto.createHash('sha256').update(seed + 'tron').digest('hex').substring(0, 33).toUpperCase();
      case 'SOL':
        return this.generateSolanaAddress(crypto.createHash('sha256').update(seed + 'sol').digest('hex'));
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å: ${network}`);
    }
  }

  /**
   * üåû –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Solana –∞–¥—Ä–µ—Å–∞ (base58)
   */
  private generateSolanaAddress(hash: string): string {
    const alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    let result = '';
    for (let i = 0; i < 44; i++) {
      const byte = parseInt(hash.substring(i * 2, i * 2 + 2), 16);
      result += alphabet[byte % alphabet.length];
    }
    return result;
  }

  /**
   * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserAddress(userId: string, network: SupportedNetwork): Promise<UserWalletAddress | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `${userId}_${network}`;
    if (this.addressCache.has(cacheKey)) {
      return this.addressCache.get(cacheKey)!;
    }

    // –ò—â–µ–º –≤ –ë–î
    const { data, error } = await supabase
      .from('_pidr_user_wallet_addresses')
      .select('*')
      .eq('user_id', userId)
      .eq('network', network)
      .eq('is_active', true)
      .single();

    if (error || !data) {
      return null;
    }

    const address: UserWalletAddress = {
      id: data.id,
      userId: data.user_id,
      network: data.network,
      address: data.address,
      derivationIndex: data.derivation_index,
      masterWalletId: data.master_wallet_id,
      isActive: data.is_active,
      createdAt: new Date(data.created_at),
      balance: data.balance,
      lastChecked: data.last_checked ? new Date(data.last_checked) : undefined
    };

    this.addressCache.set(cacheKey, address);
    return address;
  }

  /**
   * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
   */
  private async saveUserAddress(address: UserWalletAddress): Promise<void> {
    const { error } = await supabase
      .from('_pidr_user_wallet_addresses')
      .insert({
        id: address.id,
        user_id: address.userId,
        network: address.network,
        address: address.address,
        derivation_index: address.derivationIndex,
        master_wallet_id: address.masterWalletId,
        is_active: address.isActive,
        created_at: address.createdAt.toISOString()
      });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å: ${error.message}`);
    }
  }

  /**
   * üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
   */
  async createPaymentDetails(userId: string, network: SupportedNetwork, amount: string, memo?: string): Promise<PaymentDetails> {
    const userAddress = await this.generateUserAddress(userId, network);
    const masterWallet = this.masterWallets.get(network);

    if (!masterWallet) {
      throw new Error(`Master –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å–µ—Ç–∏ ${network} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    }

    const paymentDetails: PaymentDetails = {
      network,
      userAddress: userAddress.address,
      masterAddress: masterWallet.address,
      amount,
      memo: memo || this.generateMemo(userId, network),
      qrCode: this.generateQRCode(userAddress.address, amount, memo),
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
    };

    return paymentDetails;
  }

  /**
   * üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è memo –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
   */
  private generateMemo(userId: string, network: SupportedNetwork): string {
    const hash = crypto.createHash('sha256')
      .update(`${userId}_${network}_${Date.now()}`)
      .digest('hex');
    return `PIDR_${hash.substring(0, 8).toUpperCase()}`;
  }

  /**
   * üì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
   */
  private generateQRCode(address: string, amount: string, memo?: string): string {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
    return `qr_${address}_${amount}_${memo || ''}`;
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Master –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  async getMasterWalletStats(): Promise<{
    totalNetworks: number;
    activeWallets: number;
    totalAddresses: number;
    lastActivity: Date | null;
  }> {
    const { data: addressCount } = await supabase
      .from('_pidr_user_wallet_addresses')
      .select('id', { count: 'exact' })
      .eq('is_active', true);

    const { data: lastAddress } = await supabase
      .from('_pidr_user_wallet_addresses')
      .select('created_at')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    return {
      totalNetworks: Object.keys(SUPPORTED_NETWORKS).length,
      activeWallets: this.masterWallets.size,
      totalAddresses: addressCount?.length || 0,
      lastActivity: lastAddress ? new Date(lastAddress.created_at) : null
    };
  }

  /**
   * üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  validateConfiguration(): {
    isValid: boolean;
    errors: string[];
    warnings: string[];
  } {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = [
      'MASTER_WALLET_SECRET',
      'PROXY_ADDRESS_SECRET'
    ];

    for (const envVar of requiredEnvVars) {
      if (!process.env[envVar]) {
        errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envVar}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Master –∫–æ—à–µ–ª—å–∫–∏
    for (const [network, config] of Object.entries(SUPPORTED_NETWORKS)) {
      const hasAddress = this.getEnvAddress(network as SupportedNetwork);
      const hasXpub = this.getEnvXpub(network as SupportedNetwork);

      if (!hasAddress && !hasXpub) {
        warnings.push(`${network}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –∞–¥—Ä–µ—Å, –Ω–∏ XPUB`);
      }
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
}

// üè≠ –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const masterWallet = new UnifiedMasterWallet();
