/**
 * üîê –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
 * –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤–æ –≤—Å–µ—Ö API
 */

import { NextRequest } from 'next/server';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;

/**
 * ‚úÖ –ï–î–ò–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è userId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–∞:
 * 1. HTTP-only cookies (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
 * 2. Authorization header (Bearer token)
 * 3. Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export function getUserIdFromRequest(req: NextRequest): string | null {
  if (!JWT_SECRET) {
    console.error('‚ùå JWT_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return null;
  }
  
  let token: string | null = null;
  
  // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: HTTP-only cookies (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
  const cookieToken = req.cookies.get('auth_token')?.value;
  if (cookieToken) {
    token = cookieToken;
    console.log('üç™ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ cookies');
  }
  
  // 2. Fallback: Authorization header
  if (!token) {
    const authHeader = req.headers.get('authorization');
    if (authHeader?.startsWith('Bearer ')) {
      token = authHeader.replace('Bearer ', '');
      console.log('üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization header');
    }
  }
  
  // 3. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
  if (!token && process.env.NODE_ENV === 'development') {
    const url = new URL(req.url);
    const queryToken = url.searchParams.get('token');
    if (queryToken) {
      token = queryToken;
      console.log('üß™ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ query (dev —Ä–µ–∂–∏–º)');
    }
  }
  
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ cookies, –Ω–∏ –≤ headers');
    return null;
  }
  
  try {
    const payload = jwt.verify(token, JWT_SECRET) as any;
    const userId = payload.userId;
    
    if (!userId) {
      console.error('‚ùå userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–∫–µ–Ω–µ');
      return null;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', userId);
    return userId;
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
    return null;
  }
}

/**
 * üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export function requireAuth(req: NextRequest): { userId: string; error?: never } | { userId?: never; error: string } {
  const userId = getUserIdFromRequest(req);
  
  if (!userId) {
    return { error: 'Unauthorized: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' };
  }
  
  return { userId };
}

/**
 * üîë –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
 */
export function createAuthToken(userId: string): string {
  if (!JWT_SECRET) {
    throw new Error('JWT_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }
  
  const payload = {
    userId,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // 30 –¥–Ω–µ–π
  };
  
  return jwt.sign(payload, JWT_SECRET);
}

/**
 * üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
export function validateToken(token: string): boolean {
  if (!JWT_SECRET) return false;
  
  try {
    jwt.verify(token, JWT_SECRET);
    return true;
  } catch {
    return false;
  }
}
