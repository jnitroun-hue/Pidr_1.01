// –ò–ò –¥–ª—è –∏–≥—Ä—ã –≤ P.I.D.R.

import type { Card, Player } from '../../types/game';

export type AIDifficulty = 'easy' | 'medium' | 'hard';

interface AIDecision {
  action: 'play_card' | 'draw_card' | 'place_on_target' | 'place_on_self' | 'pass';
  targetPlayerId?: number;
  cardToPlay?: Card;
  confidence: number; // 0-1, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ò–ò —É–≤–µ—Ä–µ–Ω –≤ —Ä–µ—à–µ–Ω–∏–∏
}

export class AIPlayer {
  private difficulty: AIDifficulty;
  private playerId: number;
  
  constructor(playerId: number, difficulty: AIDifficulty = 'medium') {
    this.playerId = playerId;
    this.difficulty = difficulty;
  }
  
  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
  makeDecision(
    gameState: {
      players: Player[];
      currentPlayer: number;
      gameStage: 1 | 2 | 3;
      deck: Card[];
      availableTargets: number[];
      revealedDeckCard: Card | null;
      tableStack?: Card[];
      trumpSuit?: string | null;
    }
  ): AIDecision {
    const { gameStage } = gameState;
    
    console.log(`ü§ñ [AI makeDecision] –ò–≥—Ä–æ–∫ ${this.playerId} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–¥–∏–∏ ${gameStage}`);
    
    let decision: AIDecision;
    switch (gameStage) {
      case 1:
        decision = this.makeStage1Decision(gameState);
        break;
      case 2:
        decision = this.makeStage2Decision(gameState);
        break;
      case 3:
        decision = this.makeStage3Decision(gameState);
        break;
      default:
        decision = { action: 'pass', confidence: 0 };
    }
    
    console.log(`ü§ñ [AI makeDecision] –ò–≥—Ä–æ–∫ ${this.playerId} –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ:`, decision);
    return decision;
  }
  
  // –†–µ—à–µ–Ω–∏—è –¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏ (—Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç)
  private makeStage1Decision(gameState: any): AIDecision {
    const { players, availableTargets, revealedDeckCard } = gameState;
    const currentPlayer = players.find((p: Player) => {
      const pId = typeof p.id === 'string' ? parseInt(p.id.replace('player_', '')) : p.id;
      return pId === this.playerId;
    });
    
    if (!currentPlayer) {
      console.error(`üî¥ [AI Stage1] –ù–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ —Å ID ${this.playerId}`);
      return { action: 'draw_card', confidence: 0.6 };
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã
    if (revealedDeckCard) {
      const cardRank = this.getCardRank(revealedDeckCard);
      
      // –õ–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      switch (this.difficulty) {
        case 'easy':
          // –ü—Ä–æ—Å—Ç–æ–π –ò–ò - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
          if (availableTargets.length > 0) {
            const randomTarget = availableTargets[Math.floor(Math.random() * availableTargets.length)];
            return {
              action: 'place_on_target',
              targetPlayerId: randomTarget,
              confidence: 0.5
            };
          }
          break;
          
        case 'medium':
          // –°—Ä–µ–¥–Ω–∏–π –ò–ò - —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç—å –ø–ª–æ—Ö–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º
          if (cardRank <= 6 && availableTargets.length > 0) {
            // –ö–ª–∞–¥–µ–º —Å–ª–∞–±—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º
            const enemyTargets = availableTargets.filter((id: number) => id !== this.playerId);
            if (enemyTargets.length > 0) {
              const target = enemyTargets[Math.floor(Math.random() * enemyTargets.length)];
              return {
                action: 'place_on_target',
                targetPlayerId: target,
                confidence: 0.7
              };
            }
          } else if (cardRank >= 10) {
            // –•–æ—Ä–æ—à–∏–µ –∫–∞—Ä—Ç—ã —Å–µ–±–µ
            if (this.canPlaceOnSelf(currentPlayer, revealedDeckCard)) {
              return {
                action: 'place_on_self',
                confidence: 0.8
              };
            }
          }
          break;
          
        case 'hard':
          // –°–ª–æ–∂–Ω—ã–π –ò–ò - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
          const decision = this.analyzeStage1Situation(gameState);
          if (decision) return decision;
          break;
      }
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
    return {
      action: 'draw_card',
      confidence: 0.6
    };
  }
  
  // –†–µ—à–µ–Ω–∏—è –¥–ª—è 2-–π —Å—Ç–∞–¥–∏–∏ (P.I.D.R. –ø—Ä–∞–≤–∏–ª–∞)
  private makeStage2Decision(gameState: any): AIDecision {
    const { players, tableStack, trumpSuit } = gameState;
    const currentPlayer = players.find((p: Player) => {
      const pId = typeof p.id === 'string' ? parseInt(p.id.replace('player_', '')) : p.id;
      return pId === this.playerId;
    });
    
    if (!currentPlayer) {
      console.error(`üî¥ [AI Stage2 P.I.D.R.] –ù–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ —Å ID ${this.playerId}`);
      return { action: 'pass', confidence: 0 };
    }
    
    if (!currentPlayer.cards) {
      console.error(`üî¥ [AI Stage2 P.I.D.R.] –£ –∏–≥—Ä–æ–∫–∞ ${this.playerId} –Ω–µ—Ç –∫–∞—Ä—Ç`);
      return { action: 'pass', confidence: 0 };
    }
    
    const handCards = currentPlayer.cards.filter((c: Card) => c.open);
    
    console.log(`ü§ñ [AI Stage2 P.I.D.R.] –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${this.playerId}:`);
    console.log(`ü§ñ [AI Stage2 P.I.D.R.] - tableStack.length: ${tableStack?.length || 0}`);
    console.log(`ü§ñ [AI Stage2 P.I.D.R.] - handCards.length: ${handCards.length}`);
    console.log(`ü§ñ [AI Stage2 P.I.D.R.] - handCards:`, handCards.map((c: any) => c.image));
    console.log(`ü§ñ [AI Stage2 P.I.D.R.] - trumpSuit: ${trumpSuit}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã
    if (handCards.length === 0) {
      console.log(`ü§ñ [AI Stage2 P.I.D.R.] ‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã`);
      console.log(`ü§ñ [AI Stage2 P.I.D.R.] ‚ùå –í—Å–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞:`, currentPlayer.cards.map((c: any) => `${c.image}(${c.open ? 'open' : 'closed'})`));
      return { action: 'draw_card', confidence: 0.9 }; // –ë–µ—Ä–µ–º –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É
    }
    
    if (!tableStack || tableStack.length === 0) {
      // –ü–†–ê–í–ò–õ–ê P.I.D.R.: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥ - –∫–ª–∞–¥–µ–º —Å–∞–º—É—é —Å–ª–∞–±—É—é –∫–∞—Ä—Ç—É
      console.log(`ü§ñ [AI Stage2 P.I.D.R.] –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥`);
      const weakestCard = this.findWeakestNonTrumpCard(handCards, trumpSuit) || this.findWeakestCard(handCards, trumpSuit);
      if (weakestCard) {
        console.log(`ü§ñ [AI Stage2 P.I.D.R.] ‚úÖ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥ –∫–∞—Ä—Ç–æ–π: ${weakestCard.image}`);
        return {
          action: 'play_card',
          cardToPlay: weakestCard,
          confidence: 0.8
        };
      } else {
        console.log(`üö® [AI Stage2 P.I.D.R.] ‚ùå –ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Å–ª–∞–±–µ–π—à—É—é –∫–∞—Ä—Ç—É —Å—Ä–µ–¥–∏:`, handCards.map((c: any) => c.image));
      }
    } else {
      // –ü–†–ê–í–ò–õ–ê P.I.D.R.: –ù–∞ —Å—Ç–æ–ª–µ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–±–∏—Ç—å –í–ï–†–•–ù–Æ–Æ –∫–∞—Ä—Ç—É
      const topCard = tableStack[tableStack.length - 1];
      console.log(`ü§ñ [AI Stage2 P.I.D.R.] –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–±–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É: ${topCard?.image}`);
      
      const defenseCard = this.findBestDefenseCard(handCards, topCard, trumpSuit);
      
      if (defenseCard) {
        console.log(`ü§ñ [AI Stage2 P.I.D.R.] ‚úÖ –ü–æ–±–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É: ${defenseCard.image}`);
        return {
          action: 'play_card',
          cardToPlay: defenseCard,
          confidence: 0.8
        };
      } else {
        // –ü–†–ê–í–ò–õ–ê P.I.D.R.: –ù–µ –º–æ–∂–µ–º –ø–æ–±–∏—Ç—å - –±–µ—Ä–µ–º –ù–ò–ñ–ù–Æ–Æ –∫–∞—Ä—Ç—É —Å–æ —Å—Ç–æ–ª–∞
        console.log(`ü§ñ [AI Stage2 P.I.D.R.] ‚ùå –ù–µ –º–æ–∂–µ–º –ø–æ–±–∏—Ç—å - –±–µ—Ä–µ–º –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É`);
        return {
          action: 'draw_card', // –í P.I.D.R. = takeTableCards (–±–µ—Ä–µ—Ç –Ω–∏–∂–Ω—é—é)
          confidence: 0.9
        };
      }
    }
    
    console.log(`ü§ñ [AI Stage2 P.I.D.R.] ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ - –±–µ—Ä–µ–º –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É`);
    return { action: 'draw_card', confidence: 0.6 };
  }
  
  // –†–µ—à–µ–Ω–∏—è –¥–ª—è 3-–π —Å—Ç–∞–¥–∏–∏ (–ø–µ–Ω—å–∫–∏) - –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª–∞ 2-–π —Å—Ç–∞–¥–∏–∏ (P.I.D.R.)
  private makeStage3Decision(gameState: any): AIDecision {
    console.log(`ü§ñ [AI Stage3] 3-—è —Å—Ç–∞–¥–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ 2-–π —Å—Ç–∞–¥–∏–∏ (P.I.D.R.)`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: 3-—è —Å—Ç–∞–¥–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ 2-–π —Å—Ç–∞–¥–∏–∏ P.I.D.R.!
    return this.makeStage2Decision(gameState);
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private getCardRank(card: Card): number {
    if (!card.image) return 0;
    
    const imageName = card.image.split('/').pop()?.toLowerCase() || '';
    
    if (imageName.includes('2_')) return 2;
    if (imageName.includes('3_')) return 3;
    if (imageName.includes('4_')) return 4;
    if (imageName.includes('5_')) return 5;
    if (imageName.includes('6_')) return 6;
    if (imageName.includes('7_')) return 7;
    if (imageName.includes('8_')) return 8;
    if (imageName.includes('9_')) return 9;
    if (imageName.includes('10_')) return 10;
    if (imageName.includes('jack_')) return 11;
    if (imageName.includes('queen_')) return 12;
    if (imageName.includes('king_')) return 13;
    if (imageName.includes('ace_')) return 14;
    
    return 0;
  }
  
  private canPlaceOnSelf(player: Player, card: Card): boolean {
    const topCard = player.cards[player.cards.length - 1];
    if (!topCard) return true;
    
    const cardRank = this.getCardRank(card);
    const topRank = this.getCardRank(topCard);
    
    return cardRank > topRank;
  }
  
  private analyzeStage1Situation(gameState: any): AIDecision | null {
    const { players, availableTargets, revealedDeckCard } = gameState;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é
    const threats = this.identifyThreats(players);
    const opportunities = this.identifyOpportunities(players);
    
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if (threats.length > 0 && revealedDeckCard) {
      const cardRank = this.getCardRank(revealedDeckCard);
      
      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —Å–ª–∞–±–∞—è, –∫–ª–∞–¥–µ–º —Å–∞–º–æ–º—É —Å–∏–ª—å–Ω–æ–º—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
      if (cardRank <= 6) {
        const strongestThreat = threats[0];
        if (availableTargets.includes(strongestThreat)) {
          return {
            action: 'place_on_target',
            targetPlayerId: strongestThreat,
            confidence: 0.9
          };
        }
      }
    }
    
    return null;
  }
  

  
  private identifyCriticalThreats(players: Player[]): number[] {
    // –ò–≥—Ä–æ–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ä—Ç (–±–ª–∏–∑–∫–∏–µ –∫ –ø–æ–±–µ–¥–µ)
    return players
      .filter(p => {
        const pId = typeof p.id === 'string' ? parseInt(p.id.replace('player_', '')) : p.id;
        return pId !== this.playerId;
      })
      .filter(p => {
        const totalCards = p.cards.length + (p.penki?.length || 0);
        return totalCards <= 2; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É–≥—Ä–æ–∑–∞ - 2 –∏–ª–∏ –º–µ–Ω—å—à–µ –∫–∞—Ä—Ç
      })
      .sort((a, b) => {
        const aCards = a.cards.length + (a.penki?.length || 0);
        const bCards = b.cards.length + (b.penki?.length || 0);
        return aCards - bCards; // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç
      })
      .map(p => {
        const pId = typeof p.id === 'string' ? parseInt(p.id.replace('player_', '')) : p.id;
        return pId;
      });
  }
  
  private identifyThreats(players: Player[]): number[] {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —É–≥—Ä–æ–∑—É
    return players
      .filter(p => {
        const pId = typeof p.id === 'string' ? parseInt(p.id.replace('player_', '')) : p.id;
        return pId !== this.playerId;
      })
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ö–æ—Ä–æ—à–∏—Ö –∫–∞—Ä—Ç
        const aScore = this.evaluatePlayerPosition(a);
        const bScore = this.evaluatePlayerPosition(b);
        return bScore - aScore;
      })
      .map(p => {
        const pId = typeof p.id === 'string' ? parseInt(p.id.replace('player_', '')) : p.id;
        return pId;
      });
  }
  
  private identifyOpportunities(players: Player[]): number[] {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    return players
      .filter(p => {
        const pId = typeof p.id === 'string' ? parseInt(p.id.replace('player_', '')) : p.id;
        return pId !== this.playerId;
      })
      .filter(p => p.cards.length < 3) // –ú–∞–ª–æ –∫–∞—Ä—Ç
      .map(p => {
        const pId = typeof p.id === 'string' ? parseInt(p.id.replace('player_', '')) : p.id;
        return pId;
      });
  }
  
  private evaluatePlayerPosition(player: Player): number {
    let score = 0;
    for (const card of player.cards) {
      if (card.open) {
        score += this.getCardRank(card);
      }
    }
    return score;
  }
  
  private findWeakestNonTrumpCard(cards: Card[], trumpSuit: string | null): Card | null {
    // –ò—â–µ–º —Å–∞–º—É—é —Å–ª–∞–±—É—é –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏
    const nonTrumpCards = cards.filter(c => !this.isTrump(c, trumpSuit));
    if (nonTrumpCards.length === 0) return null;
    
    return nonTrumpCards.reduce((weakest, card) => {
      return this.getCardRank(card) < this.getCardRank(weakest) ? card : weakest;
    });
  }
  
  private findWeakestCard(cards: Card[], trumpSuit: string | null): Card | null {
    const nonTrumpCards = cards.filter(c => !this.isTrump(c, trumpSuit));
    
    if (nonTrumpCards.length > 0) {
      return nonTrumpCards.reduce((weakest, card) => {
        return this.getCardRank(card) < this.getCardRank(weakest) ? card : weakest;
      });
    }
    
    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–∑—ã—Ä–∏, –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π —Å–ª–∞–±—ã–π
    if (cards.length > 0) {
      return cards.reduce((weakest, card) => {
        return this.getCardRank(card) < this.getCardRank(weakest) ? card : weakest;
      });
    }
    
    return null;
  }
  
  private findBestDefenseCard(
    handCards: Card[], 
    attackCard: Card, 
    trumpSuit: string | null
  ): Card | null {
    const attackRank = this.getCardRank(attackCard);
    const attackSuit = this.getCardSuit(attackCard);
    
    console.log(`ü§ñ [findBestDefenseCard] –ò—â–µ–º –∑–∞—â–∏—Ç—É –æ—Ç: ${attackCard.image} (${attackSuit}, —Ä–∞–Ω–≥ ${attackRank})`);
    console.log(`ü§ñ [findBestDefenseCard] –ö–æ–∑—ã—Ä—å: ${trumpSuit}`);
    
    // –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã
    const validDefenseCards: Card[] = [];
    
    handCards.forEach(card => {
      const cardRank = this.getCardRank(card);
      const cardSuit = this.getCardSuit(card);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –±–∏—Ç—å—è (–∫–∞–∫ –≤ gameStore.canBeatCard)
      let canBeat = false;
      
      // 1. –û–°–û–ë–û–ï –ü–†–ê–í–ò–õ–û: "–ü–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ü–∏–∫—è–º–∏!"
      if (attackSuit === 'spades' && cardSuit !== 'spades') {
        canBeat = false;
      }
      // 2. –ë–∏—Ç—å —Ç–æ–π –∂–µ –º–∞—Å—Ç—å—é —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–æ–π
      else if (attackSuit === cardSuit && cardRank > attackRank) {
        canBeat = true;
      }
      // 3. –ë–∏—Ç—å –∫–æ–∑—ã—Ä–µ–º –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é –∫–∞—Ä—Ç—É (–ù–û –ù–ï –ü–ò–ö–£!)
      else if (trumpSuit && cardSuit === trumpSuit && attackSuit !== trumpSuit && attackSuit !== 'spades') {
        canBeat = true;
      }
      
      if (canBeat) {
        console.log(`ü§ñ [findBestDefenseCard] ‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∞—è –∫–∞—Ä—Ç–∞: ${card.image} (${cardSuit}, —Ä–∞–Ω–≥ ${cardRank})`);
        validDefenseCards.push(card);
      } else {
        console.log(`ü§ñ [findBestDefenseCard] ‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: ${card.image} (${cardSuit}, —Ä–∞–Ω–≥ ${cardRank})`);
      }
    });
    
    if (validDefenseCards.length === 0) {
      console.log(`ü§ñ [findBestDefenseCard] –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ä—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã`);
      return null;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ AI
    let bestCard: Card;
    
    switch (this.difficulty) {
      case 'easy':
        // –ü—Ä–æ—Å—Ç–æ–π AI - —Å–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–∞—Ä—Ç–∞
        bestCard = validDefenseCards[Math.floor(Math.random() * validDefenseCards.length)];
        break;
        
      case 'medium':
        // –°—Ä–µ–¥–Ω–∏–π AI - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–∞—Ä—Ç–∞
        bestCard = validDefenseCards.reduce((min, card) => {
          return this.getCardRank(card) < this.getCardRank(min) ? card : min;
        });
        break;
        
      case 'hard':
        // –°–ª–æ–∂–Ω—ã–π AI - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–ø–æ–∫–∞ —Ç–æ–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
        bestCard = validDefenseCards.reduce((min, card) => {
          return this.getCardRank(card) < this.getCardRank(min) ? card : min;
        });
        break;
        
      default:
        bestCard = validDefenseCards[0];
    }
    
    console.log(`ü§ñ [findBestDefenseCard] –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: ${bestCard.image}`);
    return bestCard;
  }
  
  private getCardSuit(card: Card): string {
    const imageName = card.image?.split('/').pop()?.toLowerCase() || '';
    
    if (imageName.includes('clubs')) return 'clubs';
    if (imageName.includes('diamonds')) return 'diamonds';
    if (imageName.includes('hearts')) return 'hearts';
    if (imageName.includes('spades')) return 'spades';
    
    return 'unknown';
  }
  
  private isTrump(card: Card, trumpSuit: string | null): boolean {
    if (!trumpSuit) return false;
    return this.getCardSuit(card) === trumpSuit;
  }
  
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (–£–°–ö–û–†–ï–ù–û –í 2 –†–ê–ó–ê)
  async makeDecisionWithDelay(gameState: any): Promise<AIDecision> {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (—É–º–µ–Ω—å—à–µ–Ω–∞ –≤ 2 —Ä–∞–∑–∞)
    const delays = {
      easy: 170 + Math.random() * 330,    // –£—Å–∫–æ—Ä–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞ (–±—ã–ª–æ 250 + 500)
      medium: 330 + Math.random() * 500,  // –£—Å–∫–æ—Ä–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞ (–±—ã–ª–æ 500 + 750)
      hard: 500 + Math.random() * 670     // –£—Å–∫–æ—Ä–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞ (–±—ã–ª–æ 750 + 1000)
    };
    
    const delay = delays[this.difficulty];
    
    return new Promise(resolve => {
      setTimeout(() => {
        resolve(this.makeDecision(gameState));
      }, delay);
    });
  }
}
