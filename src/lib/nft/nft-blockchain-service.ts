/**
 * ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å NFT —á–µ—Ä–µ–∑ TON Connect
 * 
 * –ü–†–ò–ù–¶–ò–ü–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
 * 1. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–∫–∏–¥–∞—é—Ç –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 2. –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ TON Connect
 * 3. NFT —Ö—Ä–∞–Ω—è—Ç—Å—è –¢–û–õ–¨–ö–û –≤ –±–ª–æ–∫—á–µ–π–Ω–µ TON
 * 4. Supabase - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
 * 5. IndexedDB - —Ç–æ–ª—å–∫–æ –¥–ª—è UI –∫–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

import { Address } from '@ton/core';

export interface NFTOnChain {
  address: string;
  ownerAddress: string;
  collectionAddress?: string;
  index: number;
  metadata: {
    name: string;
    description: string;
    image: string;
    attributes: Array<{
      trait_type: string;
      value: string;
    }>;
  };
}

export class NFTBlockchainService {
  private tonApiUrl: string;
  private tonApiKey: string;

  constructor() {
    this.tonApiUrl = process.env.NEXT_PUBLIC_TON_API_URL || 'https://toncenter.com/api/v2';
    this.tonApiKey = process.env.NEXT_PUBLIC_TON_API_KEY || '';
  }

  /**
   * ‚úÖ –ü–æ–ª—É—á–∏—Ç—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
   * –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ TON blockchain
   */
  async getUserNFTs(userAddress: string): Promise<NFTOnChain[]> {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º NFT –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è:', userAddress);

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å
      const address = Address.parse(userAddress);
      const normalizedAddress = address.toString({ bounceable: false });

      // –ó–∞–ø—Ä–æ—Å –∫ TON API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è NFT
      const response = await fetch(
        `${this.tonApiUrl}/getTokenData?address=${normalizedAddress}`,
        {
          headers: {
            'X-API-Key': this.tonApiKey
          }
        }
      );

      if (!response.ok) {
        throw new Error(`TON API error: ${response.status}`);
      }

      const data = await response.json();
      
      // –ü–∞—Ä—Å–∏–º NFT –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const nfts: NFTOnChain[] = [];
      
      if (data.result && Array.isArray(data.result)) {
        for (const item of data.result) {
          try {
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT
            const metadata = await this.getNFTMetadata(item.metadata_url);
            
            nfts.push({
              address: item.address,
              ownerAddress: normalizedAddress,
              collectionAddress: item.collection_address,
              index: item.index,
              metadata
            });
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT:', error);
          }
        }
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${nfts.length} NFT –≤ –±–ª–æ–∫—á–µ–π–Ω–µ`);
      return nfts;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞:', error);
      return [];
    }
  }

  /**
   * ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT
   * –ß–∏—Ç–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ IPFS/HTTP
   */
  private async getNFTMetadata(metadataUrl: string): Promise<NFTOnChain['metadata']> {
    try {
      // –ï—Å–ª–∏ IPFS, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTTP gateway
      let url = metadataUrl;
      if (url.startsWith('ipfs://')) {
        url = url.replace('ipfs://', 'https://ipfs.io/ipfs/');
      }

      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Metadata fetch failed: ${response.status}`);
      }

      const metadata = await response.json();
      
      return {
        name: metadata.name || 'Unknown',
        description: metadata.description || '',
        image: metadata.image || '',
        attributes: metadata.attributes || []
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ NFT
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async verifyNFTOwnership(nftAddress: string, userAddress: string): Promise<boolean> {
    try {
      const address = Address.parse(nftAddress);
      const normalizedNFTAddress = address.toString({ bounceable: false });

      const response = await fetch(
        `${this.tonApiUrl}/getNftItemByAddress?address=${normalizedNFTAddress}`,
        {
          headers: {
            'X-API-Key': this.tonApiKey
          }
        }
      );

      if (!response.ok) {
        return false;
      }

      const data = await response.json();
      
      if (data.result && data.result.owner_address) {
        const ownerAddress = Address.parse(data.result.owner_address);
        const normalizedOwner = ownerAddress.toString({ bounceable: false });
        
        const userAddr = Address.parse(userAddress);
        const normalizedUser = userAddr.toString({ bounceable: false });

        return normalizedOwner === normalizedUser;
      }

      return false;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è NFT:', error);
      return false;
    }
  }

  /**
   * ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –º–∏–Ω—Ç–∞ NFT
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—à–µ—Ç —á–µ—Ä–µ–∑ TON Connect
   */
  async prepareMintTransaction(params: {
    collectionAddress: string;
    itemIndex: number;
    ownerAddress: string;
    metadataUrl: string;
    mintPrice: string; // –≤ TON
  }) {
    try {
      const { collectionAddress, itemIndex, ownerAddress, metadataUrl, mintPrice } = params;

      // –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –º–∏–Ω—Ç–∞
      const payload = {
        to: collectionAddress,
        value: mintPrice, // –¶–µ–Ω–∞ –º–∏–Ω—Ç–∞ –≤ TON
        data: {
          op: 'mint',
          itemIndex,
          ownerAddress,
          metadataUrl
        }
      };

      console.log('üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–∏–Ω—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞:', payload);
      return payload;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–∏–Ω—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ NFT
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—à–µ—Ç —á–µ—Ä–µ–∑ TON Connect
   */
  async prepareTransferTransaction(params: {
    nftAddress: string;
    fromAddress: string;
    toAddress: string;
  }) {
    try {
      const { nftAddress, fromAddress, toAddress } = params;

      // –°–æ–∑–¥–∞–µ–º payload –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
      const payload = {
        to: nftAddress,
        value: '0.05', // –ì–∞–∑ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
        data: {
          op: 'transfer',
          newOwner: toAddress,
          responseDestination: fromAddress,
          forwardAmount: '0.01'
        }
      };

      console.log('üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞:', payload);
      return payload;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å NFT —Å Supabase (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
   */
  async syncNFTsToSupabase(userAddress: string, nfts: NFTOnChain[]): Promise<void> {
    try {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è NFT —Å Supabase...');

      const response = await fetch('/api/nft/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({
          userAddress,
          nfts: nfts.map(nft => ({
            address: nft.address,
            collectionAddress: nft.collectionAddress,
            index: nft.index,
            metadata: nft.metadata
          }))
        })
      });

      if (!response.ok) {
        throw new Error(`Sync failed: ${response.status}`);
      }

      console.log('‚úÖ NFT —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Supabase');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ NFT:', error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const nftBlockchainService = new NFTBlockchainService();

