'use client'

import { motion } from 'framer-motion'
import { Play, User, Book, Store, Users } from 'lucide-react'
import { useGameStore } from '../store/gameStore'
import { useTelegram } from '../hooks/useTelegram'
import { useWalletStore } from '../store/walletStore'
import { useRouter } from 'next/navigation'
import { useState } from 'react'
import LanguageSwitcher, { useLanguage } from './LanguageSwitcher'
import { useTranslations } from '../lib/i18n/translations'

const tokens = [
  { name: 'TON', symbol: 'TON', color: '#0088ff' },
  { name: 'SOLANA', symbol: 'SOL', color: '#9945ff' },
  { name: 'ETHEREUM', symbol: 'ETH', color: '#627eea' },
]

interface MainMenuProps {
  user?: any
  onLogout?: () => void
}

export default function MainMenu({ user, onLogout }: MainMenuProps) {
  const { startGame, stats } = useGameStore()
  const { hapticFeedback } = useTelegram()
  const router = useRouter()
  const [menuOpen, setMenuOpen] = useState(false)
  const { language, changeLanguage } = useLanguage()
  const t = useTranslations(language)
  const { 
    tonAddress, tonBalance, isTonConnected,
    solanaAddress, solanaBalance, isSolanaConnected,
    ethereumAddress, ethereumBalance, isEthereumConnected,
    connectTonWallet, connectSolanaWallet, connectEthereumWallet,
    disconnectTonWallet, disconnectSolanaWallet, disconnectEthereumWallet
  } = useWalletStore()

  const handleWalletAction = async (type: 'ton' | 'solana' | 'ethereum', fromBurger = false) => {
    hapticFeedback('medium')
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä –º–µ–Ω—é –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –Ω–µ–≥–æ
    if (fromBurger) {
      setMenuOpen(false)
    }
    
    try {
      switch (type) {
        case 'ton':
          if (isTonConnected) {
            disconnectTonWallet()
          } else {
            await connectTonWallet()
          }
          break
        case 'solana':
          if (isSolanaConnected) {
            disconnectSolanaWallet()
          } else {
            await connectSolanaWallet()
          }
          break
        case 'ethereum':
          if (isEthereumConnected) {
            disconnectEthereumWallet()
          } else {
            await connectEthereumWallet()
          }
          break
      }
    } catch (error) {
      console.error('Wallet connection error:', error)
    }
  }

  return (
    <div className="main-menu-container">
      <div className="main-menu-inner">
        {/* –í–µ—Ä—Ö–Ω–∏–π –±–∞—Ä */}
        <div className="menu-header" style={{ position: 'relative' }}>
          <button onClick={() => window.history.back()} className="px-3 py-1 rounded-lg border border-red-400 text-red-200 font-semibold text-base hover:bg-red-400/10 transition-all">
            {t.common.back}
          </button>
          <span className="menu-title">{t.mainMenu.title}</span>
          <LanguageSwitcher 
            currentLanguage={language}
            onLanguageChange={changeLanguage}
            className="ml-2"
          />
        </div>
        
        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="menu-actions-title">
          {language === 'ru' ? '–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø' : 'QUICK ACTIONS'}
        </div>
        <div className="menu-actions-grid">
          <button 
         onClick={() => {
           console.log('–ö–Ω–æ–ø–∫–∞ –ò–ì–†–ê–¢–¨ –Ω–∞–∂–∞—Ç–∞');
           hapticFeedback('medium');
           try {
             // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É, –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º
             console.log('üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º...');
             startGame('single', 9);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                setTimeout(() => {
                  router.push('/game');
                }, 100);
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
                // Fallback - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                router.push('/game');
              }
            }} 
            className="menu-action-card"
          >
            <Play className="menu-action-icon" />
            <span className="menu-action-label">{t.mainMenu.play.toUpperCase()}</span>
          </button>
          <button 
            onClick={() => {
              console.log('–ö–Ω–æ–ø–∫–∞ –û–ù–õ–ê–ô–ù –Ω–∞–∂–∞—Ç–∞');
              hapticFeedback('medium');
              try {
                router.push('/multiplayer');
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä—É:', error);
                window.location.href = '/multiplayer';
              }
            }} 
            className="menu-action-card multiplayer-card"
          >
            <Users className="menu-action-icon" />
            <span className="menu-action-label">
              {language === 'ru' ? '–û–ù–õ–ê–ô–ù' : 'ONLINE'}
            </span>
          </button>
          <button 
            onClick={() => {
              console.log('–ö–Ω–æ–ø–∫–∞ –ú–ê–ì–ê–ó–ò–ù –Ω–∞–∂–∞—Ç–∞');
              hapticFeedback('medium');
              try {
                router.push('/shop');
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É:', error);
                window.location.href = '/shop';
              }
            }} 
            className="menu-action-card"
          >
            <Store className="menu-action-icon" />
            <span className="menu-action-label">–ú–ê–ì–ê–ó–ò–ù</span>
          </button>
          <button 
            onClick={() => {
              console.log('–ö–Ω–æ–ø–∫–∞ –ü–†–û–§–ò–õ–¨ –Ω–∞–∂–∞—Ç–∞');
              hapticFeedback('medium');
              try {
                router.push('/profile');
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é:', error);
                window.location.href = '/profile';
              }
            }} 
            className="menu-action-card"
          >
            <User className="menu-action-icon" />
            <span className="menu-action-label">–ü–†–û–§–ò–õ–¨</span>
          </button>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã */}
        <div className="rules-section">
          <button 
            onClick={() => {
              console.log('–ö–Ω–æ–ø–∫–∞ –ü–†–ê–í–ò–õ–ê –Ω–∞–∂–∞—Ç–∞');
              hapticFeedback('medium');
              try {
                router.push('/rules');
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –ø—Ä–∞–≤–∏–ª–∞–º:', error);
                window.location.href = '/rules';
              }
            }} 
            className="rules-button"
          >
            <Book className="rules-icon" />
            <span className="rules-label">–ü–†–ê–í–ò–õ–ê –ò–ì–†–´</span>
          </button>
        </div>

        {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ */}
        <div className="wallet-connect-section-compact">
          <div className="wallet-connect-title-compact">–ö–û–®–ï–õ–ï–ö</div>
          <div className="wallet-connect-grid-compact">
            <button 
              onClick={() => handleWalletAction('ton')} 
              className="wallet-connect-btn-compact ton-wallet-compact"
            >
              <div className="wallet-connect-icon-compact">üíé</div>
              <div className="wallet-connect-label-compact">
                {isTonConnected ? '‚úì' : 'TON'}
              </div>
            </button>
            
            <button 
              onClick={() => handleWalletAction('solana')} 
              className="wallet-connect-btn-compact solana-wallet-compact"
            >
              <div className="wallet-connect-icon-compact">‚ö°</div>
              <div className="wallet-connect-label-compact">
                {isSolanaConnected ? '‚úì' : 'SOL'}
              </div>
            </button>
            
            <button 
              onClick={() => handleWalletAction('ethereum')} 
              className="wallet-connect-btn-compact ethereum-wallet-compact"
            >
              <div className="wallet-connect-icon-compact">ü¶Ñ</div>
              <div className="wallet-connect-label-compact">
                {isEthereumConnected ? '‚úì' : 'ETH'}
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
