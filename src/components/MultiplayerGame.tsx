'use client'
import React, { useEffect, useState } from 'react';
import { useWebSocket } from '@/hooks/useWebSocket';
import { useGameStore } from '@/store/gameStore';
import { useTelegram } from '@/hooks/useTelegram';
import { useTelegramShare } from '@/hooks/useTelegramShare';

interface MultiplayerGameProps {
  roomId: string;
  roomCode: string;
  isHost: boolean;
  onGameStateUpdate?: (gameState: any) => void;
}

export default function MultiplayerGame({ 
  roomId, 
  roomCode, 
  isHost, 
  onGameStateUpdate 
}: MultiplayerGameProps) {
  const { user } = useTelegram();
  const { inviteToGame, inviteFriend } = useTelegramShare();
  
  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const {
    isConnected,
    isConnecting,
    messages,
    onlineUsers,
    updateGameState,
    sendPlayerMove,
    inviteFriend: inviteFriendWS,
    sendChatMessage,
    setPlayerReady,
    startGame,
    endGame
  } = useWebSocket({
    userId: user?.id?.toString(),
    roomId,
    autoConnect: true
  });

  // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const { 
    isGameActive,
    gameStage,
    players,
    currentPlayerId,
    tableStack,
    gameCoins,
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    makeMove,
    selectHandCard,
    playSelectedCard,
    takeTableCards,
    nextTurn
  } = useGameStore();

  const [chatMessages, setChatMessages] = useState<any[]>([]);
  const [isReady, setIsReady] = useState(false);
  const [showInviteModal, setShowInviteModal] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    messages.forEach(message => {
      switch (message.type) {
        case 'game-state-sync':
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
          console.log('üîÑ [Multiplayer] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', message.data);
          if (onGameStateUpdate) {
            onGameStateUpdate(message.data);
          }
          break;

        case 'player-move-sync':
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
          console.log('üéØ [Multiplayer] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ö–æ–¥–∞:', message.data);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–æ–¥–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
          break;

        case 'friend-invitation':
          // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∞
          console.log('üíå [Multiplayer] –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∞:', message.data);
          if (message.data.friendId === user?.id?.toString()) {
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
            alert(`–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∏–≥—Ä—É! –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: ${message.data.roomCode}`);
          }
          break;

        case 'game-chat-message':
          // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
          setChatMessages(prev => [...prev, message.data]);
          break;

        case 'player-ready-sync':
          // –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
          console.log('‚úÖ [Multiplayer] –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞:', message.data);
          break;

        case 'game-started':
          // –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
          console.log('üöÄ [Multiplayer] –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:', message.data);
          break;

        case 'game-ended':
          // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
          console.log('üèÅ [Multiplayer] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', message.data);
          break;
      }
    });
  }, [messages, onGameStateUpdate, user?.id]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è —Ö–æ—Å—Ç–∞
  useEffect(() => {
    if (isHost && isConnected && isGameActive) {
      const gameState = {
        gameStage,
        players,
        currentPlayerId,
        tableStack,
        timestamp: Date.now()
      };
      updateGameState(gameState);
    }
  }, [isHost, isConnected, gameStage, players, currentPlayerId, tableStack, isGameActive]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞ —á–µ—Ä–µ–∑ WebSocket
  const handlePlayerMove = (moveData: any) => {
    console.log('üéØ [Multiplayer] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞:', moveData);
    sendPlayerMove({
      ...moveData,
      userId: user?.id?.toString(),
      timestamp: Date.now()
    });
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  const toggleReady = () => {
    const newReadyState = !isReady;
    setIsReady(newReadyState);
    setPlayerReady(newReadyState);
  };

  // –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞
  const handleInviteFriend = async (friendId: string) => {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      inviteFriendWS(friendId, roomCode);
      
      // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
      await inviteFriend(friendId);
      
      alert('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
    }
  };

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–º–Ω–∞—Ç–æ–π
  const handleShareRoom = async () => {
    try {
      const result = inviteToGame({ 
        roomCode,
        roomName: `P.I.D.R. –ò–≥—Ä–∞`,
        playerCount: onlineUsers.length,
        maxPlayers: 4
      });
      if (!result) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–º–Ω–∞—Ç–æ–π');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–µ–ª–∫–µ –∫–æ–º–Ω–∞—Ç–æ–π:', error);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
  const handleSendMessage = (text: string) => {
    if (text.trim()) {
      sendChatMessage(text);
    }
  };

  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–∞)
  const handleStartGame = () => {
    if (isHost) {
      const gameSettings = {
        playerCount: players.length,
        startTime: Date.now()
      };
      startGame(gameSettings);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-white">–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä</h2>
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-400' : isConnecting ? 'bg-yellow-400' : 'bg-red-400'}`}></div>
            <span className="text-sm text-gray-300">
              {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : isConnecting ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–û—Ç–∫–ª—é—á–µ–Ω'}
            </span>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ */}
        <div className="bg-gray-700 rounded p-3 mb-4">
          <div className="text-sm text-gray-300 mb-1">–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:</div>
          <div className="text-lg font-mono text-white">{roomCode}</div>
          <div className="text-sm text-gray-300 mt-2">
            –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: {onlineUsers.length}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="space-y-3 mb-4">
          {isHost && (
            <button
              onClick={handleStartGame}
              disabled={!isConnected || isGameActive}
              className="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white py-2 px-4 rounded"
            >
              –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
            </button>
          )}

          <button
            onClick={toggleReady}
            disabled={!isConnected}
            className={`w-full py-2 px-4 rounded text-white ${
              isReady 
                ? 'bg-green-600 hover:bg-green-700' 
                : 'bg-blue-600 hover:bg-blue-700'
            } disabled:bg-gray-600`}
          >
            {isReady ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è±Ô∏è –ù–µ –≥–æ—Ç–æ–≤'}
          </button>

          <button
            onClick={handleShareRoom}
            disabled={!isConnected}
            className="w-full bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white py-2 px-4 rounded"
          >
            üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–º–Ω–∞—Ç–æ–π
          </button>

          <button
            onClick={() => setShowInviteModal(true)}
            disabled={!isConnected}
            className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white py-2 px-4 rounded"
          >
            üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞
          </button>
        </div>

        {/* –ú–∏–Ω–∏-—á–∞—Ç */}
        <div className="bg-gray-700 rounded p-3 h-32 overflow-y-auto mb-3">
          <div className="text-xs text-gray-400 mb-2">–ß–∞—Ç –∏–≥—Ä—ã:</div>
          {chatMessages.length === 0 ? (
            <div className="text-xs text-gray-500 italic">–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç...</div>
          ) : (
            chatMessages.slice(-5).map((msg, index) => (
              <div key={index} className="text-xs text-white mb-1">
                <span className="text-blue-400">{msg.userId}:</span> {msg.text}
              </div>
            ))
          )}
        </div>

        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞ */}
        <div className="flex space-x-2">
          <input
            type="text"
            placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            className="flex-1 bg-gray-600 text-white px-3 py-2 rounded text-sm"
            onKeyPress={(e) => {
              if (e.key === 'Enter' && e.currentTarget.value.trim()) {
                handleSendMessage(e.currentTarget.value);
                e.currentTarget.value = '';
              }
            }}
          />
          <button 
            onClick={() => {
              const input = document.querySelector('input[placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."]') as HTMLInputElement;
              if (input?.value.trim()) {
                handleSendMessage(input.value);
                input.value = '';
              }
            }}
            className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm"
          >
            üí¨
          </button>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π */}
        {showInviteModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60">
            <div className="bg-gray-800 rounded-lg p-4 max-w-sm w-full mx-4">
              <h3 className="text-lg font-bold text-white mb-3">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞</h3>
              <p className="text-gray-300 text-sm mb-4">
                –í–≤–µ–¥–∏—Ç–µ ID –¥—Ä—É–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:
              </p>
              <input
                type="text"
                placeholder="ID –¥—Ä—É–≥–∞"
                className="w-full bg-gray-600 text-white px-3 py-2 rounded mb-3"
                id="friend-id-input"
              />
              <div className="flex space-x-2">
                <button
                  onClick={() => {
                    const input = document.getElementById('friend-id-input') as HTMLInputElement;
                    if (input?.value.trim()) {
                      handleInviteFriend(input.value.trim());
                      setShowInviteModal(false);
                    }
                  }}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
                <button
                  onClick={() => setShowInviteModal(false)}
                  className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
