'use client'

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';

const SUITS = [
  { value: 'hearts', label: '‚ô•', color: '#ef4444', symbol: '‚ô•' },
  { value: 'diamonds', label: '‚ô¶', color: '#ef4444', symbol: '‚ô¶' },
  { value: 'clubs', label: '‚ô£', color: '#1f2937', symbol: '‚ô£' },
  { value: 'spades', label: '‚ô†', color: '#000000', symbol: '‚ô†' }
];

const RANKS = [
  { value: '2', display: '2', cost: 1000 },
  { value: '3', display: '3', cost: 1000 },
  { value: '4', display: '4', cost: 1000 },
  { value: '5', display: '5', cost: 1000 },
  { value: '6', display: '6', cost: 1000 },
  { value: '7', display: '7', cost: 1000 },
  { value: '8', display: '8', cost: 1000 },
  { value: '9', display: '9', cost: 1000 },
  { value: '10', display: '10', cost: 2500 },
  { value: 'j', display: 'J', cost: 2500 },
  { value: 'q', display: 'Q', cost: 5000 },
  { value: 'k', display: 'K', cost: 5000 },
  { value: 'a', display: 'A', cost: 8000 }
];

// ‚úÖ –°–ò–°–¢–ï–ú–ê –¶–ï–ù–´: –†–∞–Ω–≥ + –ú–∞—Å—Ç—å
const SUIT_COSTS: Record<string, number> = {
  'hearts': 500,
  'diamonds': 500,
  'clubs': 500,
  'spades': 1000
};

interface NFTPokemonGeneratorProps {
  userCoins: number;
  onBalanceUpdate: (newBalance: number) => void;
}

export default function NFTPokemonGenerator({ userCoins, onBalanceUpdate }: NFTPokemonGeneratorProps) {
  const [selectedSuit, setSelectedSuit] = useState('hearts');
  const [selectedRank, setSelectedRank] = useState('a');
  const [isGenerating, setIsGenerating] = useState(false);
  const [userCards, setUserCards] = useState<any[]>([]);
  const [previewImage, setPreviewImage] = useState<string>('');

  // ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É: –†–∞–Ω–≥ + –ú–∞—Å—Ç—å
  const rankCost = RANKS.find(r => r.value === selectedRank)?.cost || 1000;
  const suitCost = SUIT_COSTS[selectedSuit] || 500;
  const currentCost = rankCost + suitCost;

  useEffect(() => {
    fetchUserCards();
  }, []);

  // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
  useEffect(() => {
    generatePreview();
  }, [selectedSuit, selectedRank]);

  const fetchUserCards = async () => {
    try {
      const telegramUser = typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
      const telegramId = telegramUser?.id?.toString() || '';
      const username = telegramUser?.username || telegramUser?.first_name || '';

      const response = await fetch('/api/nft/generate-pokemon', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'x-telegram-id': telegramId,
          'x-username': username
        }
      });
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setUserCards(data.cards || []);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç:', error);
    }
  };

  const generatePreview = () => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç—ã
    const canvas = document.createElement('canvas');
    canvas.width = 300;
    canvas.height = 420;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) return;

    // ‚úÖ –ë–ï–õ–´–ô –§–û–ù
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // ‚úÖ –†–ê–ú–ö–ê
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 3;
    ctx.strokeRect(5, 5, canvas.width - 10, canvas.height - 10);

    const suit = SUITS.find(s => s.value === selectedSuit);
    const rank = RANKS.find(r => r.value === selectedRank);

    if (!suit || !rank) return;

    // ‚úÖ –í–ï–†–•–ù–ò–ô –õ–ï–í–´–ô –£–ì–û–õ (–†–∞–Ω–≥ + –ú–∞—Å—Ç—å)
    ctx.fillStyle = suit.color;
    ctx.font = 'bold 40px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(rank.display, 20, 50);
    
    ctx.font = '50px Arial';
    ctx.fillText(suit.symbol, 20, 100);

    // ‚úÖ –ù–ò–ñ–ù–ò–ô –ü–†–ê–í–´–ô –£–ì–û–õ (–†–∞–Ω–≥ + –ú–∞—Å—Ç—å - –ü–ï–†–ï–í–Å–†–ù–£–¢–û)
    ctx.save();
    ctx.translate(canvas.width, canvas.height);
    ctx.rotate(Math.PI);
    
    ctx.fillStyle = suit.color;
    ctx.font = 'bold 40px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(rank.display, 20, 50);
    
    ctx.font = '50px Arial';
    ctx.fillText(suit.symbol, 20, 100);
    ctx.restore();

    // ‚úÖ –ü–†–ï–í–¨–Æ –ü–†–û–°–¢–û–ô –ö–ê–†–¢–´ - –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –°–ò–ú–í–û–õ –ú–ê–°–¢–ò
    ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
    ctx.shadowBlur = 10;
    ctx.fillStyle = 'rgba(100, 116, 139, 0.2)';
    ctx.font = 'bold 140px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(suit.symbol, canvas.width / 2, canvas.height / 2);
    
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;

    setPreviewImage(canvas.toDataURL('image/png'));
  };

  // üé® –ü–ê–õ–ò–¢–†–ê –ò–ó 60 –ö–†–ê–°–ò–í–´–• –ì–†–ê–î–ò–ï–ù–¢–û–í (–±–µ–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ –∏ —á–µ—Ä–Ω–æ–≥–æ)
  const GRADIENT_COLORS = [
    // –°–ò–ù–ò–ï
    ['#3b82f6', '#1d4ed8'], ['#60a5fa', '#2563eb'], ['#38bdf8', '#0284c7'], ['#06b6d4', '#0891b2'],
    // –§–ò–û–õ–ï–¢–û–í–´–ï
    ['#8b5cf6', '#6366f1'], ['#a78bfa', '#7c3aed'], ['#c084fc', '#9333ea'], ['#d946ef', '#a21caf'],
    // –ó–ï–õ–ï–ù–´–ï
    ['#22c55e', '#16a34a'], ['#4ade80', '#22c55e'], ['#34d399', '#10b981'], ['#2dd4bf', '#14b8a6'],
    // –ñ–ï–õ–¢–´–ï/–ó–û–õ–û–¢–´–ï
    ['#fbbf24', '#f59e0b'], ['#fcd34d', '#fbbf24'], ['#fde047', '#facc15'], ['#fef08a', '#fde047'],
    // –û–†–ê–ù–ñ–ï–í–´–ï
    ['#fb923c', '#f97316'], ['#fdba74', '#fb923c'], ['#fed7aa', '#fdba74'], ['#ffedd5', '#fed7aa'],
    // –†–û–ó–û–í–´–ï
    ['#ec4899', '#db2777'], ['#f472b6', '#ec4899'], ['#f9a8d4', '#f472b6'], ['#fbcfe8', '#f9a8d4'],
    // –ë–ò–†–Æ–ó–û–í–´–ï
    ['#06b6d4', '#0891b2'], ['#22d3ee', '#06b6d4'], ['#67e8f9', '#22d3ee'], ['#a5f3fc', '#67e8f9'],
    // –ò–ù–î–ò–ì–û
    ['#6366f1', '#4f46e5'], ['#818cf8', '#6366f1'], ['#a5b4fc', '#818cf8'], ['#c7d2fe', '#a5b4fc'],
    // –ò–ó–£–ú–†–£–î–ù–´–ï
    ['#10b981', '#059669'], ['#34d399', '#10b981'], ['#6ee7b7', '#34d399'], ['#a7f3d0', '#6ee7b7'],
    // –õ–ê–ô–ú–û–í–´–ï
    ['#84cc16', '#65a30d'], ['#a3e635', '#84cc16'], ['#bef264', '#a3e635'], ['#d9f99d', '#bef264'],
    // –Ø–ù–¢–ê–†–ù–´–ï
    ['#f59e0b', '#d97706'], ['#fbbf24', '#f59e0b'], ['#fcd34d', '#fbbf24'], ['#fde68a', '#fcd34d'],
    // –ü–£–†–ü–£–†–ù–´–ï
    ['#a855f7', '#9333ea'], ['#c084fc', '#a855f7'], ['#d8b4fe', '#c084fc'], ['#e9d5ff', '#d8b4fe'],
    // –ì–û–õ–£–ë–´–ï
    ['#0ea5e9', '#0284c7'], ['#38bdf8', '#0ea5e9'], ['#7dd3fc', '#38bdf8'], ['#bae6fd', '#7dd3fc'],
    // –ú–Ø–¢–ù–´–ï
    ['#14b8a6', '#0d9488'], ['#2dd4bf', '#14b8a6'], ['#5eead4', '#2dd4bf'], ['#99f6e4', '#5eead4'],
    // –°–ï–†–´–ï (—Å–≤–µ—Ç–ª—ã–µ)
    ['#94a3b8', '#64748b'], ['#cbd5e1', '#94a3b8'], ['#e2e8f0', '#cbd5e1'], ['#f1f5f9', '#e2e8f0']
  ];

  // üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–û–°–¢–û–ô –ö–ê–†–¢–´ –° –ì–†–ê–î–ò–ï–ù–¢–û–ú (–ë–ï–ó –ü–û–ö–ï–ú–û–ù–ê)
  const generateSimpleCardImage = (suit: string, rank: string): string => {
    const canvas = document.createElement('canvas');
    canvas.width = 300;
    canvas.height = 420;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) return '';

    const suitData = SUITS.find(s => s.value === suit);
    const rankData = RANKS.find(r => r.value === rank);

    if (!suitData || !rankData) return '';

    // ‚úÖ –†–ê–ù–î–û–ú–ù–´–ô –ì–†–ê–î–ò–ï–ù–¢
    const randomGradient = GRADIENT_COLORS[Math.floor(Math.random() * GRADIENT_COLORS.length)];
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, randomGradient[0]);
    gradient.addColorStop(1, randomGradient[1]);

    // ‚úÖ –§–û–ù –° –ì–†–ê–î–ò–ï–ù–¢–û–ú
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // ‚úÖ –ë–ï–õ–ê–Ø –†–ê–ú–ö–ê
    ctx.strokeStyle = '#ffffff';
    ctx.lineWidth = 4;
    ctx.strokeRect(8, 8, canvas.width - 16, canvas.height - 16);

    // ‚úÖ –¢–ï–ù–¨ –î–õ–Ø –¢–ï–ö–°–¢–ê
    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
    ctx.shadowBlur = 8;
    ctx.shadowOffsetX = 2;
    ctx.shadowOffsetY = 2;

    // ‚úÖ –í–ï–†–•–ù–ò–ô –õ–ï–í–´–ô –£–ì–û–õ
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 48px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(rankData.display, 25, 60);
    
    ctx.font = '60px Arial';
    ctx.fillText(suitData.symbol, 25, 125);

    // ‚úÖ –ù–ò–ñ–ù–ò–ô –ü–†–ê–í–´–ô –£–ì–û–õ (–ü–ï–†–ï–í–Å–†–ù–£–¢–û)
    ctx.save();
    ctx.translate(canvas.width, canvas.height);
    ctx.rotate(Math.PI);
    
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 48px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(rankData.display, 25, 60);
    
    ctx.font = '60px Arial';
    ctx.fillText(suitData.symbol, 25, 125);
    ctx.restore();

    // ‚úÖ –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –°–ò–ú–í–û–õ –ú–ê–°–¢–ò (–ü–û–õ–£–ü–†–û–ó–†–ê–ß–ù–´–ô, –ë–û–õ–¨–®–û–ô)
    ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
    ctx.font = 'bold 120px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(suitData.symbol, canvas.width / 2, canvas.height / 2);

    // –°–±—Ä–æ—Å —Ç–µ–Ω–µ–π
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;

    return canvas.toDataURL('image/png');
  };

  // ‚ö° –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–†–¢–´ –° –ü–û–ö–ï–ú–û–ù–û–ú (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏)
  const generatePokemonCardImage = (suit: string, rank: string, pokemonId: number) => {
    const canvas = document.createElement('canvas');
    canvas.width = 300;
    canvas.height = 420;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) return '';

    // ‚úÖ –ë–ï–õ–´–ô –§–û–ù
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // ‚úÖ –†–ê–ú–ö–ê
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 3;
    ctx.strokeRect(5, 5, canvas.width - 10, canvas.height - 10);

    const suitData = SUITS.find(s => s.value === suit);
    const rankData = RANKS.find(r => r.value === rank);

    if (!suitData || !rankData) return '';

    // ‚úÖ –í–ï–†–•–ù–ò–ô –õ–ï–í–´–ô –£–ì–û–õ (–†–∞–Ω–≥ + –ú–∞—Å—Ç—å)
    ctx.fillStyle = suitData.color;
    ctx.font = 'bold 40px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(rankData.display, 20, 50);
    
    ctx.font = '50px Arial';
    ctx.fillText(suitData.symbol, 20, 100);

    // ‚úÖ –ù–ò–ñ–ù–ò–ô –ü–†–ê–í–´–ô –£–ì–û–õ (–†–∞–Ω–≥ + –ú–∞—Å—Ç—å - –ü–ï–†–ï–í–Å–†–ù–£–¢–û)
    ctx.save();
    ctx.translate(canvas.width, canvas.height);
    ctx.rotate(Math.PI);
    
    ctx.fillStyle = suitData.color;
    ctx.font = 'bold 40px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(rankData.display, 20, 50);
    
    ctx.font = '50px Arial';
    ctx.fillText(suitData.symbol, 20, 100);
    ctx.restore();

    // ‚úÖ –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–û–ö–ï–ú–û–ù–ê
    return new Promise<string>((resolve) => {
      const pokemonImg = new Image();
      pokemonImg.crossOrigin = 'anonymous';
      pokemonImg.onload = () => {
        const imgWidth = 200;
        const imgHeight = 200;
        const imgX = (canvas.width - imgWidth) / 2;
        const imgY = (canvas.height - imgHeight) / 2;

        ctx.fillStyle = '#ffffff';
        ctx.fillRect(imgX - 5, imgY - 5, imgWidth + 10, imgHeight + 10);
        ctx.drawImage(pokemonImg, imgX, imgY, imgWidth, imgHeight);

        resolve(canvas.toDataURL('image/png'));
      };
      pokemonImg.onerror = () => {
        ctx.fillStyle = '#e5e7eb';
        ctx.fillRect(50, 110, 200, 200);
        ctx.fillStyle = '#9ca3af';
        ctx.font = 'bold 24px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(`–ü–û–ö–ï–ú–û–ù #${pokemonId}`, canvas.width / 2, canvas.height / 2);
        resolve(canvas.toDataURL('image/png'));
      };
      pokemonImg.src = `/pokemon/${pokemonId}.png`;
    });
  };

  const handleGenerateSingle = async () => {
    if (userCoins < currentCost) {
      alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${currentCost.toLocaleString()}\n–£ –≤–∞—Å: ${userCoins.toLocaleString()}`);
      return;
    }

    try {
      setIsGenerating(true);
      console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–†–û–°–¢–û–ô NFT –∫–∞—Ä—Ç—ã –° –ì–†–ê–î–ò–ï–ù–¢–û–ú (–ë–ï–ó –ø–æ–∫–µ–º–æ–Ω–∞)...');

      const telegramUser = typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
      const telegramId = telegramUser?.id?.toString() || '';
      const username = telegramUser?.username || telegramUser?.first_name || '';

      // ‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–û–°–¢–û–ô –ö–ê–†–¢–´ –° –ì–†–ê–î–ò–ï–ù–¢–û–ú (–ë–ï–ó –ü–û–ö–ï–ú–û–ù–ê!)
      const imageDataUrl = generateSimpleCardImage(selectedSuit, selectedRank);

      console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

      const response = await fetch('/api/nft/generate-pokemon', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-id': telegramId,
          'x-username': username
        },
        body: JSON.stringify({
          action: 'simple',
          suit: selectedSuit,
          rank: selectedRank,
          rankCost,
          suitCost,
          totalCost: currentCost,
          pokemonId: null, // ‚úÖ –ù–ï–¢ –ü–û–ö–ï–ú–û–ù–ê!
          imageData: imageDataUrl
        })
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT');
      }

      console.log('‚úÖ NFT –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (result.newBalance !== undefined) {
        onBalanceUpdate(result.newBalance);
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç
      await fetchUserCards();

      alert(`‚úÖ NFT –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n${RANKS.find(r => r.value === selectedRank)?.display} ${SUITS.find(s => s.value === selectedSuit)?.label}\n\n–°–ø–∏—Å–∫–∞–Ω–æ: ${currentCost.toLocaleString()} –º–æ–Ω–µ—Ç\n–û—Å—Ç–∞—Ç–æ–∫: ${result.newBalance?.toLocaleString()} –º–æ–Ω–µ—Ç`);

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT:\n${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateRandom = async () => {
    const randomSuit = SUITS[Math.floor(Math.random() * SUITS.length)].value;
    const randomRank = RANKS[Math.floor(Math.random() * RANKS.length)].value;
    
    setSelectedSuit(randomSuit);
    setSelectedRank(randomRank);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    setTimeout(() => {
      handleGenerateSingle();
    }, 300);
  };

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –ø–æ–∫–µ–º–æ–Ω–æ–º –∑–∞ 10000 –º–æ–Ω–µ—Ç
  const handleRandomPokemon = async () => {
    const cost = 10000;
    
    if (userCoins < cost) {
      alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${cost.toLocaleString()}\n–£ –≤–∞—Å: ${userCoins.toLocaleString()}`);
      return;
    }

    const randomSuit = SUITS[Math.floor(Math.random() * SUITS.length)].value;
    const randomRank = RANKS[Math.floor(Math.random() * RANKS.length)].value;
    
    setSelectedSuit(randomSuit);
    setSelectedRank(randomRank);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É 10000
    try {
      setIsGenerating(true);
      console.log('üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –†–ê–ù–î–û–ú–ù–û–ô –∫–∞—Ä—Ç—ã —Å –ø–æ–∫–µ–º–æ–Ω–æ–º –∑–∞ 10000 –º–æ–Ω–µ—Ç...');

      const telegramUser = typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
      const telegramId = telegramUser?.id?.toString() || '';
      const username = telegramUser?.username || telegramUser?.first_name || '';

      const randomPokemonId = Math.floor(Math.random() * 52) + 1;
      console.log(`üé≤ –í—ã–±—Ä–∞–Ω –ø–æ–∫–µ–º–æ–Ω #${randomPokemonId}`);

      const imageDataUrl = await generatePokemonCardImage(randomSuit, randomRank, randomPokemonId);

      const response = await fetch('/api/nft/generate-pokemon', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-id': telegramId,
          'x-username': username
        },
        body: JSON.stringify({
          action: 'random',
          suit: randomSuit,
          rank: randomRank,
          rankCost: 0,
          suitCost: 0,
          totalCost: cost,
          pokemonId: randomPokemonId,
          imageData: imageDataUrl
        })
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT');
      }

      if (result.newBalance !== undefined) {
        onBalanceUpdate(result.newBalance);
      }

      await fetchUserCards();

      alert(`üé≤ –†–ê–ù–î–û–ú–ù–ê–Ø –ü–û–ö–ï–ú–û–ù –ö–ê–†–¢–ê!\n\n${RANKS.find(r => r.value === randomRank)?.display} ${SUITS.find(s => s.value === randomSuit)?.label}\n–ü–æ–∫–µ–º–æ–Ω #${randomPokemonId}\n\n–°–ø–∏—Å–∫–∞–Ω–æ: ${cost.toLocaleString()} –º–æ–Ω–µ—Ç\n–û—Å—Ç–∞—Ç–æ–∫: ${result.newBalance?.toLocaleString()} –º–æ–Ω–µ—Ç`);

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª–Ω–∞—è –∫–æ–ª–æ–¥–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ (52 –∫–∞—Ä—Ç—ã) –∑–∞ 400000 –º–æ–Ω–µ—Ç
  const handleFullDeck = async () => {
    const cost = 400000;
    
    if (userCoins < cost) {
      alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n\n–ù—É–∂–Ω–æ: ${cost.toLocaleString()}\n–£ –≤–∞—Å: ${userCoins.toLocaleString()}`);
      return;
    }

    const confirmed = confirm(`üé¥ –°–û–ó–î–ê–¢–¨ –ü–û–õ–ù–£–Æ –ö–û–õ–û–î–£?\n\n52 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å –ø–æ–∫–µ–º–æ–Ω–∞–º–∏\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost.toLocaleString()} –º–æ–Ω–µ—Ç\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç ~1-2 –º–∏–Ω—É—Ç—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`);
    
    if (!confirmed) return;

    setIsGenerating(true);

    try {
      const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id?.toString() || '';
      const username = window.Telegram?.WebApp?.initDataUnsafe?.user?.username || 'User';

      if (!telegramId) {
        throw new Error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      let generatedCount = 0;
      const totalCards = 52;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      alert(`‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ${totalCards} –∫–∞—Ä—Ç...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É!`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ 52 –∫–∞—Ä—Ç—ã (–≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –º–∞—Å—Ç–µ–π –∏ —Ä–∞–Ω–≥–æ–≤)
      for (const suit of SUITS) {
        for (const rank of RANKS) {
          const randomPokemonId = Math.floor(Math.random() * 52) + 1;
          
          try {
            const imageDataUrl = await generatePokemonCardImage(suit.value, rank.value, randomPokemonId);

            const response = await fetch('/api/nft/generate-pokemon', {
              method: 'POST',
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json',
                'x-telegram-id': telegramId,
                'x-username': username
              },
              body: JSON.stringify({
                action: 'deck',
                suit: suit.value,
                rank: rank.value,
                rankCost: 0,
                suitCost: 0,
                totalCost: 0, // –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–æ–Ω—Ü–µ
                pokemonId: randomPokemonId,
                imageData: imageDataUrl
              })
            });

            const result = await response.json();

            if (response.ok && result.success) {
              generatedCount++;
              console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ ${generatedCount}/${totalCards}: ${rank.display}${suit.label}`);
            } else {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: ${rank.display}${suit.label}`, result.error);
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            await new Promise(resolve => setTimeout(resolve, 100));

          } catch (cardError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã ${rank.display}${suit.label}:`, cardError);
          }
        }
      }

      // –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç —Å–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
      const deductResponse = await fetch('/api/user/add-coins', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-id': telegramId,
          'x-username': username
        },
        body: JSON.stringify({
          amount: -cost,
          reason: `–ü–æ–∫—É–ø–∫–∞ –ø–æ–ª–Ω–æ–π –∫–æ–ª–æ–¥—ã –ü–æ–∫–µ–º–æ–Ω–æ–≤ (${generatedCount} –∫–∞—Ä—Ç)`
        })
      });

      const deductResult = await deductResponse.json();

      if (!deductResponse.ok || !deductResult.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –º–æ–Ω–µ—Ç—ã');
      }

      if (deductResult.newBalance !== undefined) {
        onBalanceUpdate(deductResult.newBalance);
      }

      await fetchUserCards();

      alert(`üéâ –ö–û–õ–û–î–ê –°–û–ó–î–ê–ù–ê!\n\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ä—Ç: ${generatedCount}/${totalCards}\nüí∞ –°–ø–∏—Å–∞–Ω–æ: ${cost.toLocaleString()} –º–æ–Ω–µ—Ç\nüíé –û—Å—Ç–∞—Ç–æ–∫: ${deductResult.newBalance?.toLocaleString()} –º–æ–Ω–µ—Ç\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!`);

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–¥—ã:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã: ${error.message}\n\n–ú–æ–Ω–µ—Ç—ã –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã.`);
    } finally {
      setIsGenerating(false);
    }
  };

  // –£–î–ê–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: handleRandomNaruto (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞)
  const handleRandomNaruto_REMOVED = async () => {
    const cost = 10000;
    
    if (userCoins < cost) {
      alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${cost.toLocaleString()}\n–£ –≤–∞—Å: ${userCoins.toLocaleString()}`);
      return;
    }

    const randomSuit = SUITS[Math.floor(Math.random() * SUITS.length)].value;
    const randomRank = RANKS[Math.floor(Math.random() * RANKS.length)].value;
    
    setSelectedSuit(randomSuit);
    setSelectedRank(randomRank);
    
    try {
      setIsGenerating(true);
      console.log('üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –†–ê–ù–î–û–ú–ù–û–ô –∫–∞—Ä—Ç—ã —Å –≥–µ—Ä–æ–µ–º –ù–∞—Ä—É—Ç–æ –∑–∞ 10000 –º–æ–Ω–µ—Ç...');

      const telegramUser = typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
      const telegramId = telegramUser?.id?.toString() || '';
      const username = telegramUser?.username || telegramUser?.first_name || '';

      const randomNarutoId = Math.floor(Math.random() * 52) + 1;
      console.log(`üé≤ –í—ã–±—Ä–∞–Ω –≥–µ—Ä–æ–π –ù–∞—Ä—É—Ç–æ #${randomNarutoId}`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å –ù–∞—Ä—É—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º /naruto/ –≤–º–µ—Å—Ç–æ /pokemon/)
      const canvas = document.createElement('canvas');
      canvas.width = 300;
      canvas.height = 420;
      const ctx = canvas.getContext('2d');
      
      if (!ctx) throw new Error('Canvas –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');

      // –ë–µ–ª—ã–π —Ñ–æ–Ω
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // –†–∞–º–∫–∞
      ctx.strokeStyle = '#000000';
      ctx.lineWidth = 3;
      ctx.strokeRect(5, 5, canvas.width - 10, canvas.height - 10);

      const suitData = SUITS.find(s => s.value === randomSuit);
      const rankData = RANKS.find(r => r.value === randomRank);

      if (!suitData || !rankData) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã');

      // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
      ctx.fillStyle = suitData.color;
      ctx.font = 'bold 40px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(rankData.display, 20, 50);
      ctx.font = '50px Arial';
      ctx.fillText(suitData.symbol, 20, 100);

      // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ)
      ctx.save();
      ctx.translate(canvas.width, canvas.height);
      ctx.rotate(Math.PI);
      ctx.fillStyle = suitData.color;
      ctx.font = 'bold 40px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(rankData.display, 20, 50);
      ctx.font = '50px Arial';
      ctx.fillText(suitData.symbol, 20, 100);
      ctx.restore();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–µ—Ä–æ—è –ù–∞—Ä—É—Ç–æ
      const imageDataUrl = await new Promise<string>((resolve) => {
        const narutoImg = new Image();
        narutoImg.crossOrigin = 'anonymous';
        narutoImg.onload = () => {
          const imgWidth = 200;
          const imgHeight = 200;
          const imgX = (canvas.width - imgWidth) / 2;
          const imgY = (canvas.height - imgHeight) / 2;

          ctx.fillStyle = '#ffffff';
          ctx.fillRect(imgX - 5, imgY - 5, imgWidth + 10, imgHeight + 10);
          ctx.drawImage(narutoImg, imgX, imgY, imgWidth, imgHeight);

          resolve(canvas.toDataURL('image/png'));
        };
        narutoImg.onerror = () => {
          ctx.fillStyle = '#e5e7eb';
          ctx.fillRect(50, 110, 200, 200);
          ctx.fillStyle = '#9ca3af';
          ctx.font = 'bold 24px Arial';
          ctx.textAlign = 'center';
          ctx.fillText(`–ù–ê–†–£–¢–û #${randomNarutoId}`, canvas.width / 2, canvas.height / 2);
          resolve(canvas.toDataURL('image/png'));
        };
        narutoImg.src = `/naruto/${randomNarutoId}.svg`;
      });

      const response = await fetch('/api/nft/generate-pokemon', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-id': telegramId,
          'x-username': username
        },
        body: JSON.stringify({
          action: 'random_naruto',
          suit: randomSuit,
          rank: randomRank,
          rankCost: 0,
          suitCost: 0,
          totalCost: cost,
          pokemonId: randomNarutoId, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –ø–æ–ª–µ –¥–ª—è ID –≥–µ—Ä–æ—è
          imageData: imageDataUrl
        })
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NFT');
      }

      if (result.newBalance !== undefined) {
        onBalanceUpdate(result.newBalance);
      }

      await fetchUserCards();

      alert(`üç• –†–ê–ù–î–û–ú–ù–ê–Ø –ù–ê–†–£–¢–û –ö–ê–†–¢–ê!\n\n${RANKS.find(r => r.value === randomRank)?.display} ${SUITS.find(s => s.value === randomSuit)?.label}\n–ì–µ—Ä–æ–π –ù–∞—Ä—É—Ç–æ #${randomNarutoId}\n\n–°–ø–∏—Å–∫–∞–Ω–æ: ${cost.toLocaleString()} –º–æ–Ω–µ—Ç\n–û—Å—Ç–∞—Ç–æ–∫: ${result.newBalance?.toLocaleString()} –º–æ–Ω–µ—Ç`);

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div style={{
      background: 'linear-gradient(135deg, rgba(30, 41, 59, 0.95) 0%, rgba(15, 23, 42, 0.95) 100%)',
      borderRadius: '16px',
      padding: '20px',
      color: '#e2e8f0'
    }}>
      <h3 style={{
        fontSize: '1.2rem',
        fontWeight: '700',
        marginBottom: '20px',
        textAlign: 'center'
      }}>
        üé¥ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä NFT –∫–∞—Ä—Ç —Å –ü–û–ö–ï–ú–û–ù–ê–ú–ò
      </h3>

      {/* –ü–†–ï–í–¨–Æ –ö–ê–†–¢–´ */}
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        marginBottom: '20px'
      }}>
        <div style={{
          width: '200px',
          height: '280px',
          background: '#ffffff',
          borderRadius: '16px',
          border: '3px solid #000000',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          overflow: 'hidden',
          boxShadow: '0 10px 40px rgba(0, 0, 0, 0.5)'
        }}>
          {previewImage && (
            <img 
              src={previewImage} 
              alt={`${selectedRank} of ${selectedSuit}`}
              style={{
                width: '100%',
                height: '100%',
                objectFit: 'cover'
              }}
            />
          )}
        </div>
      </div>

      {/* –í–´–ë–û–† –ú–ê–°–¢–ò */}
      <div style={{ marginBottom: '20px' }}>
        <h4 style={{ fontSize: '0.9rem', marginBottom: '10px', color: '#94a3b8' }}>–ú–∞—Å—Ç—å ({suitCost.toLocaleString()} –º–æ–Ω–µ—Ç)</h4>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '10px' }}>
          {SUITS.map((suit) => (
            <motion.button
              key={suit.value}
              onClick={() => setSelectedSuit(suit.value)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              style={{
                padding: '15px',
                borderRadius: '12px',
                border: selectedSuit === suit.value ? '2px solid #10b981' : '1px solid rgba(255, 255, 255, 0.1)',
                background: selectedSuit === suit.value ? 'rgba(16, 185, 129, 0.2)' : 'rgba(55, 65, 81, 0.6)',
                cursor: 'pointer',
                fontSize: '24px',
                color: suit.color,
                transition: 'all 0.3s ease'
              }}
            >
              {suit.symbol}
            </motion.button>
          ))}
        </div>
      </div>

      {/* –í–´–ë–û–† –†–ê–ù–ì–ê */}
      <div style={{ marginBottom: '20px' }}>
        <h4 style={{ fontSize: '0.9rem', marginBottom: '10px', color: '#94a3b8' }}>–†–∞–Ω–≥ ({rankCost.toLocaleString()} –º–æ–Ω–µ—Ç)</h4>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(6, 1fr)', gap: '8px' }}>
          {RANKS.map((rank) => (
            <motion.button
              key={rank.value}
              onClick={() => setSelectedRank(rank.value)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              style={{
                padding: '10px',
                borderRadius: '8px',
                border: selectedRank === rank.value ? '2px solid #10b981' : '1px solid rgba(255, 255, 255, 0.1)',
                background: selectedRank === rank.value ? 'rgba(16, 185, 129, 0.2)' : 'rgba(55, 65, 81, 0.6)',
                cursor: 'pointer',
                fontSize: '16px',
                fontWeight: '600',
                color: '#e2e8f0',
                transition: 'all 0.3s ease'
              }}
            >
              {rank.display}
            </motion.button>
          ))}
        </div>
      </div>

      {/* –¶–ï–ù–ê */}
      <div style={{
        background: 'rgba(251, 191, 36, 0.1)',
        border: '1px solid rgba(251, 191, 36, 0.3)',
        borderRadius: '12px',
        padding: '16px',
        marginBottom: '20px',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '0.9rem', color: '#94a3b8', marginBottom: '5px' }}>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</div>
        <div style={{ fontSize: '1.5rem', fontWeight: '700', color: '#fbbf24' }}>
          üí∞ {currentCost.toLocaleString()} –º–æ–Ω–µ—Ç
        </div>
        <div style={{ fontSize: '0.8rem', color: '#94a3b8', marginTop: '5px' }}>
          –£ –≤–∞—Å: {userCoins.toLocaleString()} –º–æ–Ω–µ—Ç
        </div>
        <div style={{ fontSize: '0.75rem', color: '#10b981', marginTop: '8px', fontWeight: '600' }}>
          üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–∫–µ–º–æ–Ω –∏–∑ 52 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!
        </div>
      </div>

      {/* –ö–ù–û–ü–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–ê–†–¢–´ */}
      <motion.button
        onClick={handleGenerateSingle}
        disabled={isGenerating || userCoins < currentCost}
        whileHover={userCoins >= currentCost && !isGenerating ? { scale: 1.02 } : {}}
        whileTap={userCoins >= currentCost && !isGenerating ? { scale: 0.98 } : {}}
        style={{
          width: '100%',
          padding: '16px',
          borderRadius: '12px',
          border: 'none',
          background: userCoins >= currentCost && !isGenerating
            ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
            : 'rgba(55, 65, 81, 0.6)',
          color: '#fff',
          fontSize: '1rem',
          fontWeight: '700',
          cursor: userCoins >= currentCost && !isGenerating ? 'pointer' : 'not-allowed',
          opacity: userCoins >= currentCost && !isGenerating ? 1 : 0.6,
          transition: 'all 0.3s ease',
          marginBottom: '16px'
        }}
      >
        {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É'}
      </motion.button>

      {/* –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò */}
      <div style={{ 
        background: 'rgba(251, 191, 36, 0.05)',
        border: '2px solid rgba(251, 191, 36, 0.2)',
        borderRadius: '16px',
        padding: '16px',
        marginBottom: '20px'
      }}>
        <h4 style={{ 
          fontSize: '0.9rem', 
          color: '#fbbf24', 
          marginBottom: '12px', 
          textAlign: 'center',
          fontWeight: '700'
        }}>
          ‚≠ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø ‚≠ê
        </h4>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
          {/* –†–ê–ù–î–û–ú–ù–ê–Ø –ü–û–ö–ï–ú–û–ù –ö–ê–†–¢–ê - 10–ö */}
          <motion.button
            onClick={handleRandomPokemon}
            disabled={isGenerating || userCoins < 10000}
            whileHover={userCoins >= 10000 && !isGenerating ? { scale: 1.02 } : {}}
            whileTap={userCoins >= 10000 && !isGenerating ? { scale: 0.98 } : {}}
            style={{
              padding: '16px',
              borderRadius: '12px',
              border: 'none',
              background: userCoins >= 10000 && !isGenerating
                ? 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)'
                : 'rgba(55, 65, 81, 0.6)',
              color: '#fff',
              fontSize: '0.9rem',
              fontWeight: '700',
              cursor: userCoins >= 10000 && !isGenerating ? 'pointer' : 'not-allowed',
              opacity: userCoins >= 10000 && !isGenerating ? 1 : 0.6,
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '6px'
            }}
          >
            <div style={{ fontSize: '1.5rem' }}>‚ö°</div>
            <div>–†–ê–ù–î–û–ú–ù–ê–Ø –ü–û–ö–ï–ú–û–ù –ö–ê–†–¢–ê</div>
            <div style={{ fontSize: '0.75rem', opacity: 0.9 }}>üí∞ 10 000 –º–æ–Ω–µ—Ç</div>
          </motion.button>

          {/* –ü–û–õ–ù–ê–Ø –ö–û–õ–û–î–ê –ü–û–ö–ï–ú–û–ù–û–í - 400–ö */}
          <motion.button
            onClick={handleFullDeck}
            disabled={isGenerating || userCoins < 400000}
            whileHover={userCoins >= 400000 && !isGenerating ? { scale: 1.02 } : {}}
            whileTap={userCoins >= 400000 && !isGenerating ? { scale: 0.98 } : {}}
            style={{
              padding: '20px',
              borderRadius: '12px',
              border: 'none',
              background: userCoins >= 400000 && !isGenerating
                ? 'linear-gradient(135deg, #8b5cf6 0%, #6366f1 50%, #3b82f6 100%)'
                : 'rgba(55, 65, 81, 0.6)',
              color: '#fff',
              fontSize: '0.95rem',
              fontWeight: '700',
              cursor: userCoins >= 400000 && !isGenerating ? 'pointer' : 'not-allowed',
              opacity: userCoins >= 400000 && !isGenerating ? 1 : 0.6,
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '8px',
              boxShadow: userCoins >= 400000 && !isGenerating 
                ? '0 8px 32px rgba(139, 92, 246, 0.4)' 
                : 'none'
            }}
          >
            <div style={{ fontSize: '2rem' }}>üé¥‚ú®</div>
            <div>–ü–û–õ–ù–ê–Ø –ö–û–õ–û–î–ê –ü–û–ö–ï–ú–û–ù–û–í</div>
            <div style={{ fontSize: '0.85rem', opacity: 0.95 }}>52 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã</div>
            <div style={{ fontSize: '0.85rem', fontWeight: '900', color: '#fbbf24' }}>üíé 400 000 –º–æ–Ω–µ—Ç</div>
          </motion.button>
        </div>
      </div>

    </div>
  );
}

