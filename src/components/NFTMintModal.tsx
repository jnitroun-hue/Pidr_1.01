'use client'

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaDice, FaPaintBrush, FaTimes, FaUpload } from 'react-icons/fa';
import { useTonAddress, useTonConnectUI } from '@tonconnect/ui-react';
import { toNano } from 'ton-core';
import styles from './NFTMintModal.module.css';

interface NFTMintModalProps {
  onClose: () => void;
  onSuccess: () => void;
}

export default function NFTMintModal({ onClose, onSuccess }: NFTMintModalProps) {
  const userAddress = useTonAddress();
  const [tonConnectUI] = useTonConnectUI();
  
  const [mintType, setMintType] = useState<'random' | 'custom' | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  
  // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [selectedRank, setSelectedRank] = useState('A');
  const [selectedSuit, setSelectedSuit] = useState('spades');
  const [customStyle, setCustomStyle] = useState('classic');
  const [customImageUrl, setCustomImageUrl] = useState('');
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [randomCard, setRandomCard] = useState<any>(null);

  const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
  const suits = [
    { value: 'spades', label: '‚ô† –ü–∏–∫–∏', emoji: '‚ô†Ô∏è' },
    { value: 'hearts', label: '‚ô• –ß–µ—Ä–≤—ã', emoji: '‚ô•Ô∏è' },
    { value: 'diamonds', label: '‚ô¶ –ë—É–±–Ω—ã', emoji: '‚ô¶Ô∏è' },
    { value: 'clubs', label: '‚ô£ –¢—Ä–µ—Ñ—ã', emoji: '‚ô£Ô∏è' }
  ];
  const styles_list = ['classic', 'modern', 'neon', 'vintage', 'gold'];

  const handleRandomMint = async () => {
    if (!userAddress) {
      alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫!');
      return;
    }

    setIsProcessing(true);
    try {
      // 1. –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç—É
      const response = await fetch('/api/nft/mint-random', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ wallet_address: userAddress })
      });

      const result = await response.json();
      if (!result.success) {
        alert(result.message);
        setIsProcessing(false);
        return;
      }

      setRandomCard(result.card);
      
      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ TON Connect
      const masterWallet = result.master_wallet_address;
      const amount = result.mint_price_ton;

      const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 600,
        messages: [
          {
            address: masterWallet,
            amount: toNano(amount).toString(),
            payload: '' // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          }
        ]
      };

      const txResult = await tonConnectUI.sendTransaction(transaction);
      
      // 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–∏–Ω—Ç
      const confirmResponse = await fetch('/api/nft/mint', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          mint_id: result.mint_id,
          nft_address: `nft_${Date.now()}`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
          transaction_hash: txResult.boc
        })
      });

      const confirmResult = await confirmResponse.json();
      if (confirmResult.success) {
        alert(`üéâ NFT –∑–∞–º–∏–Ω—á–µ–Ω! –í–∞–º –≤—ã–ø–∞–ª–∞: ${result.card.card_name}`);
        onSuccess();
        onClose();
      }

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setIsProcessing(false);
    }
  };

  const handleCustomMint = async () => {
    if (!userAddress) {
      alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫!');
      return;
    }

    setIsProcessing(true);
    try {
      // 1. –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–∞—Ä—Ç—É
      const response = await fetch('/api/nft/mint-custom', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          wallet_address: userAddress,
          card_rank: selectedRank,
          card_suit: selectedSuit,
          custom_style: customStyle,
          custom_image_url: customImageUrl || null
        })
      });

      const result = await response.json();
      if (!result.success) {
        alert(result.message);
        setIsProcessing(false);
        return;
      }

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ TON Connect
      const masterWallet = result.master_wallet_address;
      const amount = result.mint_price_ton;

      const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 600,
        messages: [
          {
            address: masterWallet,
            amount: toNano(amount).toString(),
            payload: ''
          }
        ]
      };

      const txResult = await tonConnectUI.sendTransaction(transaction);
      
      // 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–∏–Ω—Ç
      const confirmResponse = await fetch('/api/nft/mint', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          mint_id: result.mint_id,
          nft_address: `nft_custom_${Date.now()}`,
          transaction_hash: txResult.boc
        })
      });

      const confirmResult = await confirmResponse.json();
      if (confirmResult.success) {
        alert(`üéâ –ö–∞—Å—Ç–æ–º–Ω—ã–π NFT –∑–∞–º–∏–Ω—á–µ–Ω: ${result.card.card_name}!`);
        onSuccess();
        onClose();
      }

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–∏–Ω—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setIsProcessing(false);
    }
  };

  if (!mintType) {
    return (
      <div className={styles.modal} onClick={onClose}>
        <motion.div
          className={styles.modalContent}
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          onClick={(e) => e.stopPropagation()}
        >
          <button className={styles.closeBtn} onClick={onClose}>
            <FaTimes />
          </button>

          <h2 className={styles.title}>üé¥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NFT –∫–∞—Ä—Ç—ã</h2>
          <p className={styles.subtitle}>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</p>

          <div className={styles.optionsGrid}>
            {/* –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è */}
            <motion.div
              className={styles.option}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setMintType('random')}
            >
              <FaDice className={styles.optionIcon} />
              <h3>üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è</h3>
              <p className={styles.optionPrice}>0.5 TON</p>
              <ul className={styles.optionFeatures}>
                <li>–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞</li>
                <li>2-10: 95% —à–∞–Ω—Å</li>
                <li>J-K: 4% —à–∞–Ω—Å</li>
                <li>A: 1% —à–∞–Ω—Å</li>
              </ul>
            </motion.div>

            {/* –ö–∞—Å—Ç–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è */}
            <motion.div
              className={styles.option}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setMintType('custom')}
            >
              <FaPaintBrush className={styles.optionIcon} />
              <h3>üé® –ö–∞—Å—Ç–æ–º–Ω–∞—è</h3>
              <p className={styles.optionPrice}>3 TON</p>
              <ul className={styles.optionFeatures}>
                <li>–í—ã–±–æ—Ä –º–∞—Å—Ç–∏ –∏ —Ä–∞–Ω–≥–∞</li>
                <li>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å</li>
                <li>–°–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</li>
                <li>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π NFT</li>
              </ul>
            </motion.div>
          </div>
        </motion.div>
      </div>
    );
  }

  if (mintType === 'random') {
    return (
      <div className={styles.modal} onClick={onClose}>
        <motion.div
          className={styles.modalContent}
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          onClick={(e) => e.stopPropagation()}
        >
          <button className={styles.closeBtn} onClick={onClose}>
            <FaTimes />
          </button>

          <h2 className={styles.title}>üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</h2>
          <p className={styles.subtitle}>–ö–æ–º–∏—Å—Å–∏—è: 0.5 TON</p>

          {randomCard && (
            <div className={styles.cardPreview}>
              <h3>{randomCard.card_name}</h3>
              <p>–†–µ–¥–∫–æ—Å—Ç—å: {randomCard.rarity}</p>
            </div>
          )}

          <div className={styles.infoBox}>
            <h4>‚ÑπÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è:</h4>
            <ul>
              <li>2-10: 95% —à–∞–Ω—Å</li>
              <li>J, Q, K: 4% —à–∞–Ω—Å</li>
              <li>A: 1% —à–∞–Ω—Å</li>
            </ul>
          </div>

          <button
            className={styles.mintBtn}
            onClick={handleRandomMint}
            disabled={isProcessing || !userAddress}
          >
            {isProcessing ? '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NFT'}
          </button>

          <button className={styles.backBtn} onClick={() => setMintType(null)}>
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </motion.div>
      </div>
    );
  }

  if (mintType === 'custom') {
    return (
      <div className={styles.modal} onClick={onClose}>
        <motion.div
          className={styles.modalContent}
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          onClick={(e) => e.stopPropagation()}
        >
          <button className={styles.closeBtn} onClick={onClose}>
            <FaTimes />
          </button>

          <h2 className={styles.title}>üé® –ö–∞—Å—Ç–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</h2>
          <p className={styles.subtitle}>–ö–æ–º–∏—Å—Å–∏—è: 3 TON</p>

          <div className={styles.customForm}>
            {/* –í—ã–±–æ—Ä —Ä–∞–Ω–≥–∞ */}
            <div className={styles.formGroup}>
              <label>–†–∞–Ω–≥ –∫–∞—Ä—Ç—ã:</label>
              <select value={selectedRank} onChange={(e) => setSelectedRank(e.target.value)}>
                {ranks.map(rank => (
                  <option key={rank} value={rank}>{rank}</option>
                ))}
              </select>
            </div>

            {/* –í—ã–±–æ—Ä –º–∞—Å—Ç–∏ */}
            <div className={styles.formGroup}>
              <label>–ú–∞—Å—Ç—å:</label>
              <div className={styles.suitsGrid}>
                {suits.map(suit => (
                  <button
                    key={suit.value}
                    className={`${styles.suitBtn} ${selectedSuit === suit.value ? styles.active : ''}`}
                    onClick={() => setSelectedSuit(suit.value)}
                  >
                    {suit.emoji} {suit.label}
                  </button>
                ))}
              </div>
            </div>

            {/* –í—ã–±–æ—Ä —Å—Ç–∏–ª—è */}
            <div className={styles.formGroup}>
              <label>–°—Ç–∏–ª—å:</label>
              <select value={customStyle} onChange={(e) => setCustomStyle(e.target.value)}>
                {styles_list.map(style => (
                  <option key={style} value={style}>{style}</option>
                ))}
              </select>
            </div>

            {/* URL –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            <div className={styles.formGroup}>
              <label>–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
              <input
                type="text"
                placeholder="https://example.com/image.png"
                value={customImageUrl}
                onChange={(e) => setCustomImageUrl(e.target.value)}
              />
              <small>–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ—Ä–µ–∑ Supabase Storage</small>
            </div>
          </div>

          <button
            className={styles.mintBtn}
            onClick={handleCustomMint}
            disabled={isProcessing || !userAddress}
          >
            {isProcessing ? '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üé® –°–æ–∑–¥–∞—Ç—å NFT –∑–∞ 3 TON'}
          </button>

          <button className={styles.backBtn} onClick={() => setMintType(null)}>
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </motion.div>
      </div>
    );
  }

  return null;
}

