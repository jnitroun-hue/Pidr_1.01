'use client';

import React, { useState, useEffect } from 'react';
import WaitingRoomProfessional from './WaitingRoomProfessional'; // –ò—Å–ø—Ä–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç - default export
import { roomStorage } from '../utils/roomStorage';
import styles from './ProperMultiplayer.module.css';

interface Room {
  id: number;
  room_code: string;
  name: string;
  max_players: number;
  current_players: number;
  status: string;
  is_private: boolean;
  created_at: string;
  users?: { username: string; avatar?: string };
  players?: any[];
}

interface RoomData {
  id: string;
  code: string;
  name: string;
  host: string;
  hostId: string;
  maxPlayers: number;
  gameMode: 'casual' | 'competitive'; // –¢–æ—á–Ω–æ –∫–∞–∫ –≤ WaitingRoomProfessional
  hasPassword: boolean;
  isPrivate: boolean;
  status: 'waiting' | 'starting' | 'playing'; // –î–æ–±–∞–≤–∏–ª 'starting'
  players: Array<{
    id: string;
    name: string;
    isHost: boolean;
    isReady: boolean;
    isBot: boolean;
    avatar?: string;
    joinedAt: Date;
  }>;
  settings: { // –£–±—Ä–∞–ª ? - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    autoStart: boolean;
    allowBots: boolean;
    minPlayers: number;
  };
}

interface User {
  id?: number;
  first_name?: string;
  username?: string;
  avatar?: string;
}

type ViewType = 'lobby' | 'create' | 'join' | 'waiting';

export const ProperMultiplayer: React.FC = () => {
  const [view, setView] = useState<ViewType>('lobby');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [user, setUser] = useState<User | null>(null);
  const [rooms, setRooms] = useState<Room[]>([]);
  const [currentRoom, setCurrentRoom] = useState<RoomData | null>(null);

  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  const [roomName, setRoomName] = useState('');
  const [maxPlayers, setMaxPlayers] = useState(6); // –î–ï–§–û–õ–¢ 6 –ò–ì–†–û–ö–û–í
  const [gameMode, setGameMode] = useState('casual');
  const [hasPassword, setHasPassword] = useState(false);
  const [password, setPassword] = useState('');
  const [isPrivate, setIsPrivate] = useState(false);

  // –§–æ—Ä–º–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const [joinCode, setJoinCode] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchUser();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–æ–±–±–∏ (–ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
  useEffect(() => {
    if (view === 'lobby') {
      fetchRooms();
    }
  }, [view]);

  const fetchUser = async () => {
    try {
      const response = await fetch('/api/auth', {
        method: 'GET',
        credentials: 'include'
      });

      if (response.ok) {
        const data = await response.json();
        setUser(data.user);
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };

  const fetchRooms = async () => {
    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/rooms?type=public', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ–º–Ω–∞—Ç—ã:', data.rooms?.length || 0);
        setRooms(data.rooms || []);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
      setError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateRoom = async () => {
    if (!roomName.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    setLoading(true);
    setError('');

    console.log('üîç –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –°–ï–†–í–ï–†:', {
      action: 'create',
      name: roomName,
      maxPlayers,
      gameMode,
      type_maxPlayers: typeof maxPlayers
    });

    try {
      const response = await fetch('/api/rooms', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          action: 'create',
          name: roomName,
          maxPlayers,
          gameMode,
          hasPassword,
          password: hasPassword ? password : null,
          isPrivate
        })
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', data.room);

         const roomData: RoomData = {
           id: data.room.id.toString(),
           code: data.room.roomCode,
           name: data.room.name,
           host: user?.first_name || user?.username || '–•–æ—Å—Ç',
           hostId: user?.id?.toString() || 'host',
           maxPlayers,
           gameMode: gameMode === 'casual' ? 'casual' : 'competitive', // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
           hasPassword,
           isPrivate,
           status: 'waiting',
           players: [
             {
               id: user?.id?.toString() || 'host',
               name: user?.first_name || user?.username || '–•–æ—Å—Ç',
               isHost: true,
               isReady: true,
               isBot: false,
               avatar: user?.avatar,
               joinedAt: new Date()
             }
           ],
           settings: {
             autoStart: false,
             allowBots: true,
             minPlayers: 4 // –ò–∑–º–µ–Ω–∏–ª –Ω–∞ 4 (–º–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤)
           }
         };

        setCurrentRoom(roomData);
        setView('waiting');
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
      setError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É');
    } finally {
      setLoading(false);
    }
  };

  const handleJoinRoom = async (roomCode?: string) => {
    const codeToUse = roomCode || joinCode;
    
    if (!codeToUse.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/rooms', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          action: 'join',
          roomCode: codeToUse.toUpperCase(),
          password: hasPassword ? password : null
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ:', result.room);

        // –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï–• –ò–ì–†–û–ö–û–í –í –ö–û–ú–ù–ê–¢–ï
        const playersResponse = await fetch(`/api/rooms/${result.room.id}/players`, {
          method: 'GET',
          credentials: 'include'
        });

        let allPlayers = [];
        if (playersResponse.ok) {
          const playersData = await playersResponse.json();
          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:', playersData.players);
          
          allPlayers = playersData.players.map((player: any) => ({
            id: player.user_id.toString(),
            name: player.username || '–ò–≥—Ä–æ–∫',
            isHost: player.position === 1, // –•–æ—Å—Ç –≤—Å–µ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è 1
            isReady: player.is_ready || player.position === 1, // –•–æ—Å—Ç –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤
            isBot: false,
            avatar: player.avatar_url,
            joinedAt: new Date(player.joined_at || Date.now())
          }));
        } else {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã');
          // Fallback - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
          allPlayers = [{
            id: user?.id?.toString() || 'player',
            name: user?.first_name || user?.username || '–ò–≥—Ä–æ–∫',
            isHost: result.room.isHost || false,
            isReady: result.room.isHost || false,
            isBot: false,
            avatar: user?.avatar,
            joinedAt: new Date()
          }];
        }

         const roomData: RoomData = {
           id: result.room.id.toString(),
           code: result.room.roomCode,
           name: result.room.name,
           host: allPlayers.find((p: any) => p.isHost)?.name || '–•–æ—Å—Ç',
           hostId: allPlayers.find((p: any) => p.isHost)?.id || 'host_id',
           maxPlayers: 6,
           gameMode: 'casual',
           hasPassword: false,
           isPrivate: false,
           status: 'waiting',
           players: allPlayers, // –í–°–ï –ò–ì–†–û–ö–ò –ò–ó –ë–î
           settings: {
             autoStart: false,
             allowBots: true,
             minPlayers: 4
           }
         };

        setCurrentRoom(roomData);
        setView('waiting');
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      setError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
  const handleLeaveRoom = async () => {
    if (!currentRoom) return;
    
    try {
      setLoading(true);
      
      // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –ù–ê –í–´–•–û–î –ò–ó –ö–û–ú–ù–ê–¢–´
      const response = await fetch('/api/rooms', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          action: 'leave',
          roomId: currentRoom.id
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', result.message);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –≤—ã—Ö–æ–¥–∞:', error);
    } finally {
      setLoading(false);
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏
      setCurrentRoom(null);
      setView('lobby');
    }
  };

  const handleStartGame = () => {
    console.log('üéÆ Starting game with room:', currentRoom);
    alert('–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
  };

  const handleUpdateRoom = (updates: any) => {
    if (currentRoom) {
      setCurrentRoom({ ...currentRoom, ...updates });
    }
  };

  // –†–µ–Ω–¥–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
  if (view === 'waiting' && currentRoom) {
    return (
      <WaitingRoomProfessional
        roomData={currentRoom}
        currentUserId={user?.id?.toString() || 'anonymous'}
        onLeaveRoom={handleLeaveRoom}
        onStartGame={handleStartGame}
        onUpdateRoom={handleUpdateRoom}
      />
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <button 
          className={styles.backButton}
          onClick={() => typeof window !== 'undefined' && window.history.back()}
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <h1 className={styles.title}>üéÆ –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä P.I.D.R.</h1>
        <p className={styles.subtitle}>–ò–≥—Ä–∞–π—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ –æ–Ω–ª–∞–π–Ω</p>
      </div>

      {error && (
        <div className={styles.error}>
          ‚ùå {error}
        </div>
      )}

      {/* –õ–æ–±–±–∏ */}
      {view === 'lobby' && (
        <div className={styles.lobby}>
          <div className={styles.actions}>
            <button 
              className={`${styles.button} ${styles.primary}`}
              onClick={() => setView('create')}
              disabled={loading}
            >
              üè† –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
            </button>
            
            <button 
              className={`${styles.button} ${styles.secondary}`}
              onClick={() => setView('join')}
              disabled={loading}
            >
              üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            </button>
          </div>

          <div className={styles.roomsList}>
            <div className={styles.roomsHeader}>
              <h3 className={styles.sectionTitle}>–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã</h3>
              <button 
                className={`${styles.button} ${styles.refresh}`}
                onClick={async () => {
                  await fetchRooms();
                }}
                disabled={loading}
                title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"
              >
                {loading ? '‚è≥' : 'üîÑ'} –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>
            
            {loading ? (
              <div className={styles.loading}>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç...</div>
            ) : rooms.length === 0 ? (
              <div className={styles.empty}>
                <p>üèöÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç</p>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–Ω–∞—Ç—É!</p>
              </div>
            ) : (
              <div className={styles.rooms}>
                {rooms.map((room) => (
                  <div key={room.id} className={styles.roomCard}>
                    <div className={styles.roomInfo}>
                      <h4 className={styles.roomName}>{room.name}</h4>
                      <p className={styles.roomHost}>
                        üëë –•–æ—Å—Ç: {room.users?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      </p>
                      <p className={styles.roomDetails}>
                        üë• {room.current_players}/{room.max_players} –∏–≥—Ä–æ–∫–æ–≤
                      </p>
                      <p className={styles.roomCode}>–ö–æ–¥: {room.room_code}</p>
                    </div>
                    
                    <button 
                      className={`${styles.button} ${styles.join}`}
                      onClick={() => handleJoinRoom(room.room_code)}
                      disabled={loading || room.current_players >= room.max_players}
                    >
                      {room.current_players >= room.max_players ? 'üîí –ó–∞–ø–æ–ª–Ω–µ–Ω–∞' : 'üö™ –í–æ–π—Ç–∏'}
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã */}
      {view === 'create' && (
        <div className={styles.form}>
          <h3 className={styles.formTitle}>üè† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã</h3>
          
          <div className={styles.field}>
            <label className={styles.label}>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã</label>
            <input
              type="text"
              className={styles.input}
              value={roomName}
              onChange={(e) => setRoomName(e.target.value)}
              placeholder="–ú–æ—è –∫—Ä—É—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞"
              maxLength={50}
            />
          </div>

           <div className={styles.field}>
             <label className={styles.label}>–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤</label>
             <div className={styles.playerCards}>
               {[4, 5, 6, 7, 8, 9].map((num) => (
                 <button
                   key={num}
                   type="button"
                   className={`${styles.playerCard} ${maxPlayers === num ? styles.selected : ''}`}
                   onClick={() => setMaxPlayers(num)}
                 >
                   <div className={styles.cardNumber}>{num}</div>
                   <div className={styles.cardLabel}>–∏–≥—Ä–æ–∫–æ–≤</div>
                 </button>
               ))}
             </div>
           </div>

          <div className={styles.field}>
            <label className={styles.label}>–†–µ–∂–∏–º –∏–≥—Ä—ã</label>
            <select
              className={styles.select}
              value={gameMode}
              onChange={(e) => setGameMode(e.target.value)}
            >
              <option value="casual">–û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞</option>
              <option value="ranked">–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è</option>
              <option value="tournament">–¢—É—Ä–Ω–∏—Ä</option>
            </select>
          </div>

          <div className={styles.checkboxes}>
            <label className={styles.checkbox}>
              <input
                type="checkbox"
                checked={hasPassword}
                onChange={(e) => setHasPassword(e.target.checked)}
              />
              <span>üîí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å</span>
            </label>

            {hasPassword && (
              <input
                type="password"
                className={styles.input}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                maxLength={20}
              />
            )}

            <label className={styles.checkbox}>
              <input
                type="checkbox"
                checked={isPrivate}
                onChange={(e) => setIsPrivate(e.target.checked)}
              />
              <span>üëÅÔ∏è –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞</span>
            </label>
          </div>

          <div className={styles.formActions}>
            <button 
              className={`${styles.button} ${styles.secondary}`}
              onClick={() => setView('lobby')}
              disabled={loading}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            
            <button 
              className={`${styles.button} ${styles.primary}`}
              onClick={handleCreateRoom}
              disabled={loading || !roomName.trim()}
            >
              {loading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : 'üè† –°–æ–∑–¥–∞—Ç—å'}
            </button>
          </div>
        </div>
      )}

      {/* –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ */}
      {view === 'join' && (
        <div className={styles.form}>
          <h3 className={styles.formTitle}>üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ</h3>
          
          <div className={styles.field}>
            <label className={styles.label}>–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã</label>
            <input
              type="text"
              className={styles.input}
              value={joinCode}
              onChange={(e) => setJoinCode(e.target.value.toUpperCase())}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"
              maxLength={6}
            />
          </div>

          {hasPassword && (
            <div className={styles.field}>
              <label className={styles.label}>–ü–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                className={styles.input}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                maxLength={20}
              />
            </div>
          )}

          <div className={styles.formActions}>
            <button 
              className={`${styles.button} ${styles.secondary}`}
              onClick={() => setView('lobby')}
              disabled={loading}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            
            <button 
              className={`${styles.button} ${styles.primary}`}
              onClick={() => handleJoinRoom()}
              disabled={loading || !joinCode.trim()}
            >
              {loading ? '‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 'üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProperMultiplayer;
