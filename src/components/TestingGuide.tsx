"use client";

import { Box, VStack, HStack, Text, Badge, Code, Alert } from '@chakra-ui/react';
import { FaCheck, FaExclamationTriangle, FaInfo } from 'react-icons/fa';

export default function TestingGuide() {
  const bg = 'white';
  const borderColor = 'gray.200';

  const testScenarios = [
    {
      category: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
      status: 'ready',
      tests: [
        {
          name: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
          description: '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º, email –∏ –ø–∞—Ä–æ–ª–µ–º',
          steps: [
            '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ /auth/register',
            '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É: username (3-32 —Å–∏–º–≤–æ–ª–∞), email, –ø–∞—Ä–æ–ª—å (6+ —Å–∏–º–≤–æ–ª–æ–≤ —Å –±—É–∫–≤–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏)',
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å',
            '–ù–∞–∂–∞—Ç—å "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É'
          ],
          expected: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –ø–æ–ª—É—á–µ–Ω JWT —Ç–æ–∫–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage'
        },
        {
          name: '–õ–æ–∫–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥',
          description: '–í—Ö–æ–¥ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é',
          steps: [
            '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ /auth/login',
            '–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å',
            '–ù–∞–∂–∞—Ç—å "–í–æ–π—Ç–∏"',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é'
          ],
          expected: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, JWT —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
        },
        {
          name: 'Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
          description: '–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram WebApp',
          steps: [
            '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram WebApp',
            '–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç—å "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          ],
          expected: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram –¥–∞–Ω–Ω—ã–µ'
        }
      ]
    },
    {
      category: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–∞–º–∏',
      status: 'ready',
      tests: [
        {
          name: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã',
          description: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã',
          steps: [
            '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ',
            '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã',
            '–í—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å, –ø–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
            '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã'
          ],
          expected: '–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ö–æ—Å—Ç'
        },
        {
          name: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
          description: '–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ',
          steps: [
            '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º A',
            '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–æ–º–Ω–∞—Ç—É —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
            '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∂–µ –∫–æ–º–Ω–∞—Ç–µ'
          ],
          expected: '–û—à–∏–±–∫–∏: "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞", "–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ"'
        },
        {
          name: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ',
          description: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É –∫–æ–º–Ω–∞—Ç—ã',
          steps: [
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å B –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è A',
            '–ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å - –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å',
            '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤'
          ],
          expected: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É, –æ–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤'
        },
        {
          name: '–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º',
          description: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É',
          steps: [
            '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
            '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤',
            '–ù–∞–∂–∞—Ç—å "–ó–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É" (–∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é)',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∫–æ–º–Ω–∞—Ç—ã'
          ],
          expected: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞, –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å "online"'
        },
        {
          name: '–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã',
          description: '–ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ–±—ã—á–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º',
          steps: [
            '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á—É–∂–æ–π –∫–æ–º–Ω–∞—Ç–µ',
            '–ù–∞–∂–∞—Ç—å "–í—ã–π—Ç–∏"',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤',
            '–°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É - –ø—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É'
          ],
          expected: '–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω, —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø—Ä–∞–≤–∞ —Ö–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏'
        }
      ]
    },
    {
      category: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
      status: 'ready',
      tests: [
        {
          name: 'Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤',
          steps: [
            '–ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–π—Ç–∏ –Ω–∞ /profile, /game, /multiplayer',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /auth/login',
            '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–π—Ç–∏ –Ω–∞ /auth/login, /auth/register',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É'
          ],
          expected: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        },
        {
          name: 'JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–∞—Ü–∏—è',
          description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤',
          steps: [
            '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω',
            '–ü–æ–¥–¥–µ–ª–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ localStorage',
            '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É API',
            '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç 401 Unauthorized'
          ],
          expected: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è'
        }
      ]
    }
  ];

  const envVariables = [
    { name: 'JWT_SECRET', required: true, description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤' },
    { name: 'SUPABASE_URL', required: true, description: 'URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase' },
    { name: 'SUPABASE_ANON_KEY', required: true, description: '–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Supabase' },
    { name: 'BOT_TOKEN', required: true, description: 'Telegram Bot Token' },
    { name: 'NEXT_PUBLIC_GOOGLE_CLIENT_ID', required: false, description: 'Google OAuth Client ID' },
    { name: 'GOOGLE_CLIENT_SECRET', required: false, description: 'Google OAuth Client Secret' },
    { name: 'NEXT_PUBLIC_VK_CLIENT_ID', required: false, description: 'VK OAuth Client ID' },
    { name: 'VK_CLIENT_SECRET', required: false, description: 'VK OAuth Client Secret' },
  ];

  return (
    <Box maxW="6xl" mx="auto" p={6}>
      <VStack gap={8} align="stretch">
        {/* Header */}
        <Box>
          <Text fontSize="3xl" fontWeight="bold" color="blue.600" mb={2}>
            üß™ P.I.D.R. Testing Guide
          </Text>
          <Text color="gray.600" fontSize="lg">
            –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏
          </Text>
        </Box>

        {/* Environment Variables */}
        <Box bg={bg} p={6} borderRadius="xl" border="1px" borderColor={borderColor}>
          <HStack mb={4}>
            <FaInfo color="blue" />
            <Text fontSize="xl" fontWeight="semibold">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è</Text>
          </HStack>
          <VStack gap={3} align="stretch">
            {envVariables.map((env) => (
              <HStack key={env.name} justify="space-between" p={3} bg="gray.50" borderRadius="md">
                <VStack align="start" gap={1}>
                  <Code colorScheme="blue">{env.name}</Code>
                  <Text fontSize="sm" color="gray.600">{env.description}</Text>
                </VStack>
                <Badge colorScheme={env.required ? 'red' : 'gray'}>
                  {env.required ? '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ'}
                </Badge>
              </HStack>
            ))}
          </VStack>
        </Box>

        {/* Test Scenarios */}
        <Box bg={bg} p={6} borderRadius="xl" border="1px" borderColor={borderColor}>
          <HStack mb={6}>
            <FaCheck color="green" />
            <Text fontSize="xl" fontWeight="semibold">–°—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</Text>
          </HStack>

          <VStack gap={4}>
            {testScenarios.map((category, categoryIndex) => (
              <Box key={categoryIndex} border="1px solid" borderColor="gray.200" borderRadius="lg">
                <Box p={4} bg="gray.50" borderTopRadius="lg">
                  <HStack>
                    <Badge 
                      colorScheme={category.status === 'ready' ? 'green' : 'yellow'}
                      variant="solid"
                    >
                      {category.status === 'ready' ? '–ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é' : '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'}
                    </Badge>
                    <Text fontWeight="semibold" fontSize="lg">{category.category}</Text>
                  </HStack>
                </Box>
                <Box p={4}>
                  <VStack gap={6} align="stretch">
                    {category.tests.map((test, testIndex) => (
                      <Box key={testIndex} p={4} bg="gray.50" borderRadius="lg">
                        <VStack align="stretch" gap={3}>
                          <HStack justify="space-between">
                            <Text fontWeight="bold" color="blue.600">{test.name}</Text>
                          </HStack>
                          
                          <Text color="gray.700" fontSize="sm">{test.description}</Text>
                          
                          <Box height="1px" bg="gray.300" />
                          
                          <Box>
                            <Text fontWeight="semibold" mb={2} color="gray.800">–®–∞–≥–∏:</Text>
                            <VStack align="stretch" gap={1}>
                              {test.steps.map((step, stepIndex) => (
                                <HStack key={stepIndex}>
                                  <Badge size="sm" colorScheme="blue">{stepIndex + 1}</Badge>
                                  <Text fontSize="sm">{step}</Text>
                                </HStack>
                              ))}
                            </VStack>
                          </Box>
                          
                          <Box>
                            <Text fontWeight="semibold" color="green.600">–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</Text>
                            <Text fontSize="sm" color="gray.700">{test.expected}</Text>
                          </Box>
                        </VStack>
                      </Box>
                    ))}
                  </VStack>
                </Box>
              </Box>
            ))}
          </VStack>
        </Box>

        {/* Critical Warnings */}
        <Box>
          <Alert.Root status="warning">
            <Alert.Indicator />
            <Alert.Content borderRadius="lg">
              <Text fontWeight="bold">‚ö†Ô∏è –í–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–≤—å—é:</Text>
              <VStack align="start" mt={2} gap={1}>
                <Text>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π</Text>
                <Text>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π</Text>
                <Text>‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–Ω–∞—Ç –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</Text>
                <Text>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (middleware)</Text>
                <Text>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ Telegram WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</Text>
              </VStack>
            </Alert.Content>
          </Alert.Root>
        </Box>

        {/* Quick Start */}
        <Box bg="blue.50" p={6} borderRadius="xl">
          <Text fontSize="lg" fontWeight="bold" color="blue.700" mb={3}>
            üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:
          </Text>
          <VStack align="start" gap={2}>
            <Text>1. <Code>npm run dev</Code> - –∑–∞–ø—É—Å—Ç–∏—Ç—å development —Å–µ—Ä–≤–µ—Ä</Text>
            <Text>2. –û—Ç–∫—Ä—ã—Ç—å <Code>http://localhost:3000</Code></Text>
            <Text>3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /auth/register</Text>
            <Text>4. –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</Text>
            <Text>5. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é –∫–æ–º–Ω–∞—Ç—É)</Text>
          </VStack>
        </Box>
      </VStack>
    </Box>
  );
}
