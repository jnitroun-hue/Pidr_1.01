'use client'
import React, { useEffect, useState } from 'react';
import { useTelegram } from '@/hooks/useTelegram';


interface TelegramInvitation {
  id: string;
  roomId: string;
  roomCode: string;
  roomName: string;
  inviterName: string;
  inviterAvatar: string;
  playerCount: string;
  status: string;
  inviteUrl: string;
  createdAt: string;
}

interface TelegramInvitationsProps {
  onJoinRoom?: (roomId: string, roomCode: string) => void;
}

export default function TelegramInvitations({ onJoinRoom }: TelegramInvitationsProps) {
  const { user, webApp } = useTelegram();

  
  const [invitations, setInvitations] = useState<TelegramInvitation[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateRoom, setShowCreateRoom] = useState(false);
  const [createRoomData, setCreateRoomData] = useState({
    maxPlayers: 4,
    name: ''
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
  const loadInvitations = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      const response = await fetch('/api/telegram-multiplayer?type=pending', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      const data = await response.json();
      if (data.success) {
        setInvitations(data.invitations);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  const acceptInvitation = async (invitation: TelegramInvitation) => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      const response = await fetch('/api/telegram-multiplayer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          action: 'accept-invitation',
          invitationId: invitation.id
        })
      });

      const data = await response.json();
      if (data.success) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É
        if (onJoinRoom) {
          onJoinRoom(invitation.roomId, invitation.roomCode);
        } else {
          window.location.href = `/game?roomId=${invitation.roomId}&roomCode=${invitation.roomCode}`;
        }
      } else {
        alert(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
  };

  // –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è Telegram
  const createTelegramRoom = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
      const roomCode = Math.random().toString(36).substring(2, 8).toUpperCase();
      
      const response = await fetch('/api/telegram-multiplayer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          action: 'create-telegram-room',
          roomCode,
          gameSettings: {
            maxPlayers: createRoomData.maxPlayers,
            source: 'telegram'
          }
        })
      });

      const data = await response.json();
      if (data.success) {
        // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–º–Ω–∞—Ç–æ–π —á–µ—Ä–µ–∑ Telegram
        if (data.room.telegramShareUrl) {
          if (webApp && webApp.openTelegramLink) {
            webApp.openTelegramLink(data.room.telegramShareUrl);
          } else {
            window.open(data.room.telegramShareUrl, '_blank');
          }
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        if (onJoinRoom) {
          onJoinRoom(data.room.id, data.room.code);
        } else {
          window.location.href = `/game?roomId=${data.room.id}&roomCode=${data.room.code}&host=true`;
        }
      } else {
        alert(data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
    }
  };

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
  const shareInvitation = async (invitation: TelegramInvitation) => {
    try {
      if (webApp && webApp.openTelegramLink) {
        const shareText = `üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∏–≥—Ä–µ P.I.D.R.!\n\n` +
                         `üéØ –ö–æ–º–Ω–∞—Ç–∞: ${invitation.roomCode}\n` +
                         `üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: ${invitation.inviterName}\n` +
                         `üë• –ò–≥—Ä–æ–∫–æ–≤: ${invitation.playerCount}\n\n` +
                         `–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!`;
        
        webApp.openTelegramLink(
          `https://t.me/share/url?url=${encodeURIComponent(invitation.inviteUrl)}&text=${encodeURIComponent(shareText)}`
        );
      } else {
        // –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        await navigator.clipboard.writeText(invitation.inviteUrl);
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–µ–ª–∫–µ:', error);
    }
  };

  useEffect(() => {
    loadInvitations();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadInvitations, 30000);
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...</div>
      </div>
    );
  }

  return (
    <div className="max-w-md mx-auto p-4 space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h2 className="text-xl font-bold text-white mb-2">üéÆ Telegram –ò–≥—Ä—ã</h2>
        <p className="text-gray-300 text-sm">
          –ò–≥—Ä–∞–π—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ —á–µ—Ä–µ–∑ Telegram
        </p>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã */}
      <button
        onClick={() => setShowCreateRoom(true)}
        className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium"
      >
        ‚ûï –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
      </button>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π */}
      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-white">üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ({invitations.length})</h3>
        
        {invitations.length === 0 ? (
          <div className="text-center py-8">
            <div className="text-gray-400 mb-2">üé≠</div>
            <div className="text-gray-300">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π</div>
            <div className="text-gray-500 text-sm mt-1">
              –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å
            </div>
          </div>
        ) : (
          invitations.map(invitation => (
            <div key={invitation.id} className="bg-gray-700 rounded-lg p-4 space-y-3">
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ */}
              <div className="flex items-center space-x-3">
                <div className="text-2xl">{invitation.inviterAvatar}</div>
                <div className="flex-1">
                  <div className="text-white font-medium">{invitation.inviterName}</div>
                  <div className="text-gray-300 text-sm">–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤ –∏–≥—Ä—É</div>
                </div>
                <div className="text-right">
                  <div className="text-blue-400 font-mono text-sm">{invitation.roomCode}</div>
                  <div className="text-gray-400 text-xs">{invitation.playerCount}</div>
                </div>
              </div>

              {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã */}
              <div className="text-gray-300 text-sm">
                üéØ {invitation.roomName}
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
              <div className="flex space-x-2">
                <button
                  onClick={() => acceptInvitation(invitation)}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-3 rounded text-sm font-medium"
                >
                  ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
                </button>
                <button
                  onClick={() => shareInvitation(invitation)}
                  className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded text-sm"
                >
                  üì§
                </button>
              </div>

              {/* –í—Ä–µ–º—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
              <div className="text-gray-500 text-xs">
                {new Date(invitation.createdAt).toLocaleString('ru')}
              </div>
            </div>
          ))
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã */}
      {showCreateRoom && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 rounded-lg p-6 max-w-sm w-full mx-4">
            <h3 className="text-lg font-bold text-white mb-4">üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm text-gray-300 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã</label>
                <input
                  type="text"
                  value={createRoomData.name}
                  onChange={(e) => setCreateRoomData(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="–ú–æ—è –∫—Ä—É—Ç–∞—è –∏–≥—Ä–∞"
                  className="w-full bg-gray-700 text-white px-3 py-2 rounded border border-gray-600 focus:border-blue-400 focus:outline-none"
                />
              </div>

              <div>
                <label className="block text-sm text-gray-300 mb-2">–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤</label>
                <select
                  value={createRoomData.maxPlayers}
                  onChange={(e) => setCreateRoomData(prev => ({ ...prev, maxPlayers: parseInt(e.target.value) }))}
                  className="w-full bg-gray-700 text-white px-3 py-2 rounded border border-gray-600 focus:border-blue-400 focus:outline-none"
                >
                  <option value={2}>2 –∏–≥—Ä–æ–∫–∞</option>
                  <option value={3}>3 –∏–≥—Ä–æ–∫–∞</option>
                  <option value={4}>4 –∏–≥—Ä–æ–∫–∞</option>
                  <option value={5}>5 –∏–≥—Ä–æ–∫–æ–≤</option>
                  <option value={6}>6 –∏–≥—Ä–æ–∫–æ–≤</option>
                  <option value={7}>7 –∏–≥—Ä–æ–∫–æ–≤</option>
                  <option value={8}>8 –∏–≥—Ä–æ–∫–æ–≤</option>
                  <option value={9}>9 –∏–≥—Ä–æ–∫–æ–≤</option>
                </select>
              </div>
            </div>

            <div className="flex space-x-3 mt-6">
              <button
                onClick={createTelegramRoom}
                className="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded font-medium"
              >
                üöÄ –°–æ–∑–¥–∞—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
              </button>
              <button
                onClick={() => setShowCreateRoom(false)}
                className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
