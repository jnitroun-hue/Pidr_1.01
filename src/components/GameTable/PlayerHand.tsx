'use client'

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import styles from './PlayerHand.module.css';
import { Card } from '../../types/game';

interface PlayerHandProps {
  cards: Card[];
  selectedCardIndex: number | null;
  onCardSelect: (index: number) => void;
  onCardPlay: (index: number) => void;
  canPlayCard: (card: Card, index: number) => boolean;
  gameStage: 1 | 2 | 3;
  isPlayerTurn: boolean;
}

const PlayerHand: React.FC<PlayerHandProps> = ({
  cards,
  selectedCardIndex,
  onCardSelect,
  onCardPlay,
  canPlayCard,
  gameStage,
  isPlayerTurn
}) => {
  const maxVisibleCards = 8;
  const shouldScroll = cards.length > maxVisibleCards;

  return (
    <div className={styles.handContainer}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä—É–∫–∏ */}
      <div className={styles.handHeader}>
        <div className={styles.handTitle}>
          –í–∞—à–∏ –∫–∞—Ä—Ç—ã ({cards.length})
        </div>
        <div className={styles.gameStageInfo}>
          –°—Ç–∞–¥–∏—è {gameStage}
          {!isPlayerTurn && <span className={styles.waitingIndicator}>–û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞</span>}
        </div>
      </div>

      {/* –ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ */}
      <div className={`${styles.handCards} ${shouldScroll ? styles.scrollable : ''}`}>
        <AnimatePresence mode="popLayout">
          {cards.map((card, index) => {
            const isSelected = selectedCardIndex === index;
            const isPlayable = isPlayerTurn && canPlayCard(card, index);
            
            return (
              <motion.div
                key={`${card.suit}-${card.rank}-${index}`}
                className={`${styles.handCard} ${isSelected ? styles.selected : ''} ${isPlayable ? styles.playable : ''} ${!isPlayerTurn ? styles.disabled : ''}`}
                initial={{ y: 100, opacity: 0, scale: 0.8 }}
                animate={{ 
                  y: isSelected ? -20 : 0, 
                  opacity: 1, 
                  scale: isSelected ? 1.1 : 1,
                  zIndex: isSelected ? 10 : 1
                }}
                exit={{ y: -100, opacity: 0, scale: 0.8 }}
                transition={{ 
                  type: "spring", 
                  stiffness: 300, 
                  damping: 25,
                  delay: index * 0.05
                }}
                whileHover={isPlayerTurn ? { 
                  y: isSelected ? -20 : -10, 
                  scale: isSelected ? 1.1 : 1.05,
                  transition: { duration: 0.2 }
                } : {}}
                onClick={() => {
                  if (!isPlayerTurn) return;
                  
                  if (isSelected) {
                    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –∏–≥—Ä–∞–µ–º –µ—ë
                    onCardPlay(index);
                  } else {
                    // –ò–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É
                    onCardSelect(index);
                  }
                }}
                style={{
                  marginLeft: shouldScroll ? '0' : `${index * -20}px`,
                }}
              >
                {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã */}
                <div className={styles.cardImageContainer}>
                  <img
                    src={`/cards/${card.suit}_${card.rank}.png`}
                    alt={`${card.rank} of ${card.suit}`}
                    className={styles.cardImage}
                    draggable={false}
                  />
                  
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞ */}
                  {isPlayable && (
                    <div className={styles.playableIndicator}>
                      <div className={styles.playablePulse}></div>
                    </div>
                  )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ */}
                <div className={styles.cardInfo}>
                  <div className={styles.cardRank}>{card.rank}</div>
                  <div className={styles.cardSuit}>
                    {card.suit === 'hearts' && '‚ô•Ô∏è'}
                    {card.suit === 'diamonds' && '‚ô¶Ô∏è'}
                    {card.suit === 'clubs' && '‚ô£Ô∏è'}
                    {card.suit === 'spades' && '‚ô†Ô∏è'}
                  </div>
                </div>

                {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã */}
                {isSelected && (
                  <motion.div 
                    className={styles.cardTooltip}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 10 }}
                  >
                    {isPlayable ? '–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å' : '–ù–µ–ª—å–∑—è —Å—ã–≥—Ä–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É'}
                  </motion.div>
                )}
              </motion.div>
            );
          })}
        </AnimatePresence>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–∞–º–∏ */}
      <div className={styles.handActions}>
        {selectedCardIndex !== null && (
          <motion.div 
            className={styles.actionButtons}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
          >
            <button 
              className={`${styles.actionButton} ${styles.playButton}`}
              onClick={() => onCardPlay(selectedCardIndex)}
              disabled={!isPlayerTurn || !canPlayCard(cards[selectedCardIndex], selectedCardIndex)}
            >
              üÉè –°—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É
            </button>
            
            <button 
              className={`${styles.actionButton} ${styles.cancelButton}`}
              onClick={() => onCardSelect(-1)}
            >
              ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          </motion.div>
        )}

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏–≥—Ä–µ */}
        <div className={styles.gameHints}>
          {gameStage === 1 && (
            <div className={styles.hint}>
              üí° –°—Ç–∞–¥–∏—è 1: –ò–≥—Ä–∞–π—Ç–µ –∫–∞—Ä—Ç–æ–π –Ω–∞ 1 —Ä–∞–Ω–≥ –≤—ã—à–µ. –ú–∞—Å—Ç–∏ –Ω–µ –≤–∞–∂–Ω—ã.
            </div>
          )}
          {gameStage === 2 && (
            <div className={styles.hint}>
              üí° –°—Ç–∞–¥–∏—è 2: –ü—Ä–∞–≤–∏–ª–∞ "–î—É—Ä–∞–∫–∞". –ü–∏–∫–∏ –±—å—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∏–∫–∞–º–∏!
            </div>
          )}
          {gameStage === 3 && (
            <div className={styles.hint}>
              üí° –°—Ç–∞–¥–∏—è 3: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±—ä—è–≤–∏—Ç—å "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞!"
            </div>
          )}
        </div>
      </div>

      {/* –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç */}
      {shouldScroll && (
        <div className={styles.scrollHint}>
          ‚Üê –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç ‚Üí
        </div>
      )}
    </div>
  );
};

export default PlayerHand;
